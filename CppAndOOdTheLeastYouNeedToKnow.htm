<html>

<head>
<meta name=Title content="C++ and TDD">
<meta name=Keywords content="">
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<title>C++ and TDD</title>
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Arial;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Courier New";
	panose-1:2 7 3 9 2 2 5 2 4 4;}
@font-face
	{font-family:Times;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Geneva;
	panose-1:2 11 5 3 3 4 4 4 2 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Helv;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Sans Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"New York";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"ＭＳ 明朝";}
@font-face
	{font-family:바탕;}
@font-face
	{font-family:宋体;}
@font-face
	{font-family:新細明體;}
@font-face
	{font-family:"ＭＳ ゴシック";}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cordia New";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"CG Times \(W1\)";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;}
@font-face
	{font-family:"Arial Black";
	panose-1:2 11 10 4 2 1 2 2 2 4;}
@font-face
	{font-family:"Century Gothic";
	panose-1:2 11 5 2 2 2 2 2 2 4;}
@font-face
	{font-family:Monaco;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:CourierNewPSMT;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:CourierNewPS-BoldMT;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Grande";
	panose-1:2 11 6 0 4 5 2 2 2 4;}
@font-face
	{font-family:"Abadi MT Condensed Extra Bold";
	panose-1:2 11 10 6 3 1 1 1 1 3;}
@font-face
	{font-family:"Abadi MT Condensed Light";
	panose-1:2 11 3 6 3 1 1 1 1 3;}
@font-face
	{font-family:"American Typewriter";
	panose-1:2 9 6 4 2 0 4 2 3 4;}
@font-face
	{font-family:"American Typewriter Condensed";
	panose-1:2 9 6 6 2 0 4 2 3 4;}
@font-face
	{font-family:"American Typewriter Light";
	panose-1:2 9 3 4 2 0 4 2 3 4;}
@font-face
	{font-family:"Andale Mono";
	panose-1:2 11 5 9 0 0 0 0 0 4;}
@font-face
	{font-family:"Apple Casual";
	panose-1:0 1 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Apple Chancery";
	panose-1:3 2 7 2 4 5 6 6 5 4;}
@font-face
	{font-family:"Apple Symbols";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Arial Narrow Bold";
	panose-1:2 11 7 6 2 2 2 3 2 4;}
@font-face
	{font-family:"Arial Narrow Bold Italic";
	panose-1:2 11 7 6 2 2 2 10 2 4;}
@font-face
	{font-family:"Arial Narrow Italic";
	panose-1:2 11 6 6 2 2 2 10 2 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Ayuthaya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Bangla MN";
	panose-1:2 0 5 0 2 0 0 0 0 0;}
@font-face
	{font-family:"Bangla Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Baskerville;
	panose-1:2 2 5 2 7 4 1 2 3 3;}
@font-face
	{font-family:"Baskerville Old Face";
	panose-1:2 2 6 2 8 5 5 2 3 3;}
@font-face
	{font-family:"Baskerville SemiBold Italic";
	panose-1:2 2 7 2 7 4 0 9 2 3;}
@font-face
	{font-family:"Bauhaus 93";
	panose-1:4 3 9 5 2 11 2 2 12 2;}
@font-face
	{font-family:"Bell MT";
	panose-1:2 2 5 3 6 3 5 2 3 3;}
@font-face
	{font-family:"Bernard MT Condensed";
	panose-1:2 5 8 6 6 9 5 2 4 4;}
@font-face
	{font-family:"Big Caslon";
	panose-1:2 0 6 3 9 0 0 2 0 3;}
@font-face
	{font-family:"BlairMdITC TT-Medium";
	panose-1:0 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;}
@font-face
	{font-family:"Bookman Old Style";
	panose-1:2 5 6 4 5 5 5 2 2 4;}
@font-face
	{font-family:"Bookshelf Symbol 7";
	panose-1:5 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Bordeaux Roman Bold LET";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Braggadocio;
	panose-1:4 3 11 7 13 11 2 2 4 3;}
@font-face
	{font-family:"Britannic Bold";
	panose-1:2 11 9 3 6 7 3 2 2 4;}
@font-face
	{font-family:"Brush Script MT Italic";
	panose-1:3 6 8 2 4 4 6 7 3 4;}
@font-face
	{font-family:"Calisto MT";
	panose-1:2 4 6 3 5 5 5 3 3 4;}
@font-face
	{font-family:Candara;
	panose-1:2 14 5 2 3 3 3 2 2 4;}
@font-face
	{font-family:"Century Schoolbook";
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:Chalkboard;
	panose-1:3 5 6 2 4 2 2 2 2 5;}
@font-face
	{font-family:Chalkduster;
	panose-1:3 5 6 2 4 2 2 2 2 5;}
@font-face
	{font-family:Cochin;
	panose-1:2 0 6 3 2 0 0 2 0 3;}
@font-face
	{font-family:"Colonna MT";
	panose-1:4 2 8 5 6 2 2 3 2 3;}
@font-face
	{font-family:"Comic Sans MS";
	panose-1:3 15 7 2 3 3 2 2 2 4;}
@font-face
	{font-family:"Comic Sans MS Bold";
	panose-1:3 15 9 2 3 3 2 2 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:Constantia;
	panose-1:2 3 6 2 5 3 6 3 3 3;}
@font-face
	{font-family:"Cooper Black";
	panose-1:2 8 9 4 4 3 11 2 4 4;}
@font-face
	{font-family:Copperplate;
	panose-1:2 0 5 4 0 0 0 2 0 4;}
@font-face
	{font-family:"Copperplate Gothic Bold";
	panose-1:2 14 7 5 2 2 6 2 4 4;}
@font-face
	{font-family:"Copperplate Gothic Light";
	panose-1:2 14 5 7 2 2 6 2 4 4;}
@font-face
	{font-family:"Copperplate Light";
	panose-1:2 0 6 4 3 0 0 2 0 4;}
@font-face
	{font-family:Corbel;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:Cracked;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Curlz MT";
	panose-1:4 4 4 4 5 7 2 2 2 2;}
@font-face
	{font-family:Desdemona;
	panose-1:4 2 5 5 2 14 3 4 5 4;}
@font-face
	{font-family:"Devanagari Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Didot;
	panose-1:2 0 5 3 0 0 0 2 0 3;}
@font-face
	{font-family:"Edwardian Script ITC";
	panose-1:3 3 3 2 4 7 7 13 8 4;}
@font-face
	{font-family:"Engravers MT";
	panose-1:2 9 7 7 8 5 5 2 3 4;}
@font-face
	{font-family:"Euphemia UCAS";
	panose-1:2 11 5 3 4 1 2 2 1 4;}
@font-face
	{font-family:Eurostile;
	panose-1:2 11 5 4 2 2 2 5 2 4;}
@font-face
	{font-family:"Footlight MT Light";
	panose-1:2 4 6 2 6 3 10 2 3 4;}
@font-face
	{font-family:"Franklin Gothic Book";
	panose-1:2 11 5 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Medium";
	panose-1:2 11 6 3 2 1 2 2 2 4;}
@font-face
	{font-family:Futura;
	panose-1:2 11 6 2 2 2 4 2 3 3;}
@font-face
	{font-family:"Futura Condensed";
	panose-1:2 11 5 6 2 2 4 3 2 4;}
@font-face
	{font-family:Gabriola;
	panose-1:4 4 6 5 5 16 2 2 13 2;}
@font-face
	{font-family:Garamond;
	panose-1:2 2 4 4 3 3 1 1 8 3;}
@font-face
	{font-family:Georgia;
	panose-1:2 4 5 2 5 4 5 2 3 3;}
@font-face
	{font-family:"Gill Sans";
	panose-1:2 11 5 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Light";
	panose-1:2 11 3 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans MT";
	panose-1:2 11 5 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Ultra Bold";
	panose-1:2 11 10 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gloucester MT Extra Condensed";
	panose-1:2 3 8 8 2 6 1 1 1 1;}
@font-face
	{font-family:"Goudy Old Style";
	panose-1:2 2 5 2 5 3 5 2 3 3;}
@font-face
	{font-family:"Gujarati Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Gurmukhi MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:Haettenschweiler;
	panose-1:2 11 7 6 4 9 2 6 2 4;}
@font-face
	{font-family:"Handwriting - Dakota";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Harrington;
	panose-1:4 4 5 5 5 10 2 2 7 2;}
@font-face
	{font-family:"Helvetica Light";
	panose-1:2 11 4 3 2 2 2 2 2 4;}
@font-face
	{font-family:"Helvetica Neue";
	panose-1:2 0 5 3 0 0 0 2 0 4;}
@font-face
	{font-family:"Helvetica Neue Black Condensed";
	panose-1:2 0 10 6 0 0 0 2 0 4;}
@font-face
	{font-family:"Helvetica Neue Bold Condensed";
	panose-1:2 0 8 6 0 0 0 2 0 4;}
@font-face
	{font-family:"Helvetica Neue Light";
	panose-1:2 0 4 3 0 0 0 2 0 4;}
@font-face
	{font-family:"Helvetica Neue Medium";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Helvetica Neue UltraLight";
	panose-1:2 0 2 6 0 0 0 2 0 4;}
@font-face
	{font-family:Herculanum;
	panose-1:2 0 5 5 0 0 0 2 0 4;}
@font-face
	{font-family:"Hoefler Text";
	panose-1:2 3 6 2 5 5 6 2 2 3;}
@font-face
	{font-family:"Hoefler Text Ornaments";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"Imprint MT Shadow";
	panose-1:4 2 6 5 6 3 3 3 2 2;}
@font-face
	{font-family:InaiMathi;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Kannada MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Kannada Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Kefa;
	panose-1:2 0 5 6 0 0 0 2 0 4;}
@font-face
	{font-family:"Khmer MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Khmer Sangam MN";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Kino MT";
	panose-1:4 3 7 5 13 12 2 2 7 3;}
@font-face
	{font-family:Krungthep;
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:KufiStandardGK;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lao MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Lao Sangam MN";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Blackletter";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Bright";
	panose-1:2 4 6 2 5 5 5 2 3 4;}
@font-face
	{font-family:"Lucida Calligraphy";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;}
@font-face
	{font-family:"Lucida Fax";
	panose-1:2 6 6 2 5 5 5 2 2 4;}
@font-face
	{font-family:"Lucida Handwriting";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Lucida Sans";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;}
@font-face
	{font-family:"Lucida Sans Unicode";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Malayalam MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Malayalam Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Marker Felt";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Marlett;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Matura MT Script Capitals";
	panose-1:3 2 8 2 6 6 2 7 2 2;}
@font-face
	{font-family:"Menlo Bold";
	panose-1:2 11 7 9 3 6 4 2 2 4;}
@font-face
	{font-family:"Menlo Bold Italic";
	panose-1:2 11 7 9 3 3 4 11 2 4;}
@font-face
	{font-family:"Menlo Italic";
	panose-1:2 11 6 9 3 3 4 11 2 4;}
@font-face
	{font-family:"Menlo Regular";
	panose-1:2 11 6 9 3 8 4 2 2 4;}
@font-face
	{font-family:"Microsoft Himalaya";
	panose-1:1 1 1 0 1 1 1 1 1 1;}
@font-face
	{font-family:"Microsoft Sans Serif";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Microsoft Tai Le";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Microsoft Yi Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU_HKSCS-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU_HKSCS-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Mistral;
	panose-1:3 9 7 2 3 4 7 2 4 3;}
@font-face
	{font-family:"Modern No\. 20";
	panose-1:2 7 7 4 7 5 5 2 3 3;}
@font-face
	{font-family:"Mongolian Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Monotype Corsiva";
	panose-1:3 1 1 1 1 2 1 1 1 1;}
@font-face
	{font-family:"Monotype Sorts";
	panose-1:1 1 6 1 1 1 1 1 1 1;}
@font-face
	{font-family:"MS Reference Sans Serif";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"MS Reference Specialty";
	panose-1:5 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MT Extra";
	panose-1:5 5 1 2 1 2 5 2 2 2;}
@font-face
	{font-family:"Myanmar MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Myanmar Sangam MN";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"News Gothic MT";
	panose-1:2 11 5 4 2 2 3 2 2 4;}
@font-face
	{font-family:"Noteworthy Bold";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Noteworthy Light";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Onyx;
	panose-1:4 5 6 2 8 7 2 2 2 3;}
@font-face
	{font-family:Optima;
	panose-1:2 0 5 3 6 0 0 2 0 4;}
@font-face
	{font-family:"Optima ExtraBlack";
	panose-1:2 0 11 3 0 0 0 2 0 4;}
@font-face
	{font-family:"Oriya MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Oriya Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Palatino;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Palatino Bold";
	panose-1:2 0 8 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Palatino Bold Italic";
	panose-1:2 0 8 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Palatino Italic";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;}
@font-face
	{font-family:Papyrus;
	panose-1:2 11 6 2 4 2 0 2 3 3;}
@font-face
	{font-family:"Papyrus Condensed";
	panose-1:2 11 6 2 4 2 0 2 3 3;}
@font-face
	{font-family:Perpetua;
	panose-1:2 2 5 2 6 4 1 2 3 3;}
@font-face
	{font-family:"Perpetua Titling MT";
	panose-1:2 2 5 2 6 5 5 2 8 4;}
@font-face
	{font-family:"Plantagenet Cherokee";
	panose-1:2 2 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Playbill;
	panose-1:4 5 6 3 10 6 2 2 2 2;}
@font-face
	{font-family:PMingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@PMingLiU-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"PortagoITC TT";
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"PT Sans";
	panose-1:2 11 5 3 2 2 3 2 2 4;}
@font-face
	{font-family:"PT Sans Caption";
	panose-1:2 11 6 3 2 2 3 2 2 4;}
@font-face
	{font-family:"PT Sans Narrow";
	panose-1:2 11 5 6 2 2 3 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Rockwell Extra Bold";
	panose-1:2 6 9 3 4 5 5 2 4 3;}
@font-face
	{font-family:Sathu;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Silom;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:SimSun-ExtB;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun-ExtB";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Sinhala MN";
	panose-1:2 0 5 3 8 0 0 2 0 3;}
@font-face
	{font-family:"Sinhala Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Skia;
	panose-1:2 13 5 2 2 2 4 2 2 4;}
@font-face
	{font-family:STIXGeneral;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXIntegralsD;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXIntegralsSm;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXIntegralsUp;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXIntegralsUpD;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXIntegralsUpSm;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXNonUnicode;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXSizeFiveSym;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXSizeFourSym;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXSizeOneSym;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXSizeThreeSym;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXSizeTwoSym;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:STIXVariants;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Stencil;
	panose-1:4 4 9 5 13 8 2 2 4 4;}
@font-face
	{font-family:"Tahoma Bold";
	panose-1:2 11 8 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Tamil MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Tamil Sangam MN";
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Telugu MN";
	panose-1:2 2 6 0 5 4 5 2 3 4;}
@font-face
	{font-family:"Telugu Sangam MN";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Thonburi;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
@font-face
	{font-family:"Trebuchet MS Bold";
	panose-1:2 11 7 3 2 2 2 2 2 4;}
@font-face
	{font-family:"Trebuchet MS Bold Italic";
	panose-1:2 11 7 3 2 2 2 9 2 4;}
@font-face
	{font-family:"Trebuchet MS Italic";
	panose-1:2 11 6 3 2 2 2 9 2 4;}
@font-face
	{font-family:"Tw Cen MT";
	panose-1:2 11 6 2 2 1 4 2 6 3;}
@font-face
	{font-family:Webdings;
	panose-1:5 3 1 2 1 5 9 6 7 3;}
@font-face
	{font-family:"Wide Latin";
	panose-1:2 10 10 7 5 5 5 2 4 4;}
@font-face
	{font-family:"Wingdings 2";
	panose-1:5 2 1 2 1 5 7 7 7 7;}
@font-face
	{font-family:"Wingdings 3";
	panose-1:5 4 1 2 1 8 7 7 7 7;}
@font-face
	{font-family:"Zapf Dingbats";
	panose-1:5 2 1 2 1 7 4 2 6 9;}
@font-face
	{font-family:Zapfino;
	panose-1:3 3 3 0 4 7 7 7 12 3;}
@font-face
	{font-family:"Lucida Grande CE";
	panose-1:2 11 6 0 4 5 2 2 2 4;}
@font-face
	{font-family:"Charcoal CY";
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Geneva CY";
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Helvetica CY";
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Grande CY";
	panose-1:2 11 6 0 4 5 2 2 2 4;}
@font-face
	{font-family:"Apple LiGothic Medium";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Apple LiGothic Medium";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Apple LiSung Light";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Apple LiSung Light";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:BiauKai;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@BiauKai";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Heiti TC Light";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Heiti TC Light";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Heiti TC Medium";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Heiti TC Medium";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:細明體;}
@font-face
	{font-family:"\@細明體";}
@font-face
	{font-family:細明體_HKSCS;}
@font-face
	{font-family:"\@細明體_HKSCS";}
@font-face
	{font-family:"\@新細明體";}
@font-face
	{font-family:"儷宋 Pro";}
@font-face
	{font-family:"\@儷宋 Pro";}
@font-face
	{font-family:"儷黑 Pro";}
@font-face
	{font-family:"\@儷黑 Pro";}
@font-face
	{font-family:"GB18030 Bitmap";}
@font-face
	{font-family:"\@GB18030 Bitmap";}
@font-face
	{font-family:Hei;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Hei";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Heiti SC Light";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Heiti SC Light";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Heiti SC Medium";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Heiti SC Medium";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Hiragino Sans GB W3";
	panose-1:2 11 3 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Hiragino Sans GB W3";
	panose-1:2 11 3 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Hiragino Sans GB W6";
	panose-1:2 11 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Hiragino Sans GB W6";
	panose-1:2 11 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:Kai;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Kai";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:黑体;}
@font-face
	{font-family:"\@黑体";}
@font-face
	{font-family:华文仿宋;}
@font-face
	{font-family:"\@华文仿宋";}
@font-face
	{font-family:华文黑体;}
@font-face
	{font-family:"\@华文黑体";}
@font-face
	{font-family:华文楷体;}
@font-face
	{font-family:"\@华文楷体";}
@font-face
	{font-family:华文宋体;}
@font-face
	{font-family:"\@华文宋体";}
@font-face
	{font-family:华文细黑;}
@font-face
	{font-family:"\@华文细黑";}
@font-face
	{font-family:"\@宋体";}
@font-face
	{font-family:"ＭＳ Ｐゴシック";}
@font-face
	{font-family:"\@ＭＳ Ｐゴシック";}
@font-face
	{font-family:"ＭＳ Ｐ明朝";}
@font-face
	{font-family:"\@ＭＳ Ｐ明朝";}
@font-face
	{font-family:"\@ＭＳ ゴシック";}
@font-face
	{font-family:"\@ＭＳ 明朝";}
@font-face
	{font-family:Osaka;
	panose-1:2 11 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Osaka";
	panose-1:2 11 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:Osaka−等幅;}
@font-face
	{font-family:"\@Osaka−等幅";}
@font-face
	{font-family:"ヒラギノ角ゴ Pro W3";}
@font-face
	{font-family:"\@ヒラギノ角ゴ Pro W3";}
@font-face
	{font-family:"ヒラギノ角ゴ Pro W6";}
@font-face
	{font-family:"\@ヒラギノ角ゴ Pro W6";}
@font-face
	{font-family:"ヒラギノ角ゴ ProN W3";}
@font-face
	{font-family:"\@ヒラギノ角ゴ ProN W3";}
@font-face
	{font-family:"ヒラギノ角ゴ ProN W6";}
@font-face
	{font-family:"\@ヒラギノ角ゴ ProN W6";}
@font-face
	{font-family:"ヒラギノ角ゴ Std W8";}
@font-face
	{font-family:"\@ヒラギノ角ゴ Std W8";}
@font-face
	{font-family:"ヒラギノ角ゴ StdN W8";}
@font-face
	{font-family:"\@ヒラギノ角ゴ StdN W8";}
@font-face
	{font-family:"ヒラギノ丸ゴ Pro W4";}
@font-face
	{font-family:"\@ヒラギノ丸ゴ Pro W4";}
@font-face
	{font-family:"ヒラギノ丸ゴ ProN W4";}
@font-face
	{font-family:"\@ヒラギノ丸ゴ ProN W4";}
@font-face
	{font-family:"ヒラギノ明朝 Pro W3";}
@font-face
	{font-family:"\@ヒラギノ明朝 Pro W3";}
@font-face
	{font-family:"ヒラギノ明朝 Pro W6";}
@font-face
	{font-family:"\@ヒラギノ明朝 Pro W6";}
@font-face
	{font-family:"ヒラギノ明朝 ProN W3";}
@font-face
	{font-family:"\@ヒラギノ明朝 ProN W3";}
@font-face
	{font-family:"ヒラギノ明朝 ProN W6";}
@font-face
	{font-family:"\@ヒラギノ明朝 ProN W6";}
@font-face
	{font-family:メイリオ;}
@font-face
	{font-family:"\@メイリオ";}
@font-face
	{font-family:AppleGothic;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@AppleGothic";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:AppleMyungjo;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@AppleMyungjo";
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:PC명조;}
@font-face
	{font-family:"\@PC명조";}
@font-face
	{font-family:굴림;}
@font-face
	{font-family:"\@굴림";}
@font-face
	{font-family:궁서체;}
@font-face
	{font-family:"\@궁서체";}
@font-face
	{font-family:나눔고딕;}
@font-face
	{font-family:"\@나눔고딕";}
@font-face
	{font-family:"나눔고딕 Bold";}
@font-face
	{font-family:"\@나눔고딕 Bold";}
@font-face
	{font-family:"나눔고딕 ExtraBold";}
@font-face
	{font-family:"\@나눔고딕 ExtraBold";}
@font-face
	{font-family:나눔명조;}
@font-face
	{font-family:"\@나눔명조";}
@font-face
	{font-family:"나눔명조 Bold";}
@font-face
	{font-family:"\@나눔명조 Bold";}
@font-face
	{font-family:"나눔명조 ExtraBold";}
@font-face
	{font-family:"\@나눔명조 ExtraBold";}
@font-face
	{font-family:"나눔손글씨 붓";}
@font-face
	{font-family:"\@나눔손글씨 붓";}
@font-face
	{font-family:"나눔손글씨 펜";}
@font-face
	{font-family:"\@나눔손글씨 펜";}
@font-face
	{font-family:"\@바탕";}
@font-face
	{font-family:필기체;}
@font-face
	{font-family:"\@필기체";}
@font-face
	{font-family:헤드라인A;}
@font-face
	{font-family:"\@헤드라인A";}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:Arial;}
h1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	page-break-before:always;
	font-size:14.0pt;
	font-family:Arial;}
h2
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	font-size:12.0pt;
	font-family:Arial;}
h3
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
h4
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	font-size:10.5pt;
	font-family:Arial;
	font-style:italic;}
h5
	{margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.7in;
	margin-bottom:.0001pt;
	text-indent:-.7in;
	font-size:10.5pt;
	font-family:Arial;}
h6
	{margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.8in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-.8in;
	font-size:10.5pt;
	font-family:Arial;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.9in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-.9in;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-1.0in;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:1.1in;
	text-indent:-1.1in;
	font-size:11.0pt;
	font-family:Arial;}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	font-size:12.0pt;
	font-family:Arial;}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	font-size:12.0pt;
	font-family:Arial;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:.25in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	background:#F3F3F3;
	font-size:12.0pt;
	font-family:Arial;
	text-transform:uppercase;
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.6in;
	margin-bottom:.0001pt;
	text-indent:-.1in;
	font-size:9.5pt;
	font-family:Arial;
	color:black;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	border:none;
	padding:0in;
	font-size:9.0pt;
	font-family:Arial;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	border:none;
	padding:0in;
	font-size:9.0pt;
	font-family:Arial;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:.5in;
	text-align:center;
	font-size:10.0pt;
	font-family:Arial;
	font-weight:bold;}
span.MsoFootnoteReference
	{vertical-align:super;}
p.MsoListBullet, li.MsoListBullet, div.MsoListBullet
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:Arial;}
p.MsoListNumber2, li.MsoListNumber2, div.MsoListNumber2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:Arial;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin-top:200.0pt;
	margin-right:0in;
	margin-bottom:24.0pt;
	margin-left:0in;
	text-align:center;
	border:none;
	padding:0in;
	font-size:20.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	font-size:12.0pt;
	font-family:Arial;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:Tahoma;}
p.BodyText, li.BodyText, div.BodyText
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.CopyRightInfo, li.CopyRightInfo, div.CopyRightInfo
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:right;
	font-size:9.0pt;
	font-family:"Times New Roman";
	font-style:italic;}
p.Instruction, li.Instruction, div.Instruction
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:"CG Times (W1)","serif";
	font-style:italic;}
p.bullet3, li.bullet3, div.bullet3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:Arial;}
p.bullet2, li.bullet2, div.bullet2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.75in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:Arial;}
p.Author, li.Author, div.Author
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	border:none;
	padding:0in;
	font-size:11.0pt;
	font-family:Arial;
	font-style:italic;}
p.BulletList1, li.BulletList1, div.BulletList1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.75in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
span.KeyWord
	{font-family:"Arial Narrow";}
p.ProgramAfterList, li.ProgramAfterList, div.ProgramAfterList
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.7in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";}
p.ProgramAfterText, li.ProgramAfterText, div.ProgramAfterText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";}
p.NumList, li.NumList, div.NumList
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.75in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman";}
p.ProgramAfterListFirstLine, li.ProgramAfterListFirstLine, div.ProgramAfterListFirstLine
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.7in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";}
p.TableHeading, li.TableHeading, div.TableHeading
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-.9pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Black";}
p.TableText, li.TableText, div.TableText
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.BulletList2, li.BulletList2, div.BulletList2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.NumListText, li.NumListText, div.NumListText
	{margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.75in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:Arial;}
p.HeadingTOC, li.HeadingTOC, div.HeadingTOC
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	page-break-before:always;
	font-size:14.0pt;
	font-family:Arial;
	font-weight:bold;}
span.Variable
	{font-family:"Times New Roman";
	font-style:italic;}
p.TrademarkInfo, li.TrademarkInfo, div.TrademarkInfo
	{margin-top:32.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:Arial;}
p.TableBullet, li.TableBullet, div.TableBullet
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.15in;
	margin-bottom:.0001pt;
	text-indent:-.15in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.TagLine, li.TagLine, div.TagLine
	{margin-top:9.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	font-size:14.0pt;
	font-family:"Century Gothic";
	text-transform:uppercase;
	font-weight:bold;}
p.ProductName, li.ProductName, div.ProductName
	{margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Arial Narrow";
	color:white;}
p.IntroductionText, li.IntroductionText, div.IntroductionText
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:11.0pt;
	font-family:Arial;}
p.IntroBlurb, li.IntroBlurb, div.IntroBlurb
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:2.5in;
	text-align:right;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-style:italic;}
p.TextAfterList, li.TextAfterList, div.TextAfterList
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.7in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.TableTextCenter, li.TableTextCenter, div.TableTextCenter
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:center;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.Logo, li.Logo, div.Logo
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	font-size:12.0pt;
	font-family:Arial;}
p.BackPageBlurb, li.BackPageBlurb, div.BackPageBlurb
	{margin-top:200.0pt;
	margin-right:0in;
	margin-bottom:165.0pt;
	margin-left:.5in;
	text-align:center;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.ProgramAfterTextFirstLine, li.ProgramAfterTextFirstLine, div.ProgramAfterTextFirstLine
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";}
span.GUIText
	{font-family:"Arial Narrow";}
p.OutputAfterText, li.OutputAfterText, div.OutputAfterText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";
	font-weight:bold;}
p.OutputAfterList, li.OutputAfterList, div.OutputAfterList
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.7in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Arial Narrow";
	font-weight:bold;}
p.TextAfterList2, li.TextAfterList2, div.TextAfterList2
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.9in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.GrayLight
	{color:silver;}
span.Callout
	{font-family:"Times New Roman";
	font-style:italic;}
p.NumList2, li.NumList2, div.NumList2
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.9in;
	text-indent:-.45in;
	font-size:11.0pt;
	font-family:"Times New Roman";}
p.NoteInTable, li.NoteInTable, div.NoteInTable
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:30.25pt;
	text-indent:-30.25pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.Standout
	{font-family:"Times New Roman";
	font-weight:bold;
	font-style:italic;}
span.Redline
	{color:red;
	text-decoration:line-through;}
span.Example
	{font-family:"Courier New";}
p.CodeExample, li.CodeExample, div.CodeExample
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	background:#F3F3F3;
	font-size:10.0pt;
	font-family:Monaco;
	color:#005032;
	font-weight:bold;}
p.BulletList3, li.BulletList3, div.BulletList3
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.NumberedList1, li.NumberedList1, div.NumberedList1
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.CodeExampleChar
	{font-family:Monaco;
	color:#005032;
	background:transparent;
	font-weight:bold;}
span.CodeLineNumber
	{color:#999999;}
span.BalloonTextChar
	{font-family:Tahoma;}
span.msoIns
	{text-decoration:underline;
	color:teal;}
span.msoDel
	{text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection3
	{page:WordSection3;}
@page WordSection4
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection4
	{page:WordSection4;}
@page WordSection5
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection5
	{page:WordSection5;}
 /* List Definitions */
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<div style='border-top:solid windowtext 1.0pt;border-left:none;border-bottom:
solid windowtext 1.0pt;border-right:none;padding:1.0pt 0in 1.0pt 0in'>

<p class=MsoTitle><span lang=EN-GB style='background:windowtext'>C++ and TDD:<br>
The least you need to know</span></p>

</div>

</div>

<b><span style='font-size:14.0pt;font-family:Arial;background:windowtext'><br
clear=all style='page-break-before:right'>
</span></b>

<div class=WordSection2>

<p class=MsoToc1><span lang=EN-GB>Introduction                                                                                                                           </span><span
lang=EN-GB>11</span></p>

<p class=MsoToc2>1.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Why
this book now?................................................................................................................ 11</p>

<p class=MsoToc2>1.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>How
is it different?................................................................................................................. 12</p>

<p class=MsoToc2>1.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>What
not to expect?............................................................................................................... 13</p>

<p class=MsoToc2>1.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Standing
on the Shoulders of Giants..................................................................................... 13</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>2</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Obligatory Hello World                                                                                           </span><span
lang=EN-GB>15</span></p>

<p class=MsoToc2>2.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Setting
up your environment.................................................................................................. 15</p>

<p class=MsoToc3><span>2.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Tools                                                                                                                         </span><span>15</span></p>

<p class=MsoToc3><span>2.1.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Installing the Java Developers Kit (JDK)                                                                           </span><span>16</span></p>

<p class=MsoToc3><span>2.1.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Installing Eclipse CDT                                                                                                      </span><span>16</span></p>

<p class=MsoToc3><span>2.1.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Starting Eclipse CDT                                                                                                        </span><span>16</span></p>

<p class=MsoToc3><span>2.1.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Installing the Wascana Plugin                                                                                          </span><span>18</span></p>

<p class=MsoToc3><span>2.1.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Downloading CppUTest                                                                                                    </span><span>18</span></p>

<p class=MsoToc3><span>2.1.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Building CppUTest                                                                                                           </span><span>18</span></p>

<p class=MsoToc2>2.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>Mechanics
of CppUTest......................................................................................................... 20</p>

<p class=MsoToc3><span>2.2.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Creating a Project                                                                                                            </span><span>20</span></p>

<p class=MsoToc3><span>2.2.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Include Path, Library Path and Included Libraries                                                           </span><span>20</span></p>

<p class=MsoToc3><span>2.2.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A Few Convenient Settings                                                                                              </span><span>21</span></p>

<p class=MsoToc3><span>2.2.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding a CppUTest main() function                                                                                 </span><span>22</span></p>

<p class=MsoToc3><span>2.2.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding a first test                                                                                                              </span><span>23</span></p>

<p class=MsoToc3><span>2.2.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Experiments in Failure                                                                                                     </span><span>25</span></p>

<p class=MsoToc2>2.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Recap.................................................................................................................................... 26</p>

<p class=MsoToc3><span>2.3.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Terminology                                                                                                                     </span><span>26</span></p>

<p class=MsoToc3><span>2.3.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Highlights                                                                                                                         </span><span>28</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>3</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>The Dice Game                                                                                                                    </span><span
lang=EN-GB>30</span></p>

<p class=MsoToc2>3.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>What’s
Ahead?....................................................................................................................... 30</p>

<p class=MsoToc2>3.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>The
Design............................................................................................................................ 30</p>

<p class=MsoToc3><span>3.2.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Notes on UML                                                                                                                   </span><span>30</span></p>

<p class=MsoToc3><span>3.2.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Rules of the Game                                                                                                    </span><span>31</span></p>

<p class=MsoToc3><span>3.2.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>One Development Strategy                                                                                              </span><span>31</span></p>

<p class=MsoToc2>3.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>The
First Test......................................................................................................................... 31</p>

<p class=MsoToc3><span>3.3.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Create the test file                                                                                                            </span><span>33</span></p>

<p class=MsoToc3><span>3.3.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Die Header                                                                                                                       </span><span>33</span></p>

<p class=MsoToc3><span>3.3.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Die Source                                                                                                                       </span><span>35</span></p>

<p class=MsoToc2>3.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Exercise................................................................................................................................. 35</p>

<p class=MsoToc3><span>3.4.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Results                                                                                                                              </span><span>35</span></p>

<p class=MsoToc3><span>3.4.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Exercises in Failure                                                                                                          </span><span>36</span></p>

<p class=MsoToc3><span>3.4.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Concept Review                                                                                                               </span><span>37</span></p>

<p class=MsoToc3><span>3.4.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Final Observation                                                                                                             </span><span>39</span></p>

<p class=MsoToc2>3.5<span style='font-size:12.0pt;font-family:Calibri'>    </span>Making
Improvements............................................................................................................ 39</p>

<p class=MsoToc3><span>3.5.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Test                                                                                                                    </span><span>39</span></p>

<p class=MsoToc3><span>3.5.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>When to Clean Up                                                                                                            </span><span>40</span></p>

<p class=MsoToc3><span>3.5.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Die Header File                                                                                                  </span><span>40</span></p>

<p class=MsoToc3><span>3.5.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Die Source File                                                                                                  </span><span>40</span></p>

<p class=MsoToc3><span>3.5.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Exercise: Update Die                                                                                                        </span><span>41</span></p>

<p class=MsoToc2>3.6<span style='font-size:12.0pt;font-family:Calibri'>    </span>DRY
Violation........................................................................................................................ 41</p>

<p class=MsoToc3><span>3.6.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Removing Duplication                                                                                                     </span><span>41</span></p>

<p class=MsoToc2>3.7<span style='font-size:12.0pt;font-family:Calibri'>    </span>A
Message on Test Granularity.............................................................................................. 44</p>

<p class=MsoToc3><span>3.7.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Recap                                                                                                                              </span><span>44</span></p>

<p class=MsoToc2>3.8<span style='font-size:12.0pt;font-family:Calibri'>    </span>Fixing
an anemic roll method................................................................................................ 45</p>

<p class=MsoToc3><span>3.8.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Validating Roll Distribution                                                                                              </span><span>45</span></p>

<p class=MsoToc3><span>3.8.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Header File                                                                                                        </span><span>51</span></p>

<p class=MsoToc3><span>3.8.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Source File                                                                                                        </span><span>52</span></p>

<p class=MsoToc3><span>3.8.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Recap                                                                                                                              </span><span>58</span></p>

<p class=MsoToc2>3.9<span style='font-size:12.0pt;font-family:Calibri'>    </span>C++
Idioms............................................................................................................................. 61</p>

<p class=MsoToc3><span>3.9.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Header File                                                                                                        </span><span>62</span></p>

<p class=MsoToc3><span>3.9.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Source                                                                                                               </span><span>63</span></p>

<p class=MsoToc3><span>3.9.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Recap                                                                                                                              </span><span>63</span></p>

<p class=MsoToc2>3.10<span style='font-size:12.0pt;font-family:Calibri'>   </span>What’s
coming up?............................................................................................................... 65</p>

<p class=MsoToc2>3.11<span style='font-size:12.0pt;font-family:Calibri'>   </span>Review
Game Rules............................................................................................................. 65</p>

<p class=MsoToc3><span>3.11.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Test Control                                                                                                                    </span><span>65</span></p>

<p class=MsoToc3><span>3.11.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Dependency Injection                                                                                                    </span><span>67</span></p>

<p class=MsoToc3><span>3.11.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Polymorphism Moving Parts                                                                                           </span><span>68</span></p>

<p class=MsoToc2>3.12<span style='font-size:12.0pt;font-family:Calibri'>   </span>Testing
Into It: LoadedDieTest............................................................................................. 68</p>

<p class=MsoToc3><span>3.12.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Options: Interface/Concrete Inheritance                                                                        </span><span>69</span></p>

<p class=MsoToc3><span>3.12.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>LoadedDie Implementation                                                                                           </span><span>70</span></p>

<p class=MsoToc3><span>3.12.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Get your test passing                                                                                                      </span><span>70</span></p>

<p class=MsoToc3><span>3.12.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Experiment in Failure                                                                                                     </span><span>70</span></p>

<p class=MsoToc3><span>3.12.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Fixing It                                                                                                                          </span><span>71</span></p>

<p class=MsoToc3><span>3.12.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Overloading faceValue versus roll                                                                                  </span><span>71</span></p>

<p class=MsoToc3><span>3.12.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Fixing Die: Command Query Separation                                                                        </span><span>73</span></p>

<p class=MsoToc3><span>3.12.8</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Review                                                                                                                           </span><span>73</span></p>

<p class=MsoToc2>3.13<span style='font-size:12.0pt;font-family:Calibri'>   </span>What’s
on Deck?................................................................................................................... 73</p>

<p class=MsoToc2>3.14<span style='font-size:12.0pt;font-family:Calibri'>   </span>Test-Driven
Walkthrough....................................................................................................... 74</p>

<p class=MsoToc3><span>3.14.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>What’s required to make this work?                                                                                 </span><span>74</span></p>

<p class=MsoToc3><span>3.14.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>DiceGame Header                                                                                                         </span><span>75</span></p>

<p class=MsoToc3><span>3.14.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>DiceGame Source                                                                                                         </span><span>75</span></p>

<p class=MsoToc3><span>3.14.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Get it Compiling                                                                                                             </span><span>76</span></p>

<p class=MsoToc3><span>3.14.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Handle the memory leak, fix the test                                                                              </span><span>77</span></p>

<p class=MsoToc3><span>3.14.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Always losing is no fun                                                                                                   </span><span>79</span></p>

<p class=MsoToc3><span>3.14.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Experiments in Failure                                                                                                   </span><span>81</span></p>

<p class=MsoToc2>3.15<span style='font-size:12.0pt;font-family:Calibri'>   </span>Recap.................................................................................................................................. 86</p>

<p class=MsoToc2>3.16<span style='font-size:12.0pt;font-family:Calibri'>   </span>What’s
coming up?............................................................................................................... 90</p>

<p class=MsoToc3><span>3.16.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Remember Cup class?                                                                                                   </span><span>90</span></p>

<p class=MsoToc3><span>3.16.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Refactoring: Definition                                                                                                   </span><span>91</span></p>

<p class=MsoToc3><span>3.16.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Cup Header                                                                                                      </span><span>91</span></p>

<p class=MsoToc3><span>3.16.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated Cup Source                                                                                                      </span><span>92</span></p>

<p class=MsoToc3><span>3.16.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Getting to Compiling                                                                                                      </span><span>93</span></p>

<p class=MsoToc3><span>3.16.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updating DiceGame                                                                                                      </span><span>93</span></p>

<p class=MsoToc3><span>3.16.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>What of the idiom?                                                                                                         </span><span>97</span></p>

<p class=MsoToc3><span>3.16.8</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A Logical Fix to Cup                                                                                                      </span><span>98</span></p>

<p class=MsoToc2>3.17<span style='font-size:12.0pt;font-family:Calibri'>   </span>What
is going on with const?................................................................................................ 99</p>

<p class=MsoToc2>3.18<span style='font-size:12.0pt;font-family:Calibri'>   </span>Taking
Small Steps, Recap................................................................................................ 102</p>

<p class=MsoToc2>3.19<span style='font-size:12.0pt;font-family:Calibri'>   </span>Memory
Allocation............................................................................................................. 103</p>

<p class=MsoToc3><span>3.19.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>std::shared_ptr                                                                                                              </span><span>104</span></p>

<p class=MsoToc3><span>3.19.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Fixing DiceGame                                                                                                         </span><span>105</span></p>

<p class=MsoToc3><span>3.19.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Fixing Cup                                                                                                                    </span><span>107</span></p>

<p class=MsoToc2>3.20<span style='font-size:12.0pt;font-family:Calibri'>   </span>Warning:
Circular References............................................................................................. 108</p>

<p class=MsoToc3><span>3.20.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Problem: A concrete example                                                                              </span><span>108</span></p>

<p class=MsoToc3><span>3.20.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Options                                                                                                                         </span><span>112</span></p>

<p class=MsoToc2>3.21<span style='font-size:12.0pt;font-family:Calibri'>   </span>Recap................................................................................................................................ 114</p>

<p class=MsoToc2>3.22<span style='font-size:12.0pt;font-family:Calibri'>   </span>What’s
Coming Up?............................................................................................................ 114</p>

<p class=MsoToc2>3.23<span style='font-size:12.0pt;font-family:Calibri'>   </span>A
Few Built-In Algorithms................................................................................................... 114</p>

<p class=MsoToc3><span>3.23.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated roll()                                                                                                               </span><span>114</span></p>

<p class=MsoToc3><span>3.23.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updated total()                                                                                                             </span><span>117</span></p>

<p class=MsoToc3><span>3.23.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Recap                                                                                                                          </span><span>119</span></p>

<p class=MsoToc2>3.24<span style='font-size:12.0pt;font-family:Calibri'>   </span>Improved
Test Writing?...................................................................................................... 120</p>

<p class=MsoToc3><span>3.24.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Pass a factory into DiceGame                                                                                      </span><span>121</span></p>

<p class=MsoToc3><span>3.24.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Oh Wait, testability                                                                                                       </span><span>121</span></p>

<p class=MsoToc2>3.25<span style='font-size:12.0pt;font-family:Calibri'>   </span>The
4-contact points of software development................................................................... 122</p>

<p class=MsoToc3><span>3.25.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Why?                                                                                                                            </span><span>123</span></p>

<p class=MsoToc2>3.26<span style='font-size:12.0pt;font-family:Calibri'>   </span>Create
a concrete Factory.................................................................................................. 124</p>

<p class=MsoToc3><span>3.26.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>First Test against the Factory                                                                                        </span><span>124</span></p>

<p class=MsoToc3><span>3.26.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Define the class: LoadedDieFactory                                                                             </span><span>124</span></p>

<p class=MsoToc3><span>3.26.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Define the methods: LoadedDieFactory                                                                       </span><span>125</span></p>

<p class=MsoToc2>3.27<span style='font-size:12.0pt;font-family:Calibri'>   </span>Update
the cup.................................................................................................................. 125</p>

<p class=MsoToc3><span>3.27.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Test                                                                                                                       </span><span>125</span></p>

<p class=MsoToc3><span>3.27.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A new constructor                                                                                                         </span><span>126</span></p>

<p class=MsoToc2>3.28<span style='font-size:12.0pt;font-family:Calibri'>   </span>Dice
Game Instantiation.................................................................................................... 126</p>

<p class=MsoToc3><span>3.28.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>First a test                                                                                                                     </span><span>126</span></p>

<p class=MsoToc3><span>3.28.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Notice a pattern? New Constructor                                                                               </span><span>126</span></p>

<p class=MsoToc3><span>3.28.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Update the second test                                                                                                 </span><span>127</span></p>

<p class=MsoToc3><span>3.28.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Oops, not there yet                                                                                                       </span><span>127</span></p>

<p class=MsoToc2>3.29<span style='font-size:12.0pt;font-family:Calibri'>   </span>Extending
Loaded Die Factory........................................................................................... 128</p>

<p class=MsoToc3><span>3.29.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Here’s a test                                                                                                                  </span><span>128</span></p>

<p class=MsoToc3><span>3.29.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Updated Class                                                                                                       </span><span>128</span></p>

<p class=MsoToc3><span>3.29.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Return to green                                                                                                            </span><span>129</span></p>

<p class=MsoToc3><span>3.29.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Back to that final test                                                                                                    </span><span>129</span></p>

<p class=MsoToc3><span>3.29.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Why modify this final test at all?                                                                                   </span><span>130</span></p>

<p class=MsoToc2>3.30<span style='font-size:12.0pt;font-family:Calibri'>   </span>Final
Cleanup.................................................................................................................... 130</p>

<p class=MsoToc3><span>3.30.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>DiceGame                                                                                                                    </span><span>130</span></p>

<p class=MsoToc3><span>3.30.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Cup                                                                                                                              </span><span>130</span></p>

<p class=MsoToc3><span>3.30.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Common typedef                                                                                                          </span><span>130</span></p>

<p class=MsoToc2>3.31<span style='font-size:12.0pt;font-family:Calibri'>   </span>Is
this better?...................................................................................................................... 131</p>

<p class=MsoToc3><span>3.31.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Can we even play a real game                                                                                     </span><span>131</span></p>

<p class=MsoToc3><span>3.31.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Problem with Test Doubles                                                                                           </span><span>131</span></p>

<p class=MsoToc2>3.32<span style='font-size:12.0pt;font-family:Calibri'>   </span>Refactor:
Extract Interface................................................................................................. 131</p>

<p class=MsoToc3><span>3.32.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Class Definition                                                                                                     </span><span>131</span></p>

<p class=MsoToc3><span>3.32.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Implementing the pure virtual destructor                                                                      </span><span>132</span></p>

<p class=MsoToc3><span>3.32.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Update LoadedDieFactory                                                                                           </span><span>132</span></p>

<p class=MsoToc2>3.33<span style='font-size:12.0pt;font-family:Calibri'>   </span>Now
DieFactory.................................................................................................................. 132</p>

<p class=MsoToc3><span>3.33.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>First the test                                                                                                                  </span><span>133</span></p>

<p class=MsoToc3><span>3.33.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Implementation                                                                                                    </span><span>133</span></p>

<p class=MsoToc3><span>3.33.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Get to Green                                                                                                                </span><span>134</span></p>

<p class=MsoToc2>3.34<span style='font-size:12.0pt;font-family:Calibri'>   </span>A
Smoke Test..................................................................................................................... 134</p>

<p class=MsoToc3><span>3.34.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Make the required updates                                                                                           </span><span>134</span></p>

<p class=MsoToc3><span>3.34.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Back to green                                                                                                               </span><span>135</span></p>

<p class=MsoToc3><span>3.34.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Where does this test belong?                                                                                        </span><span>135</span></p>

<p class=MsoToc2>3.35<span style='font-size:12.0pt;font-family:Calibri'>   </span>Wrap-up.............................................................................................................................. 135</p>

<p class=MsoToc2>3.36<span style='font-size:12.0pt;font-family:Calibri'>   </span>Final
Recommendations.................................................................................................... 136</p>

<p class=MsoToc3><span>3.36.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Books                                                                                                                            </span><span>136</span></p>

<p class=MsoToc3><span>3.36.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Katas                                                                                                                            </span><span>136</span></p>

<p class=MsoToc3><span>3.36.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Practice                                                                                                                       </span><span>137</span></p>

<p class=MsoToc2>3.37<span style='font-size:12.0pt;font-family:Calibri'>   </span>What’s
coming up?............................................................................................................. 137</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>4</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>RPN Calculator                                                                                                            </span><span
lang=EN-GB>138</span></p>

<p class=MsoToc2>4.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Project
Description.............................................................................................................. 139</p>

<p class=MsoToc2>4.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>What’s
Coming Up?.............................................................................................................. 139</p>

<p class=MsoToc2>4.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Biting
off just enough........................................................................................................... 139</p>

<p class=MsoToc2>4.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Develop
Examples............................................................................................................... 140</p>

<p class=MsoToc2>4.5<span style='font-size:12.0pt;font-family:Calibri'>    </span>Project
Setup....................................................................................................................... 141</p>

<p class=MsoToc2>4.6<span style='font-size:12.0pt;font-family:Calibri'>    </span>The
first automated check................................................................................................... 141</p>

<p class=MsoToc3><span>4.6.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Was all of this necessary?                                                                                               </span><span>144</span></p>

<p class=MsoToc3><span>4.6.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Checking Add                                                                                                                 </span><span>144</span></p>

<p class=MsoToc2>4.7<span style='font-size:12.0pt;font-family:Calibri'>    </span>Checking
Subtract............................................................................................................... 146</p>

<p class=MsoToc2>4.8<span style='font-size:12.0pt;font-family:Calibri'>    </span>What
about Actual Values?................................................................................................. 148</p>

<p class=MsoToc2>4.9<span style='font-size:12.0pt;font-family:Calibri'>    </span>Drop..................................................................................................................................... 149</p>

<p class=MsoToc3><span>4.9.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>First introduce the stack                                                                                                  </span><span>150</span></p>

<p class=MsoToc2>4.10<span style='font-size:12.0pt;font-family:Calibri'>   </span>Getting
Factorial Working................................................................................................... 151</p>

<p class=MsoToc2>4.11<span style='font-size:12.0pt;font-family:Calibri'>   </span>Revisit
Add......................................................................................................................... 153</p>

<p class=MsoToc3><span>4.11.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Feature Envy                                                                                                                </span><span>153</span></p>

<p class=MsoToc2>4.12<span style='font-size:12.0pt;font-family:Calibri'>   </span>Resolving
Feature Envy: Writing Our Own Stack................................................................ 154</p>

<p class=MsoToc3><span>4.12.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>First automated check: top works on an empty stack                                                     </span><span>155</span></p>

<p class=MsoToc3><span>4.12.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Update RpnCalculator                                                                                                  </span><span>157</span></p>

<p class=MsoToc2>4.13<span style='font-size:12.0pt;font-family:Calibri'>   </span>Finish
subtract.................................................................................................................... 158</p>

<p class=MsoToc2>4.14<span style='font-size:12.0pt;font-family:Calibri'>   </span>Dreaded
Duplication or DRY.............................................................................................. 159</p>

<p class=MsoToc3><span>4.14.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Extract Classes                                                                                                             </span><span>161</span></p>

<p class=MsoToc3><span>4.14.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Keeping it the same                                                                                                     </span><span>162</span></p>

<p class=MsoToc3><span>4.14.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updating Subtract                                                                                                        </span><span>163</span></p>

<p class=MsoToc3><span>4.14.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Drop                                                                                                                             </span><span>164</span></p>

<p class=MsoToc3><span>4.14.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Factorial                                                                                                                       </span><span>164</span></p>

<p class=MsoToc2>4.15<span style='font-size:12.0pt;font-family:Calibri'>   </span>Removing
Duplication....................................................................................................... 165</p>

<p class=MsoToc3><span>4.15.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>It consumes two values                                                                                                 </span><span>166</span></p>

<p class=MsoToc3><span>4.15.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>It calls an extension point with the correct
parameters                                                 </span><span>170</span></p>

<p class=MsoToc3><span>4.15.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>It stores the result                                                                                                          </span><span>171</span></p>

<p class=MsoToc3><span>4.15.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Updating Add and Subtract                                                                                          </span><span>171</span></p>

<p class=MsoToc3><span>4.15.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Not updating drop or factorial                                                                                      </span><span>172</span></p>

<p class=MsoToc2>4.16<span style='font-size:12.0pt;font-family:Calibri'>   </span>All
those methods............................................................................................................... 172</p>

<p class=MsoToc3><span>4.16.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>An example based migration                                                                                       </span><span>173</span></p>

<p class=MsoToc3><span>4.16.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Migrating the subtract() method                                                                                   </span><span>174</span></p>

<p class=MsoToc3><span>4.16.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Finish the transformation                                                                                              </span><span>174</span></p>

<p class=MsoToc2>4.17<span style='font-size:12.0pt;font-family:Calibri'>   </span>Type
un-safe...................................................................................................................... 175</p>

<p class=MsoToc2>4.18<span style='font-size:12.0pt;font-family:Calibri'>   </span>Long
Method...................................................................................................................... 176</p>

<p class=MsoToc2>4.19<span style='font-size:12.0pt;font-family:Calibri'>   </span>A
Concrete Factory............................................................................................................ 178</p>

<p class=MsoToc3><span>4.19.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Actually using the factory                                                                                             </span><span>180</span></p>

<p class=MsoToc2>4.20<span style='font-size:12.0pt;font-family:Calibri'>   </span>Retargeting
Automated Checks.......................................................................................... 181</p>

<p class=MsoToc3><span>4.20.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Add                                                                                                                              </span><span>182</span></p>

<p class=MsoToc3><span>4.20.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Drop                                                                                                                             </span><span>183</span></p>

<p class=MsoToc3><span>4.20.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Factorial                                                                                                                       </span><span>184</span></p>

<p class=MsoToc3><span>4.20.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>MathOperation                                                                                                             </span><span>185</span></p>

<p class=MsoToc3><span>4.20.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>MathOperationFactory                                                                                                 </span><span>185</span></p>

<p class=MsoToc3><span>4.20.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Subtract                                                                                                                       </span><span>186</span></p>

<p class=MsoToc2>4.21<span style='font-size:12.0pt;font-family:Calibri'>   </span>Adding
Multiplication........................................................................................................ 186</p>

<p class=MsoToc2>4.22<span style='font-size:12.0pt;font-family:Calibri'>   </span>Adding
Division.................................................................................................................. 188</p>

<p class=MsoToc2>4.23<span style='font-size:12.0pt;font-family:Calibri'>   </span>MathOperationFactory
refactoring: Storing Math Operations............................................. 190</p>

<p class=MsoToc2>4.24<span style='font-size:12.0pt;font-family:Calibri'>   </span>MathOperationFactory
refactoring: Automatic Math Operation Registration...................... 192</p>

<p class=MsoToc3><span>4.24.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>An object for registration                                                                                              </span><span>192</span></p>

<p class=MsoToc3><span>4.24.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Automatically Register Multiplication                                                                          </span><span>198</span></p>

<p class=MsoToc3><span>4.24.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Split registrant                                                                                                              </span><span>199</span></p>

<p class=MsoToc2>4.25<span style='font-size:12.0pt;font-family:Calibri'>   </span>Add
Missing Examples....................................................................................................... 200</p>

<p class=MsoToc2>4.26<span style='font-size:12.0pt;font-family:Calibri'>   </span>Sprint
Summary................................................................................................................. 201</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>5</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Rpn Calculator – Sprint 2 – Growing Features                                          </span><span
lang=EN-GB>203</span></p>

<p class=MsoToc2>5.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Adding
Sum......................................................................................................................... 203</p>

<p class=MsoToc2>5.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>Less
Than............................................................................................................................ 205</p>

<p class=MsoToc2>5.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Equal
To and Greater than.................................................................................................. 206</p>

<p class=MsoToc2>5.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Swap
XY.............................................................................................................................. 207</p>

<p class=MsoToc2>5.5<span style='font-size:12.0pt;font-family:Calibri'>    </span>Dup...................................................................................................................................... 208</p>

<p class=MsoToc2>5.6<span style='font-size:12.0pt;font-family:Calibri'>    </span>N
Dup................................................................................................................................... 208</p>

<p class=MsoToc2>5.7<span style='font-size:12.0pt;font-family:Calibri'>    </span>Prime
Factors....................................................................................................................... 210</p>

<p class=MsoToc3><span>5.7.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Of 2 …                                                                                                                            </span><span>211</span></p>

<p class=MsoToc3><span>5.7.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Of 3…                                                                                                                             </span><span>212</span></p>

<p class=MsoToc3><span>5.7.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Of 4 … multiple values                                                                                                   </span><span>212</span></p>

<p class=MsoToc3><span>5.7.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Of 5 …                                                                                                                            </span><span>213</span></p>

<p class=MsoToc3><span>5.7.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Of 6 … two values, but they are different                                                                        </span><span>213</span></p>

<p class=MsoToc3><span>5.7.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>As will 7 …                                                                                                                     </span><span>213</span></p>

<p class=MsoToc3><span>5.7.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>But 8 is different, 3 values, instead of just 2.                                                                  </span><span>213</span></p>

<p class=MsoToc3><span>5.7.8</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Is 9 different?                                                                                                                 </span><span>214</span></p>

<p class=MsoToc3><span>5.7.9</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Register It                                                                                                                       </span><span>215</span></p>

<p class=MsoToc2>5.8<span style='font-size:12.0pt;font-family:Calibri'>    </span>Examples
as Rejection Checks............................................................................................ 215</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>6</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Rpn Calculator – Sprint 3 – Macros                                                                 </span><span
lang=EN-GB>217</span></p>

<p class=MsoToc2>6.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Happy
Path.......................................................................................................................... 217</p>

<p class=MsoToc3><span>6.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A Macro                                                                                                                         </span><span>219</span></p>

<p class=MsoToc3><span>6.1.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding to factory                                                                                                            </span><span>220</span></p>

<p class=MsoToc3><span>6.1.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding it to RpnCalculator                                                                                             </span><span>221</span></p>

<p class=MsoToc2>6.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>Empty
macros not allowed................................................................................................... 222</p>

<p class=MsoToc3><span>6.2.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Must call start first()                                                                                                         </span><span>223</span></p>

<p class=MsoToc3><span>6.2.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Unknown operation cannot be added to a macro                                                           </span><span>224</span></p>

<p class=MsoToc3><span>6.2.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Cannot save under existing name                                                                                  </span><span>225</span></p>

<p class=MsoToc3><span>6.2.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding missing check on the factory                                                                              </span><span>226</span></p>

<p class=MsoToc3><span>6.2.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Macros can refer to other macros                                                                                   </span><span>226</span></p>

<p class=MsoToc2>6.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Cleaning
up the calculator.................................................................................................. 227</p>

<p class=MsoToc3><span>6.3.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Calculation Mode                                                                                                          </span><span>229</span></p>

<p class=MsoToc3><span>6.3.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Executes Operations Directly                                                                                         </span><span>231</span></p>

<p class=MsoToc3><span>6.3.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Throw exception when told to save                                                                                </span><span>232</span></p>

<p class=MsoToc3><span>6.3.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Change to Programming Mode When Told To Start                                                      </span><span>232</span></p>

<p class=MsoToc3><span>6.3.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Programming Mode                                                                                                       </span><span>235</span></p>

<p class=MsoToc3><span>6.3.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Record Steps for Execution                                                                                            </span><span>236</span></p>

<p class=MsoToc3><span>6.3.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding macro to factory                                                                                                 </span><span>237</span></p>

<p class=MsoToc3><span>6.3.8</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Saving causes state change                                                                                           </span><span>237</span></p>

<p class=MsoToc3><span>6.3.9</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Other checking                                                                                                               </span><span>238</span></p>

<p class=MsoToc3><span>6.3.10</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>What about the start method?                                                                                      </span><span>240</span></p>

<p class=MsoToc3><span>6.3.11</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Ready to finish what we’ve started…                                                                             </span><span>240</span></p>

<p class=MsoToc2>6.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Updating
RpnCalculator to use state.................................................................................... 240</p>

<p class=MsoToc3><span>6.4.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Final Cleanup                                                                                                                </span><span>241</span></p>

<p class=MsoToc3><span>6.4.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Summary                                                                                                                        </span><span>241</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>7</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Rpn Calculator – Sprint 4 – More Complex Blocks                                 </span><span
lang=EN-GB>242</span></p>

<p class=MsoToc2>7.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>Output
Operations................................................................................................................ 243</p>

<p class=MsoToc3><span>7.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The “.” operator                                                                                                              </span><span>244</span></p>

<p class=MsoToc3><span>7.1.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>It Should Be Registered…                                                                                              </span><span>246</span></p>

<p class=MsoToc2>7.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>Emit
and a problem with growing interfaces…..................................................................... 246</p>

<p class=MsoToc3><span>7.2.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Emit should be registered                                                                                               </span><span>248</span></p>

<p class=MsoToc2>7.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Finally,
cr............................................................................................................................. 248</p>

<p class=MsoToc2>7.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Migrating
to new Perform Interface...................................................................................... 250</p>

<p class=MsoToc3><span>7.4.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>BinaryMathOperation                                                                                                     </span><span>250</span></p>

<p class=MsoToc3><span>7.4.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Update the calculator                                                                                                    </span><span>252</span></p>

<p class=MsoToc3><span>7.4.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The magic of checks                                                                                                      </span><span>253</span></p>

<p class=MsoToc3><span>7.4.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The Newest Math Operations                                                                                         </span><span>253</span></p>

<p class=MsoToc3><span>7.4.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Dup                                                                                                                                </span><span>253</span></p>

<p class=MsoToc3><span>7.4.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>What Remains                                                                                                                </span><span>255</span></p>

<p class=MsoToc2>7.5<span style='font-size:12.0pt;font-family:Calibri'>    </span>Numeric
Constants as Operations......................................................................................... 255</p>

<p class=MsoToc2>7.6<span style='font-size:12.0pt;font-family:Calibri'>    </span>If
… then … else.................................................................................................................. 256</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>8</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Rpn Calculator – Sprint 5 – FitNesse &amp; CSlim                                               </span><span
lang=EN-GB>257</span></p>

<p class=MsoToc3><span>8.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A spec-driven example                                                                                                   </span><span>257</span></p>

<p class=MsoToc3><span>8.1.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>A sequence diagram showing flow                                                                                 </span><span>257</span></p>

<p class=MsoToc2>8.2<span style='font-size:12.0pt;font-family:Calibri'>    </span>Adding
a basic text ui.......................................................................................................... 257</p>

<p class=MsoToc2>8.3<span style='font-size:12.0pt;font-family:Calibri'>    </span>Adding
several more operators............................................................................................. 257</p>

<p class=MsoToc3><span>8.3.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>ifelse                                                                                                                              </span><span>257</span></p>

<p class=MsoToc3><span>8.3.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>ntimesdo                                                                                                                        </span><span>257</span></p>

<p class=MsoToc3><span>8.3.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>ConditionWhileDo                                                                                                          </span><span>257</span></p>

<p class=MsoToc2>8.4<span style='font-size:12.0pt;font-family:Calibri'>    </span>Programming
the Calculator with a string............................................................................ 257</p>

<p class=MsoToc3><span>8.4.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Example forth program                                                                                                   </span><span>257</span></p>

<p class=MsoToc3><span>8.4.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Breaking it into parts                                                                                                       </span><span>257</span></p>

<p class=MsoToc3><span>8.4.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Building a Basic Sequence                                                                                           </span><span>257</span></p>

<p class=MsoToc3><span>8.4.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Building a conditional sequence                                                                                   </span><span>257</span></p>

<p class=MsoToc3><span>8.4.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Building a complex sequence                                                                                       </span><span>257</span></p>

<p class=MsoToc3><span>8.4.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Adding the behavior into the calculator                                                                         </span><span>257</span></p>

<p class=MsoToc3><span>8.4.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Exercising the new behavior from the text ui                                                                  </span><span>257</span></p>

<p class=MsoToc3><span>8.4.8</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Saving your extensions                                                                                                   </span><span>257</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>9</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Where to go next?                                                                                                      </span><span
lang=EN-GB>258</span></p>

<p class=MsoToc2>9.1<span style='font-size:12.0pt;font-family:Calibri'>    </span>TDD
Is Not Enough.............................................................................................................. 258</p>

<p class=MsoToc3><span>9.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>GRASP                                                                                                                           </span><span>258</span></p>

<p class=MsoToc3><span>9.1.2</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>SOLID + D                                                                                                                      </span><span>258</span></p>

<p class=MsoToc3><span>9.1.3</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Code Smells                                                                                                                   </span><span>258</span></p>

<p class=MsoToc3><span>9.1.4</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>WELC                                                                                                                             </span><span>258</span></p>

<p class=MsoToc3><span>9.1.5</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Test Doubles                                                                                                                  </span><span>258</span></p>

<p class=MsoToc3><span>9.1.6</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Coding Katas                                                                                                                  </span><span>258</span></p>

<p class=MsoToc3><span>9.1.7</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>The 4 Actions (should be sooner)                                                                                   </span><span>258</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>10</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Appendix A: Revealing the Magician                                                                  </span><span
lang=EN-GB>259</span></p>

<p class=MsoToc2>10.1<span style='font-size:12.0pt;font-family:Calibri'>   </span>Arrays
versus pointers.......................................................................................................... 259</p>

<p class=MsoToc3><span>10.1.1</span><span style='font-size:12.0pt;font-family:
Calibri'>   </span><span>Koenig’s i[3] == 3[i] trick                                                                                               </span><span>259</span></p>

<p class=MsoToc2>10.2<span style='font-size:12.0pt;font-family:Calibri'>   </span>Methods
versus functions.................................................................................................... 259</p>

<p class=MsoToc2>10.3<span style='font-size:12.0pt;font-family:Calibri'>   </span>Operator
Overloading......................................................................................................... 259</p>

<p class=MsoToc2>10.4<span style='font-size:12.0pt;font-family:Calibri'>   </span>Overloading
&lt;&lt;.................................................................................................................. 259</p>

<p class=MsoToc2>10.5<span style='font-size:12.0pt;font-family:Calibri'>   </span>Overloading
++i versus i++................................................................................................. 259</p>

<p class=MsoToc2>10.6<span style='font-size:12.0pt;font-family:Calibri'>   </span>Virtual
Functions................................................................................................................ 259</p>

<p class=MsoToc2>10.7<span style='font-size:12.0pt;font-family:Calibri'>   </span>new
&amp; delete versus malloc &amp; free..................................................................................... 259</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>11</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Appendix B: More Complex Composition with Bind                                   </span><span
lang=EN-GB>260</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>12</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Appendix C: FitNesse, a quick introduction                                                  </span><span
lang=EN-GB>261</span></p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>13</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>To Be Deleted                                                                                                               </span><span
lang=EN-GB>262</span></p>

<p class=MsoToc2>13.1<span style='font-size:12.0pt;font-family:Calibri'>   </span>My
Story Until 2010............................................................................................................ 262</p>

<p class=MsoToc1><span lang=EN-GB style='font-weight:normal'>14</span><span
style='font-family:Calibri;text-transform:none;font-weight:normal'>    </span><span
lang=EN-GB>Index                                                                                                                                 </span><span
lang=EN-GB>266</span></p>

<h1 style='margin-left:0in;text-indent:0in'></h1>

</div>

<b><span style='font-size:14.0pt;font-family:Arial;background:windowtext'><br
clear=all style='page-break-before:right'>
</span></b>

<div class=WordSection3>

<h1 style='margin-left:0in;text-indent:0in'><a name="_Toc202609043">Introduction</a></h1>

<p class=BodyText>I started using C++ and Smalltalk in 1989; C++ as a research
assistant, and Smalltalk in an Object Oriented Languages Seminar, both at the
University of Iowa. In the spring semester of 1990, while taking an advanced
Operating Systems course, I made a decision to use C++ (C Front 1.1), not
allowing myself to fall back to “plan old C” until I understood C++. That was
the first and luckily only time I didn’t finish a project. It was the first
project of the course and it turns out I was trying to create objects with
virtual member functions in shared memory, which was a no-no. In any case, I
continued using C++ and Smalltalk for some years. My chances to use Smalltalk
diminished faster than C++.</p>

<p class=BodyText>C++’s library, while meager, grew. The boost library came
into existence and then became quite a substantial collection of classes. Many
of those classes are useful, some esoteric and several make the language behave
more like some people would like it to behave.</p>

<p class=BodyText>In 1997, I finally switched to Java on my 3<sup>rd</sup>
attempt. I had tried prior to Java 1 with some success. Then about the time
Java 1 was released I tried again. A few months after Java 1.02 was released, I
finally decided to jump the C++ ship. So I stopped using C++ professionally in
1997. For several years I managed to not use it. I’d occasionally take a look
but for the most part, I did not use it between 1997 and around 2007.</p>

<p class=BodyText>In 2007 I joined Object Mentor and several of the jobs
involved working with large legacy C++ code bases. So I managed to start
picking it up again. However, unlike my last time using C++, this time I had a
few more years of design experience, large system development and support,
experience with test driven development and myriad other experiences that made
my approach substantially different.</p>

<h2><a name="_Toc202609044"><span style='font-weight:normal'>1.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Why this book now?</a></h2>

<p class=BodyText>If that were the end of the story, then I would not have
written this book. Even though I noticed that the approach to development with
C++ was missing out on several modern ideas, I didn’t see a need. Then in mid-2010
my good friend David Nunn asked if I’d like to teach a C++ and Object Oriented
Design class at NASA. Of course I said yes.</p>

<p class=BodyText>I did some looking around to try and find some material that
included good Object Oriented Design principles, C++ idioms, modern design
practices such as the use of Test Doubles for test isolation, etc. I did not
find anything. I looked at the course that Object Mentor offered and it wasn’t
quite what I was looking for either. I considered a few other avenues but in
the end, I did not find anything that fitted the particular situation, so I
built my own C++ class (for the 4<sup>th</sup> time actually).</p>

<p class=BodyText>I designed a course with the intention of introducing C++,
the basics of Test Driven Development, basic design principles, deeper design
principles and design patterns. All of this to be introduced through exercises.
In my original course design I planned for 2 projects. I added a third “simple”
problem at the front, which became the first problem as it blossomed into
something at once simple and rich enough to cover much of the language my
students needed to know to start becoming effective C++ programmers.</p>

<p class=BodyText>While teaching this class, I finally came to the realization
that there really is not yet a book that covers learning just the part of C++
you need to know for Object Oriented Programming. I looked but I did not find
anything that quite fit the bill. There are excellent books to be sure. Nothing
like the focus I wanted. Additionally, the books available did not take the
approach I’ve taken in this book; embedded exercises and deep dives into the
language to provide additional context to what was happening in the problem.</p>

<p class=BodyText>I had a similar experience like this back in 1988 when, faced
with having my students shell out over $100 USD for books on micro-computers (a
term probably before most reader’s time), none of which the students would need
after the class, I decided to write a book for a computer literacy course I
taught at a local community college.</p>

<p class=BodyText>While the book was initially published in 1988, it grew. It
went from about 110 pages to over 300 and was used for roughly 9 years before
being ousted for something more appropriate. I hope that’s what happens with
this book as well. I’d like to think that people learning C++ will stop
learning all of the language and focus on learning how to effectively use the
language. To me, that means not using much of the language’s power. At least as
a first step towards learning C++, the subset I’ll cover is a good start. Learn
how to do things somewhat cleanly, and then learn the guts of the language if
you plan to write libraries or you just want to be a language nerd. C++ offers
many opportunities to do so, but you don’t need to start there.</p>

<h2><a name="_Toc202609045"><span style='font-weight:normal'>1.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>How is it different?</a></h2>

<p class=BodyText>As the title suggests, I do not intend to cover all of the
language. In fact, I’ll cover a comparatively small subset of the language and
the standard libraries. Even so, that is not the primary difference. This book
is meant to be an example of a journey through two problems.</p>

<p class=BodyText>The approach for each problem is similar; start with simple
goals, write a solution. Review that and fix it as necessary. As I work through
the solution, I’ll be articulating forces driving my decisions. I’ll be
bringing into the mix things from C++, Test Driven Development, Refactoring, C,
Test Isolation, Agile Software Development, etc.</p>

<p class=BodyText>Also, there will be two reasons why I cover something in the
language. First and primarily, it will come up as a response to something in
the current problem. Second, there will be background and context I might cover
to fill out details a little bit. There will be times when I pick one solution
over another to delve a bit more into the language or library. However, when I
make that kind of decision, you’ll know because I’ll tell you.</p>

<p class=BodyText>Another key difference with this book is that I intend for
you to write code as you work through this book. That, in and of itself, is not
unique. What is, however, is that I’m going to provide you tutorials so that
you’ll be able to write working code. Something that has always frustrated me
is seeing code snippets with just enough context to get you interested but
leaving “some assembly required” for the reader.</p>

<p class=BodyText>To address this, I have done three things:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>First, I have picked a tool set. It’s free and should
be available on Windows, OS X and most UNIX varieties.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Second, I have uniquely identified all of the tutorial
sections with GUID’s (globally unique identifiers – that’s a geeky way of
saying something obvious)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Finally, I have included the same detailed instructions
for other platforms online (&lt;&lt;site URL here&gt;&gt;)</span></p>

<p class=BodyText>To make this a bit easier, each tutorial section will cover
mechanics at the beginning and then get into coding. As a result, there will be
times where I have you do mechanics work ahead of time to reduce the number of
unique times where you have to do that.</p>

<p class=BodyText>So even if you do not know C++, you should be able to get
working examples. I hope that the text and code examples will enable you to
pick up quite a bit of C++ along the way. I’ll be rewarding the ability to copy
the provided code, however, with passing unit tests.</p>

<p class=BodyText>As a final difference, you’ll be running everything under the
umbrella of a unit test. We will cover 2 projects. This means you’ll create two
main programs. After that, all execution will be from tests written using a
unit testing framework. I’ll provide both working code and failing code so you
can see the errors. In some cases I’ll deliberately have bad designs; in some
cases I’ll ask you to perform some experiments in your code. The experiments
are a controlled way for you cause a failure, know why the failure happened,
and know how to fix it. So rather than avoiding all errors, I’ll try to give
you a chance to experience them in a safe manner.</p>

<h2><a name="_Toc202609046"><span style='font-weight:normal'>1.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>What not to expect?</a></h2>

<p class=BodyText>I’m assuming you have some basic background in C for reading
this book. That’s really my target audience. I think you can use this book if
you’re learning C++ from other languages, but I’m not going to make any wild
guesses as to whether that will or will not work. If you are using C++ or
learning C++, then you mostly likely have been using C in some capacity. I have
not recently come across anybody learning C++ as their first language, so that
is not what I am targeted. Having said that, I will be delving into C stuff
every so often to explain why C++ is the way it is. You will be able to pick up
this book and start programming in C++</p>

<p class=BodyText>Bottom line, you are not going to learn all of C++. In fact
I’d guess you’ll learn maybe 30% of the language (I’m guessing at the number
because a precise number without context isn’t of much value). However, of that
30% you do use, it’ll be what you need 90% of the time. The other 10% comes
with practice, experience and the many references I’ll suggest to you later in
the book.</p>

<p class=BodyText>This is the start of a journey. I hope it will set you on a
good course and heavily influence your use and future learning of C++.</p>

<h2><a name="_Toc202609047"><span style='font-weight:normal'>1.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Standing on the Shoulders of Giants</a></h2>

<p class=BodyText>The only thing I’m offering in this book is my particular
combination of choices; there is nothing new in this material. </p>

<p class=BodyText>First and foremost, I need to give appreciation to several
early influences in my software development career. My early interest in
computers was fed by my friend John Navitsky. I was given a summer job by
Marjorie Scriver working in a second-hand shop, which allowed me to earn enough
money to buy my first computer. One week before I turned 18, Dr. Gretchen L.
Moine hired me and some of my friends to work in a computer lab at Kirkwood
Community College. When two of her professors left, she gave us the opportunity
to teach computer literacy courses, and then like a mother hen, she defended us
as the main campus tried to get rid of us. If I have any ability as a teacher,
it is directly related to early, eager and consistent stewardship.</p>

<p class=BodyText>I had several good professors at The University of Iowa and
one in particular got me started learning about OO programming, Dr. Mahesh
Dodani. He offered an “Advanced Seminar in OO Programming” in the Fall semester
of 1989. I used Smalltalk, but more importantly, because I took that class I
was eligible to get a job as a research assistant developing a large C++
application. My friend Jeff Francis was instrumental in helping me with the C
part of C++, and some of the basics, like using CVS. Unlike course work, we had
to demo our work to Ford Motor Company and TACOM, so it was an amazing learning
experience. I would not have started using C++ if not for Mahesh.</p>

<p class=BodyText>When I started using C++, Google did not exist and there were
no books on C++. So when books came out, I bought them and devoured them. C++ is
the invention of Bjarne Stroustrup. The first book I read on C++ was the
original printing of The Annotated C++ Reference. The second book I read was by
James Coplien, Advanced C++ Programming Styles and Idioms. Many books and
articles followed. Anybody who’s read the work of Andrew Koenig will probably
recognize his influence on my mental model of the language. Much of how I think
about the language was certainly influenced by his book C Traps and Pitfalls and
his many excellent articles in the C++ Report, many of which are available in
Ruminations on C++.</p>

<p class=BodyText>James introduced me to book reviews. I purchased the first
edition of his book Advanced C++ Programming Styles and Idioms. I read it and
began an email conversation with him. As a result of giving him feedback, he
connected me with his publisher and I ended up reviewing books. One of those
books was Robert Martin’s first book Designing Object Oriented C++ Applications
using the Booch Method.</p>

<p class=BodyText>There are many more, too many to remember. So I’m only
bringing my perspective to material that already existed in other forms written
by other people.</p>

<p class=BodyText>&lt;fill in? shorten?&gt;</p>

<h1><a name="_Toc202609048"><span style='font-weight:normal'>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Obligatory Hello World</a></h1>

<p class=BodyText>Traditional language books often cover a so-called hello
world “application.” Just for completeness, here you go:</p>

<p class=CodeExample>#include &lt;iostream&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int main(int argc, char *argv[]) {</p>

<p class=CodeExample>   std::cout &lt;&lt; “Hello World” &lt;&lt; std::endl;</p>

<p class=CodeExample>   return 0;</p>

<p class=CodeExample>}</p>

<p class=BodyText>However, that’s the last example of code that doesn’t include
some form of self-validation. Throughout this book I’ll be using a unit testing
framework in lieu of a <span class=Example>main()</span> program. You won’t see
much explicit output either. You are welcome to add output yourself, but I’m
going to rely on programmatic execution and validation.</p>

<p class=BodyText>This section covers the “hello world” meme, unit test style.
That’s what the rest of this section covers.</p>

<h2><a name="_Toc202609049"><span style='font-weight:normal'>2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Setting up your environment</a></h2>

<h3><a name="_Toc202609050"><span>2.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Tools</a></h3>

<p class=BodyText>For this book, I will be using the following tool set:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Eclipse CDT<a href="#_ftn1" name="_ftnref1" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span lang=EN-GB
style='font-size:12.0pt;font-family:"Times New Roman";color:black'>[1]</span></span></span></a></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Wascana Eclipse Plugin</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>CppUTest</span></p>

<p class=BodyText>The first tool is our IDE<a href="#_ftn2" name="_ftnref2"
title=""><span class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[2]</span></span></span></a>
and it requires that you have a Java VM<a href="#_ftn3" name="_ftnref3" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[3]</span></span></span></a>
installed. The second is a plugin to Eclipse that gives you a complete C++ tool
set. The final item is a library that gives you support for writing automated
tests. It is called a unit test framework, but its ability to assist in writing
automated tests is, for my purposes, its most important feature.</p>

<p class=BodyText>I have chosen these tools for several reasons:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>They are all free and open source</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>They work cross platform</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>They give a consistent way to work across those
platforms – other than default shortcut keys</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the case of CppUTest, it does basic memory leak
detection out of the box. Since you are reading this book to learn C++,
something helping with memory leak detection is an important feature.</span></p>

<p class=BodyText>What follows are detailed steps for installation of these
tools.</p>

<h3><a name="_Toc202609051"><span>2.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Installing the Java Developers Kit (JDK)</a></h3>

<p class=BodyText>You’ll need the JDK (or its equivalent) to run Eclipse. The
easiest way to install the JDK is to run an installer from <a
href="http://www.java.com/">http://www.java.com/</a> for Windows, Linux and
Solaris platforms. In the case of OS X, you already have a JDK installed.</p>

<h3><a name="_Toc202609052"><span>2.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Installing Eclipse CDT</a></h3>

<p class=BodyText>Download the Eclipse CDT from <a
href="http://www.eclipse.org/cdt/">http://www.eclipse.org/cdt/</a>. This book
was written using 7.0 of the Eclipse CDT, which is based on Eclipse Helios.
Older versions may work; newer versions almost certainly will work.</p>

<p class=BodyText>You will be downloading a zip file. You can safely unzip it
anywhere. You will only need to know where you downloaded it for two reasons:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Primarily, you’ll be running it, so you’ll need to find
the top-level executable</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>One time only, you may be using programs installed
underneath the eclipse directory, added by an Eclipse plugin.</span></p>

<p class=BodyText>To keep everything self-contained, I’ll be storing everything
under a directory called<span class=Standout> learncpp</span>. This avoids
spaces in paths and it will make it easier to find everything you do. If you
choose to use a different directory, make sure to replace<span class=Standout>
learncpp</span> with the directory you used. Here are two example full path
names for an idea of just where I’m putting things:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Under windows:<span class=Standout> C:\learncpp</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Under OS X:<span class=Standout> ~/learncpp</span> </span><span
lang=EN-GB style='font-family:Wingdings'>à</span><span lang=EN-GB> which actual
becomes<span class=Standout> /Users/Schuchert/learncpp</span></span></p>

<p class=BodyText>If you extract the Eclipse CDT zip file to<span
class=Standout> learncpp</span>, it will create:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Under windows:<span class=Standout> C:\learncpp\eclipse</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Under OS X:<span class=Standout> ~/learncpp/eclipse</span></span></p>

<h3><a name="_Toc202609053"><span>2.1.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Starting Eclipse CDT</a></h3>

<p class=BodyText>Now that you’ve installed Eclipse, you can start it.
Double-click on the eclipse application under the eclipse directory. When you
do, you will be asked to provide a location for a workspace:</p>

<p class=BodyText>&nbsp;</p>

<p class=BodyText><span><img border=0 width=435 height=206 id="Picture 1"
src="CppAndOOdTheLeastYouNeedToKnow_files/image001.gif"
alt="Description: EclipseWorkspaceLauncher"></span></p>

<p class=BodyText>Enter the location for a project in the Workspace text box.
For this first project, I’m using<span class=Standout> c:\learncpp\Project1</span>.</p>

<p class=BodyText>After a few moments, Eclipse will respond with the welcome
screen:</p>

<p class=BodyText><span><img border=0 width=435 height=326 id="Picture 2"
src="CppAndOOdTheLeastYouNeedToKnow_files/image002.gif"
alt="Description: EclipseWelcomeScreen"></span></p>

<p class=BodyText>Close the welcome screen by clicking on “x” the right side of
the<span class=Standout> Welcome tab</span>.</p>

<p class=BodyText>Before going any further, you now need to install the<span
class=Standout> Wascana</span> plug-in if you do not already have the Gnu C++
compiler 4.4 or later installed (OS X Users, you have G++ installed, but it’s
probably earlier than 4.4, so you’ll need to use a port package to install it –
give yourself several hours for this).</p>

<h3><a name="_Toc202609054"><span>2.1.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Installing the Wascana Plugin</a></h3>

<p class=BodyText>This step is primarily for Windows Users. However, I have
online instructions for OS X users at &lt;cite site&gt;.</p>

<p class=BodyText>The<span class=Standout> Wascana</span> plugin gives you a
minimal Unix environment, gcc 4.4, gdb and other basic tools to make the
Eclipse CDT work. It is installed as an Eclipse plugin.</p>

<p class=BodyText>The basic instructions are here: <a
href="http://code.google.com/a/eclipselabs.org/p/wascana/">http://code.google.com/a/eclipselabs.org/p/wascana/</a>.
But quickly:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Pull down the<span class=Standout> Help</span> menu in
Eclipse and select<span class=Standout> Install New Software</span>.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the<span class=Standout> Work with</span> text box,
enter: <a href="http://svn.codespot.com/a/eclipselabs.org/wascana/repo">http://svn.codespot.com/a/eclipselabs.org/wascana/repo</a></span></p>

<p class=BulletList1><span class=Standout><span style='font-weight:normal;
font-style:normal'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span lang=EN-GB>Then click<span class=Standout> Add</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Enter a name like<span class=Standout> Wascana</span>
in the pop-up dialog</span></p>

<p class=BulletList1><span class=Standout><span style='font-weight:normal;
font-style:normal'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span lang=EN-GB>Select the<span class=Standout> Wascana
C/C++ Developer for Windows</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Click on<span class=Standout> Next</span> twice until
you get the<span class=Standout> Review Licenses</span> screen</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Assuming you accept the terms of the license, select
the<span class=Standout> Accept</span> radio button and click<span
class=Standout> Finish</span>.</span></p>

<p class=BodyText>Wait for the download to complete and the restart Eclipse.
When asked for the workspace, verify that C:\learncpp\Project1 is the workspace
and click<span class=Standout> OK</span>.</p>

<h3><a name="_Toc202609055"><span>2.1.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Downloading CppUTest</a></h3>

<p class=BodyText>CppUTest is a unit testing framework we’ll be using
throughout this book. You’ll need to download and build it one time.
Unfortunately, to do this, you will need to update your path, but that’s in the
next section.</p>

<p class=BodyText>For now, download CppUTest from: <a
href="http://sourceforge.net/projects/cpputest/">http://sourceforge.net/projects/cpputest/</a>.
As of this writing, I’m using CppUTest 2.2d. </p>

<p class=BodyText>Once you’ve downloaded that zip file, unzip its contents to<span
class=Standout> c:\learncpp\CppUTest</span>. Note that the zip file does not
appear to have a top-level directory, so you’ll need to create it.</p>

<h3><a name="_Toc202609056"><span>2.1.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Building CppUTest</a></h3>

<p class=BodyText>When you installed the Wascana plug-in, it added two
directories under your eclipse directory: mingw and msys. Both of these
directories have bin directories that need to be added to your path.</p>

<p class=BodyText>Begin by updating your path to include the<span
class=Standout> bin</span> directories under mingw and msys. If you used the
recommend directories, their full paths are:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>C:\learncpp\eclipse\mingw\bin</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>C:\learncpp\eclipse\msys\bin</span></p>

<p class=BodyText>Since these paths are also used by Eclipse, you’ll need to
set your environment’s path. To do this, you’ll need to update the PATH
environment used by your command shell. </p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Under the control panel, select system preferences (or
under the category System and Security, select System).</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Select Advanced Features.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add the two directories to the PATH environment
variable under system preferences by appending:  <span class=Standout>;C:\learncpp\eclipse\mingw\bin;C:\learncpp\eclipse\msys\bin</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Note that there is one ; (semi-colon) between directory
entries.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>If you cannot edit the system preferences, instead add
a new entry under User variables. It’s value should be: <span class=Standout>%PATH%;
C:\learncpp\eclipse\mingw\bin;C:\learncpp\eclipse\msys\bin</span></span></p>

<p class=BodyText>Now switch to the CppUTest directory. If you used the
recommend directories, the full path is:<span class=Standout>
C:\learncpp\CppUTest</span>.</p>

<p class=BodyText>By adding the bin directories from mingw and msys, you have
some basic UNIX tools such as gcc, g++, make, pwd, etc. Now it’s a simple case
of issuing the<span class=Standout> make</span> command:</p>

<p class=CodeExample>C:\learncpp\CppUTest&gt;make</p>

<p class=CodeExample>compiling AllTests.cpp</p>

<p class=CodeExample>compiling CommandLineArgumentsTest.cpp</p>

<p class=CodeExample>compiling CommandLineTestRunnerTest.cpp</p>

<p class=CodeExample>compiling FailureTest.cpp</p>

<p class=CodeExample>&lt;snip&gt;</p>

<p class=CodeExample>compiling TestRegistry.cpp</p>

<p class=CodeExample>compiling TestResult.cpp</p>

<p class=CodeExample>compiling Utest.cpp</p>

<p class=CodeExample>compiling UtestPlatform.cpp</p>

<p class=CodeExample>Building archive lib/libCppUTest.a</p>

<p class=CodeExample>c:\Program Files\eclipse\mingw\bin\ar.exe: creating
lib/libCppUTest.a</p>

<p class=CodeExample>a - src/CppUTest/CommandLineArguments.o</p>

<p class=CodeExample>a - src/CppUTest/CommandLineTestRunner.o</p>

<p class=CodeExample>&lt;snip&gt;</p>

<p class=CodeExample>a - src/Platforms/Gcc/UtestPlatform.o</p>

<p class=CodeExample>Linking CppUTest_tests</p>

<p class=CodeExample>Running CppUTest_tests</p>

<p class=CodeExample>.................!................................</p>

<p class=CodeExample>.........................!........................</p>

<p class=CodeExample>..................................................</p>

<p class=CodeExample>...!!................</p>

<p class=CodeExample>OK (171 tests, 167 ran, 599 checks, 4 ignored, 0 filtered
out, 16 ms)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>C:\learncpp\CppUTest&gt;</p>

<p class=BodyText>Note: Depending on when you try these steps, the build might
fail because it cannot find “cc”. To fix this, update the Makefile and include
the following line after the comment line with Inputs in it (#--- Inputs):</p>

<p class=CodeExample>CC = gcc </p>

<p class=BodyText>You can look at the<span class=Standout> lib</span> directory
to confirm that you have a file called libCppUTest.a. However, given running
unit tests, it really isn’t necessary.</p>

<h2><a name="_Toc202609057"><span style='font-weight:normal'>2.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Mechanics of CppUTest</a></h2>

<p class=BodyText>Now that you have all of the moving parts installed, you need
to configure an Eclipse project to use CppUTest and then get your first test
running.</p>

<h3><a name="_Toc202609058"><a name="_Ref299231685"><a name="_Ref299231681"><span>2.2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Creating
a Project</a></a></a></h3>

<p class=BodyText>Now it’s time to go back into Eclipse and create a project.
Begin by selecting<span class=Standout> File:New</span> then select<span
class=Standout> C/C++ Project</span>. You’ll see the following dialog:</p>

<p class=BodyText><span><img border=0 width=393 height=444 id="Picture 3"
src="CppAndOOdTheLeastYouNeedToKnow_files/image003.gif"
alt="Description: CreateCppProject"></span></p>

<p class=BodyText>Enter<span class=Standout> </span><span class=Example>DiceGame</span>
for the Project Name, and make sure you’ve selected<span class=Standout> MinGW
GCC</span> as the Toolchain. Once you’ve done these two things, click<span
class=Standout> Finish</span>.</p>

<h3><a name="_Toc202609059"><span>2.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Include Path</a>, Library Path and Included Libraries</h3>

<p class=BodyText>Now that you have a project listed under the<span
class=Standout> Project Explorer</span>, you can configure it. Select that
project, right-click and select<span class=Standout> Properties</span> at the
bottom of the popup menu.</p>

<h4>Include Path</h4>

<p class=BodyText>Open up<span class=Standout> C/C++ Build</span>, select<span
class=Standout> Settings</span>. You’ll see several sub-options. Look for<span
class=Standout> GCC C++ Compiler</span> and under it, select<span
class=Standout> Includes</span>. Click the add button, which looks like a page with
a green plus. In the dialog, enter:<span class=Standout>
C:\learncpp\CppUTest\include</span></p>

<p class=BodyText>Before moving on, click<span class=Standout> Apply</span> to
make sure these changes stick.</p>

<h4>Library Path &amp; Included Libraries</h4>

<p class=BodyText>Again, under<span class=Standout> C/C++Build</span>,<span
class=Standout> Settings</span> look now for<span class=Standout> MingGW C++
Linker</span> and select<span class=Standout> Libraries</span>. There are now
two sections, Libraries (-l) and Library search path (-L). In Libraries, add<span
class=Standout> CppUTest</span>. </p>

<p class=BodyText>Under the Library search path, add:<span class=Standout>
C:\learncpp\CppUTest\lib</span>.</p>

<p class=BodyText>Note that the full name of the library is libCppUTest.a.
However, when specifying a library with this tool set, you exclude the leading
“lib” and the file extension.</p>

<p class=BodyText>Before moving on, click<span class=Standout> Apply</span> to
make sure these changes stick.</p>

<h4>Modernizing C++</h4>

<p class=BodyText>There are several modern features supported by GCC but not
available until you tell the compiler to allow for them.</p>

<p class=BulletList1><span class=Standout><span style='font-weight:normal;
font-style:normal'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span lang=EN-GB>Find<span class=Standout> GCC C++
Compiler:Settings</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Select the<span class=Standout> Miscellaneous</span> option,
notice that its current value is probably:<br>
      </span><span class=Example><span lang=EN-GB>-c -fmessage-length=0</span></span></p>

<p class=BulletList1><span class=Example><span style='font-family:"Times New Roman"'>●<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span
lang=EN-GB>Add (append) the following additional setting: </span><span
class=Example><span lang=EN-GB>-std=c++0x</span></span></p>

<p class=BodyText>That is C++ zero x, not letter o x.</p>

<p class=BodyText>Before moving on, click<span class=Standout> Apply</span> to
make sure these changes stick.</p>

<h4>That’s All the Project Settings</h4>

<p class=BodyText>Finally click<span class=Standout> OK</span> to close the
dialog.</p>

<h3><a name="_Toc202609060"><span>2.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A Few Convenient Settings</a></h3>

<p class=BodyText>There are some top-level (not project-specific) settings that
will improve your overall experience. To begin making changes, pull down the<span
class=Standout> window</span> menu and select<span class=Standout> Preferences</span>.</p>

<h4>Auto Save and Refresh</h4>

<p class=BodyText>Under the preferences you’ll see a box that contains “enter
filter text”, type<span class=Standout> save</span> in that box to shorten the
list of options.</p>

<p class=BodyText>Select<span class=Standout> Workspace</span> under the<span
class=Standout> General</span> option and enable the following settings (the
first should already be set):</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Build automatically</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refresh automatically</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Save automatically before build</span></p>

<p class=BodyText>Before moving on, click<span class=Standout> Apply</span> to
make sure these changes stick.</p>

<p class=BodyText><span class=Standout>Build automatically</span> only affects
when you perform a “clean” on a project. This will remove all the built files.
Build automatically will then turn around and rebuild the system by default. It
will not rebuild after you save a single file.</p>

<p class=BodyText><span class=Standout>Refresh automatically</span> is
important because building causes an executable to be created. Sometimes
Eclipse doesn’t notice that this executable was created and when you try to run
your program, Eclipse will complain about no executable existing. Setting this
option fixes that problem.</p>

<p class=BodyText><span class=Standout>Save automatically before build</span>
will cause Eclipse to ask you to save before each build. If you do not, you can
change a file, not notice it is unsaved and then get compilation errors because
the file is not saved and not because of anything you typed.</p>

<h4>One Last Thing Run</h4>

<p class=BodyText>Eclipse attempts to run something relative to the file or
think currently selected when you use the shortcut key ctrl-F11. This can be
confusing behavior. </p>

<p class=BodyText><span class=Standout>Under Run/Debug</span>, find<span
class=Standout> Launching</span>. Under the<span class=Standout> Launching</span>
section near the bottom, select the radio-button with the text “Always launch
the previously launched application.”</p>

<p class=BodyText>Before moving on, click<span class=Standout> Apply</span> to
make sure these changes stick.</p>

<h4>That’s All the Workspace Settings</h4>

<p class=BodyText>Finally click<span class=Standout> OK</span> to close the
dialog.</p>

<h3><a name="_Toc202609061"><span>2.2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding a CppUTest main() function</a></h3>

<p class=BodyText>Now you are ready to create a main function. As with C,
main() is the entry point into any application in C++. Main can have one of two
forms:</p>

<p class=CodeExample>int main()</p>

<p class=BodyText>And the more traditional:</p>

<p class=CodeExample>int main(int argc, char *argv[])</p>

<p class=BodyText>With that in mind, create the following main program:</p>

<p class=CodeExample>#include &lt;CppUTest/CommandLineTestRunner.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int main(int argc, char *argv[]) {</p>

<p class=CodeExample>    return CommandLineTestRunner::<span style='color:#642880'>RunAllTests</span>(argc,
argv);</p>

<p class=CodeExample>}</p>

<h4>Quick File Description</h4>

<p class=BodyText>The first line includes a class that runs unit tests. The
top-level include directory for CppUTest has a directory under called CppUTest.
This is important because it makes a namespace of sorts for header files. By
starting the name with CppUTest, there is a much smaller chance of name
collision in include file names.</p>

<p class=BodyText>This is a standard main() function that uses a class called <span
class=Example>CommandLineTestRunner</span>. That class has a method on it
called <span class=Example>RunAllTests</span>. You pass in argc and argv and it
determines what to do based on command line arguments. We are not passing in
anything, so we’ll get the default behavior provided by the library.</p>

<p class=BodyText>The return statement on that line makes sure that the result
of running tests is reflected back in the shell that started the program. We
won’t be making use of this, but if you were to include running unit tests as
part of a larger build process, you could use test failure as a reason to stop
the build process. The return here facilitates that.</p>

<h4>Create this file</h4>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Select your project, right click and select<span
class=Standout> New</span>.</span></p>

<p class=BulletList1><span class=Standout><span style='font-weight:normal;
font-style:normal'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span lang=EN-GB>In the list, select<span class=Standout>
C++ Source file</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>For the name, enter: RunAllTests.cpp</span></p>

<h4>Build your project</h4>

<p class=BodyText>Compile your project by hitting ctrl-b. Alternatively,
right-click and select<span class=Standout> Build</span>.</p>

<h4>Run your project</h4>

<p class=BodyText>The first time you run your project, you’ll want to select
it, right-click and select <span class=Standout>Run As:Local C/C++ Application</span>.
You should see output like this in the Console:</p>

<p class=CodeExample>OK (0 tests, 0 ran, 0 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<p class=BodyText>Congratulations, you have all of the major moving parts in
place and working.</p>

<h3><a name="_Toc202609062"><span>2.2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding a first test</a></h3>

<p class=BodyText>However, don’t celebrate too quickly, because now it is time
to add a test. Here is a simple “smoke” test to verify that things work.</p>

<p class=CodeExample>#include &lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(SmokeShould) {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(SmokeShould, NeverBeLost) {</p>

<p class=CodeExample>   LONGS_EQUAL(1,1);</p>

<p class=CodeExample>}</p>

<h4>Quick File Description</h4>

<p class=BodyText>This is mostly boilerplate code. The #include statement,
among other things, makes available a set of macros to help in the definition
of tests. There are three major parts:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=86 valign=top style='width:86.15pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Macro</span></p>
   </td>
   <td width=351 valign=top style='width:351.25pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=86 valign=top style='width:86.15pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>TEST_GROUP</span></p>
  </td>
  <td width=351 valign=top style='width:351.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a place holder for a number of
  tests. Typically know as a test fixture. The name,<span class=Standout>
  SmokeShould</span>, is somewhat arbitrary.</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>This name must be a valid
  C++ identifier; </p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It should make sense; </p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It must be unique across
  all tests in a single project (across all the library and object files linked
  to make a single executable).</p>
  <p class=TableText><span lang=EN-GB>This macro introduces a </span><span
  class=Example><span lang=EN-GB>struct</span></span><span lang=EN-GB> into
  your solution. The name of the </span><span class=Example><span lang=EN-GB>struct</span></span><span
  lang=EN-GB> embeds the parameter name,<span class=Standout> SmokeShould</span>
  in this case. A </span><span class=Example><span lang=EN-GB>struct</span></span><span
  lang=EN-GB> is a collection of data members in C. In C++ it can also include
  member functions. CppUTest does this as it forms a natural place to put
  common code and data used between individual automated tests.</span></p>
  </td>
 </tr>
 <tr>
  <td width=86 valign=top style='width:86.15pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>TEST</span></p>
  </td>
  <td width=351 valign=top style='width:351.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a single test. It depends on a
  test fixture,<span class=Standout> SmokeShould</span>. We will be taking
  advantage of this later on. However, it is a requirement of the particular
  tool, so you must do it. The name of this test is<span class=Standout>
  NeverBeLost</span>. This name must be unique within the fixture (<span
  class=Standout>SmokeShould</span>); it should make sense; it must be a valid
  C++ identifier.</span></p>
  <p class=TableText><span lang=EN-GB>This macro introduces a </span><span
  class=Example><span lang=EN-GB>class</span></span><span lang=EN-GB> into your
  solution. This </span><span class=Example><span lang=EN-GB>class</span></span><span
  lang=EN-GB> is a subclass of the </span><span class=Example><span lang=EN-GB>struct</span></span><span
  lang=EN-GB> created by the TEST_GROUP macro. CppUTest does this to enable
  automatic registration of unit tests possible. If an object module that
  contains a TEST is linked into your final executable, it will be available
  for execution by the CommandLineTestRunner.</span></p>
  </td>
 </tr>
 <tr>
  <td width=86 valign=top style='width:86.15pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>LONGS_EQUAL</span></p>
  </td>
  <td width=351 valign=top style='width:351.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This macro performs a check. A check
  either returns or does not. If the check returns (in this case the longs are
  equal so it returns), then continue with the test. If it does not return
  (say, the longs were not equal), then this test would terminate and be a
  failed test. In this unit test framework, and traditionally across most of
  them, the first value is the expected value; the second value is the actual
  value.</span></p>
  </td>
 </tr>
</table>

<h4>Create This File</h4>

<p class=BodyText>Create a new file called SmokeTest.cpp (ctrl-n, add source
file).</p>

<h4>Run Your Tests</h4>

<p class=BodyText>Since you’ve run your project once, you can now use the
shortcut key ctrl-F11 (mac: Command-Shift F11) to re-run your project.</p>

<p class=BodyText>` You did not save your file, Eclipse will confirm that you
want to save before building; do so. The project will run and you will see the
following output:</p>

<p class=CodeExample>.</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (1 tests, 1 ran, 1 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<p class=BodyText>The period represents the one test that executed. If that is
too terse for your tastes, update RunAllTests.cpp:</p>

<p class=CodeExample>#include &lt;CppUTest/CommandLineTestRunner.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int main() {</p>

<p class=CodeExample>   const char *args[] = { <span style='color:#2A00FF'>&quot;&quot;</span>,
<span style='color:#2A00FF'>&quot;-v&quot;</span> };</p>

<p class=CodeExample>   return CommandLineTestRunner::<span style='color:#642880'>RunAllTests</span>(2,
args);</p>

<p class=CodeExample>}</p>

<h4>Quick File Description</h4>

<p class=BodyText>Rather than passing in the command line options, hard-code
them. In UNIX systems, the first parameter passed into a C or C++ program is
the name of the executable. Some programs use this to do different things.
CppUTest does not, so it always ignores the first element in the array. That’s
what the first “” is in the args array. The second parameter, -v, tells
CppUTest to output test names and test execution time rather than “.” for each
test. It means “verbose.”</p>

<h4>Run Your Tests</h4>

<p class=BodyText>Rerun your program (ctrl-F11/Comman-F11) and notice the
additional output:</p>

<p class=CodeExample>TEST(SmokeShould, NeverBeLost) - 0 ms</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (1 tests, 1 ran, 1 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<h3><a name="_Toc202609063"><span>2.2.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Experiments in Failure</a></h3>

<p class=BodyText>It is important to see things both work and fail. Getting
something working will hopefully give you a sense of success. Seeing something
fail in a controlled fashion can better prepare you to fix problems on your own
when they happen.</p>

<h4>Failing Check</h4>

<p class=BodyText>Update the check in your SmokeShould:NeverBeLost test:</p>

<p class=CodeExample>   LONGS_EQUAL(9999,1);</p>

<h4>Run Your Failing Test</h4>

<p class=BodyText>Rerun your program and notice the failed test output
(snipped):</p>

<p class=CodeExample>..\SmokeTest.cpp:7: error: Failure in TEST(SmokeShould,
NeverBeLost)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   expected &lt;9999 0x270f&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   but was  &lt;   1 0x0001&gt;</p>

<p class=BodyText>So here are some questions you might ask (and their answers):</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Standout><span lang=EN-GB>Which test failed?</span></span><span
lang=EN-GB> The one on line 7 of the SmokeTest.cpp file. It’s called
SmokeShould, NeverBeLost.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Standout><span lang=EN-GB>How did it fail?</span></span><span
lang=EN-GB> A check on line 7 was expecting the value 9999 but it was given 1.
Since 1 does not equal 9999 (even for very large values of 1), the LONGS_EQUAL
macro caused this test to stop at the failure.</span></p>

<p class=BodyText>Fix the test back to passing before moving on. (Do you make
both values 9999, 1, or some other value?)</p>

<h2><a name="_Toc202609064"><span style='font-weight:normal'>2.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Recap</a></h2>

<h3><a name="_Toc202609065"><span>2.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Terminology</a></h3>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=320 valign=top style='width:4.45in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Auto Test Discovery</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>In CppUTest, tests are automatically
  discovered. Simply creating a new </span><span class=Example><span
  lang=EN-GB>TEST_GROUP</span></span><span lang=EN-GB> and adding a </span><span
  class=Example><span lang=EN-GB>TEST</span></span><span lang=EN-GB> to it will
  cause the test to be found assuming the object module containing the </span><span
  class=Example><span lang=EN-GB>TEST_GROUP</span></span><span lang=EN-GB> and </span><span
  class=Example><span lang=EN-GB>TEST</span></span><span lang=EN-GB> are linked
  in to the final application.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>CommandLine TestRunner</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class from CppUTest used to execute
  tests created with </span><span class=Example><span lang=EN-GB>TEST_GROUP</span></span><span
  lang=EN-GB> and </span><span class=Example><span lang=EN-GB>TEST</span></span><span
  lang=EN-GB>. It can handle a few command line arguments. In the second form
  of your </span><span class=Example><span lang=EN-GB>main()</span></span><span
  class=BodyTextChar><span lang=EN-GB> </span></span><span lang=EN-GB>function,
  you passed  in </span><span class=Example><span lang=EN-GB>–v</span></span><span
  lang=EN-GB>, for verbose output. </span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>CommandLine TestRunner.h</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is the header file you include to
  get the </span><span class=Example><span lang=EN-GB>CommandLineTestRunner</span></span><span
  lang=EN-GB>. However, the recommended include path for CppUTest makes you
  qualify the name with </span><span class=Example><span lang=EN-GB>CppUTest/</span></span><span
  lang=EN-GB> in front of it.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Compilation Unit</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>When the C++ compiler compiles a single
  source file, it first processes all of the include files and macros. The
  result of that phase is called a compilation unit. It becomes the source
  material for the production of an object module, which is what gets linked
  into a final executable. </span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Ctrl-B (OS X: Command – B)</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Build the application and produce an
  executable.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Ctrl-F11 (OS X: Command-Shift F11)</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Run the last thing you ran. This is over
  simplified and depends on the Eclipse configuration. In this case, you’ve
  changed the Eclipse configuration to always run the last thing run, so it
  will not be relative to the current project. Also, you only have one project
  in your workspace, so, again, it will only run the one executable.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include Directory</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The include directory path for CppUTest
  in our examples is </span><span class=Example><span lang=EN-GB>C:\learncpp\CppUTest\include</span></span><span
  lang=EN-GB>. This directory contains a directory under it called </span><span
  class=Example><span lang=EN-GB>CppUTest</span></span><span lang=EN-GB>. This
  is by design to make sure header file names in CppUTest do not conflict with
  other header file names.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>libCppUTest.a</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This was the library file produced when
  building CppUTest. We need to include it to get our project to link. When we added
  it to our project, we followed the UNIX convention of dropping “lib” at the
  beginning and “.a” at the end.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Library Directory</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The library directory in our case is
  C:\learncpp\CppUTest\lib. We added that so Eclipse could link our project.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>LONGS_EQUAL</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A macro in the CppUTest library. It calls
  an underlying method that compares the first (expected) value to the second (actual)
  value. If the longs are equal, then the method returns. If not, then it stops
  this unit test from continued execution and marks the test as failing. </span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Object Module</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A file created by the C++ compiler as
  part of building a system. It contains all of the code from, typically, a
  single source file, along with anything introduced by header files.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>RunAllTests</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a method on the class
  CommandLineTestRunner</span><span lang=EN-GB>. It happens to be a static (or
  class) method. This means it can be called without having any objects. The
  most important thing about this method is that it causes all of the unit
  tests to run.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>standard library</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The standard library ships with all C++
  compilers. However, just what ships is somewhat variable. We’ve seen
  std::cout, and object that comes as part of the standard library. The </span><span
  class=Example><span lang=EN-GB>std::vector</span></span><span lang=EN-GB>
  class is also part of the standard library. We’ll be seeing this class quite
  a bit more as we move into the </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
  lang=EN-GB> in earnest.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>std</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Classes can be part of a namespace. A
  namespace is simply a way to group related classes. The standard library classes
  are in a namespace called std (or std::tr1).</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>struct</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>In C++ a struct and a class are the same
  thing. The only difference is that the default access level in a struct is<span
  class=Standout> public</span>, whereas in classes it is<span class=Standout>
  private</span>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>template class</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The </span><span class=Example><span
  lang=EN-GB>std::vector</span></span><span lang=EN-GB> class is a template
  class. Template classes are parameterized classes with their parameters being
  provided in &lt;&gt;. In our particular example, the parameter is &lt;int&gt;.
  An </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
  lang=EN-GB>&lt;int&gt; stores a variable number of int values.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>TEST</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A macro from CppUTest that introduces a
  new test into the system. The TEST macro takes two parameters; the first is
  the name of the test fixture introduced by the TEST_GROUP macro. The second
  is the name of the test. Both names must be valid C++ names. TEST names must
  be unique within their test fixture.</span></p>
  <p class=TableText><span lang=EN-GB>The TEST macro actually creates a class,
  which is a child class of the structure created by the TEST_GROUP macro. The
  name of the class embeds the test name parameter. </span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><i><span lang=EN-GB>TEST_GROUP</span></i></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A macro from CppUTest that introduces a
  new test fixture into the system. The TEST_GROUP macro takes one parameter, a
  name, which must be unique across all object modules linked into an
  application. The name must be a valid C++ name.</span></p>
  <p class=TableText><span lang=EN-GB>THE TEST_GROUP macro creates a struct.
  The name of the struct embeds the test fixture name.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>TestHarness.h</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a header file from CppUTest. It’s
  the main header file used in test files. As with all CppUTest header files,
  it resides in a subdirectory called CppUTest, so qualify its name with
  CppUTest/ when including it.</span></p>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  <p class=TableText><span lang=EN-GB>Remember that order of includes is
  important. Include this file last in any source file to avoid problematic
  interactions with the standard library classes.</span></p>
  </td>
 </tr>
 <tr>
  <td width=117 valign=top style='width:117.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>vector</span></p>
  </td>
  <td width=320 valign=top style='width:4.45in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class from the C++ standard library. We
  used it to demonstrate a potential issue you might come across with order of
  includes. A vector is variable-sized array. The class is in the namespace
  std, so it’s full name is </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
  lang=EN-GB>. You’ll be using this class more.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609066"><span>2.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Highlights</a></h3>

<h4>Tool Installation</h4>

<p class=BodyText>In this section you installed a number of tools and libraries:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Java Developer Toolkit</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Eclipse CDT</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Wascana Eclipse Plug-in</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>CppUTest</span></p>

<p class=BodyText>These are the basic tools of your environment and with them
you will be able to work with C++ in a relatively controlled manner.</p>

<p class=BodyText>Luckily, this is a one-time process, so now that you’ve done
this, you have your development environment for the remainder of the book.</p>

<h4>Project Configuration</h4>

<p class=BodyText>Each time you start a project, you may need to configure it.
In our case, we:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Added a path to the include directories to find
CppUTest header files</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Added a path to the library directories to find
libCppUTest.a</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Added a library, CppUTest, to be linked into our
executable.</span></p>

<h4>Eclipse Configuration</h4>

<p class=BodyText>You also configured Eclipse to automatically save files
before building and to find files created during the build process
automatically. </p>

<p class=BodyText>In both the project and eclipse configuration steps, if you
can remember a key word or two, you might be able to use the filter box at the
top of the list of configuration options to shorten the list.</p>

<h4>Complete Build Execute Cycle</h4>

<p class=BodyText>You created some source files, a main() and two test source
files, all of which got linked into an executable. Initially no tests ran. Then
you added a test, which ran. You then made that test fail and added another
test that caused a compilation failure.</p>

<p class=BodyText>Did you notice how quick it was to simply perform little
experiments to see “what-if”? This is a key to learning. Rather than speculate
about what might be, try it out and see what happens. The one caveat is that it
may not be clear if the results are speaking towards your environment or
something about the language standard. This comes with a combination of
research and continuous questioning. The biggest recommendation I can make here
is to continuously question what you’ve learned to make sure your understanding
of the results is not too far reaching (this result is about my current
environment, and not a general principle), or it goes far enough (this is part
of the language specification and if another environment behaves differently,
it is incorrect).</p>

<p class=BodyText>Now it’s on to the seeming trivial Dice Game.</p>

<h1><a name="_Toc202609067"><span style='font-weight:normal'>3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Dice Game</a></h1>

<p class=BodyText>This is a simple project to get your feet wet, or so it
seems. By the end of this project, you’ll have used much of what you’ll need to
know about C++ to effectively use it.</p>

<h2><a name="_Toc202609068"><span style='font-weight:normal'>3.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>What’s Ahead?</a></h2>

<p class=BodyText>Here’s a quick idea of what’s coming up during this project:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Creating Classes</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Subclassing</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Interfaces</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Guts of C++</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Unit testing</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Test driven development</span></p>

<p class=BodyText>The work that we’ll be doing going forward will be driven by
writing automated tests. Initially I’ll provide the design up front; at some
times we’ll be “discovering” the design as we go along. Writing tests where
there’s already a design in place is often called Test-First Development,
whereas using tests to incrementally discover the design is typically called
Test-Driven Development.</p>

<h2><a name="_Toc202609069"><span style='font-weight:normal'>3.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Design</a></h2>

<p class=BodyText>Here is a quick model for our top-level Dice Game:</p>

<p class=BodyText><img border=0 width=312 height=52 id="_x0000_i1025"
src="CppAndOOdTheLeastYouNeedToKnow_files/image004.gif"></p>

<h3><a name="_Toc202609070"><span>3.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Notes on UML</a><a href="#_ftn4" name="_ftnref4" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:Arial'>[4]</span></span></span></a></h3>

<p class=BodyText>This book is not about UML. Even so, I need some basic way to
express ideas at a level higher than code, so that’s the language I’ll be
using. Here are the parts of this diagram so you can effectively read it.</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=82 valign=top style='width:82.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=BodyText style='margin-left:0in'><img border=0 width=74 height=52
  id="_x0000_i1026" src="CppAndOOdTheLeastYouNeedToKnow_files/image005.gif"></p>
  </td>
  <td width=355 valign=top style='width:355.15pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>These boxes represent classes. This
  particular example is called Dice Game, meaning there will be a class called </span><span
  class=Example><span lang=EN-GB>DiceGame</span></span><span lang=EN-GB> in our
  solution. In our use of C++, this means we will have a header file called </span><span
  class=Example><span lang=EN-GB>DiceGame</span></span><span lang=EN-GB>.h and
  a source file called </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
  lang=EN-GB>.cpp. The diagram shows Cup and </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB>, so there are two other classes
  and therefore four more files (two header files, two source files).</span></p>
  <p class=TableText><span lang=EN-GB>Since we’ll be writing tests as well,
  there will be test source files for each of these design-level concepts.</span></p>
  </td>
 </tr>
 <tr>
  <td width=82 valign=top style='width:82.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=BodyText style='margin-left:0in'><img border=0 width=71 height=32
  id="_x0000_i1027" src="CppAndOOdTheLeastYouNeedToKnow_files/image006.gif"></p>
  </td>
  <td width=355 valign=top style='width:355.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A navigable connection. The line itself,
  ignoring the arrow head, suggests a connection between two classes. So
  there’s a connection between </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
  lang=EN-GB> and Cup. The diagram also shows a connection between Cup and </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>. Without
  the arrow head, this just means there’s an association. The arrow head is
  called navigability, which means that the class on the side without the arrow
  head can navigate to the side with the arrow head. Since this is a solid
  line, it strongly suggests that the </span><span class=Example><span
  lang=EN-GB>DiceGame</span></span><span lang=EN-GB> class will have some kind
  of member data (attribute/field) that holds onto to a Cup object.</span></p>
  <p class=TableText><span lang=EN-GB>You’ll also notice numbers on those lines.
  That is the multiplicity of the relationship. In this particular example it
  shows “1”, which is the default value. I won’t be using default values
  because I think a default value of 1 was a poor choice in the design of UML
  and I don’t want you to have to be a “language lawyer” when reading these
  diagrams.</span></p>
  <p class=TableText><span lang=EN-GB>In the case of the Cup to </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>
  relationship it shows a 2, meaning an object of the Cup class holds onto 2
  objects of the </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> class. Ultimately, when there’s more than 1 or a variable number,
  you’ll end up using some kind of collection class. We’ve already seen a
  collection class, </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
  lang=EN-GB>, which is what we’ll use to represent this relationship.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609071"><span>3.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Rules of the Game</a></h3>

<p class=BodyText>This is a simple game. A player plays the game by rolling the
dice. Here are the possible results:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The player wins 1 if the roll is &gt; 7</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The game is a push if the player rolls 7</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The player loses 1 if the roll is &lt; 7</span></p>

<p class=BodyText>The point of this project is not to create a <span
class=Example>DiceGame</span>. The point of <span class=Example>DiceGame</span>
is to serve as a vehicle to cover Object Oriented Design and C++, so the rules
are mostly irrelevant. That there are some rules, which are different in some
consistent way, is important. What those rules are, however, isn’t really
important.</p>

<h3><a name="_Toc202609072"><span>3.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>One Development Strategy</a></h3>

<p class=BodyText>There are several ways to go about writing the code for this
project. Possibly the most familiar is to simply create all the classes and
then see if things work. We will not be taking that approach, and instead we
will be writing automated tests first. Those tests often won’t compile initially,
so we’ll then create the production code to get the tests to compile but
probably not pass. Then we’ll get the tests to pass. When the tests are
passing, we might clean up our work a bit in an activity called<span
class=Standout> refactoring</span>.</p>

<p class=BodyText>This may seem backwards to how you were taught, or what you
are used to doing. Here’s an observation: Nobody was born knowing how to
program. So everything you do now is a learned activity. If this seems strange
or backwards (and I expect it will), that’s because it is different from what
you’ve done in the past. This doesn’t make it worse or better, it’s just
different. I hope by the time you’ve worked through this book you’ll think it
is better. However, if you don’t that’s fine. At the very least, I hope you’ll
find value in the idea of writing automated unit tests.</p>

<h2><a name="_Toc202609073"><span style='font-weight:normal'>3.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The First Test</a></h2>

<p class=BodyText>We have a rough design so now it’s on to writing a failing
unit tests. Here is one such failing test:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include<span
style='font-family:CourierNewPSMT'> </span><span style='font-family:CourierNewPSMT;
color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> TEST_GROUP(Die) {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> <span
style='font-family:CourierNewPSMT'>};</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> TEST(Die,
InitialValueInRange1to6) {</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   Die d;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>  
CHECK(d.faceValue() &gt;=1 &amp;&amp; d.faceValue() &lt;= 6);</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> <span
style='font-family:CourierNewPSMT'>}</span></p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>You must </span><span class=Example><span
  lang=EN-GB>#include</span></span><span lang=EN-GB> the header file for any
  classes you’ll be using. This lets the source file know about the class’
  definition: its member variables (attributes) and its member functions
  (methods).</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Compare </span><span class=Example><span
  lang=EN-GB>#include</span></span><span lang=EN-GB> using </span><span
  class=Example><span lang=EN-GB>&quot;&quot;</span></span><span lang=EN-GB>
  versus </span><span class=Example><span lang=EN-GB>#include</span></span><span
  lang=EN-GB> using </span><span class=Example><span lang=EN-GB>&lt;&gt;</span></span><span
  lang=EN-GB>. When using </span><span class=Example><span lang=EN-GB>&quot;&quot;</span></span><span
  lang=EN-GB>, the current directory is checked as well as standard include
  locations and any include directories you’ve added (remember, you added the
  include directory for CppUTest). The &lt;&gt; does not check the current
  directory but otherwise it is the same list.</span></p>
  <p class=TableText><span lang=EN-GB>Traditionally, your files are </span><span
  class=Example><span lang=EN-GB>#include</span></span><span lang=EN-GB>d using
  </span><span class=Example><span lang=EN-GB>&quot;&quot;</span></span><span
  lang=EN-GB> while system and library files are included using &lt;&gt;.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The order of includes, as mentioned
  above, is important. CppUTest overrides </span><span class=Example><span
  lang=EN-GB>new</span></span><span lang=EN-GB> and </span><span class=Example><span
  lang=EN-GB>delete</span></span><span lang=EN-GB>, which are used to manage
  memory allocated as the program runs (dynamically allocated memory). These
  two operators replace </span><span class=Example><span lang=EN-GB>malloc</span></span><span
  lang=EN-GB> and </span><span class=Example><span lang=EN-GB>free</span></span><span
  lang=EN-GB>, respectively, in C++. Note, they are operators in C++, or
  reserved words, where </span><span class=Example><span lang=EN-GB>malloc</span></span><span
  lang=EN-GB> and </span><span class=Example><span lang=EN-GB>free</span></span><span
  lang=EN-GB> are functions in a library. </span><span class=Example><span
  lang=EN-GB>new</span></span><span lang=EN-GB> and </span><span class=Example><span
  lang=EN-GB>delete</span></span><span lang=EN-GB> are different because they
  do more, which we’ll get into later. Don’t mix and match </span><span
  class=Example><span lang=EN-GB>new</span></span><span lang=EN-GB> and delete
  with </span><span class=Example><span lang=EN-GB>malloc</span></span><span
  lang=EN-GB> and </span><span class=Example><span lang=EN-GB>free</span></span><span
  lang=EN-GB>; only use </span><span class=Example><span lang=EN-GB>new</span></span><span
  lang=EN-GB> and </span><span class=Example><span lang=EN-GB>delete</span></span><span
  lang=EN-GB> with classes (or </span><span class=Example><span lang=EN-GB>struct</span></span><span
  lang=EN-GB>s that have been written as classes).</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05 – 06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a struct for a test fixture. This
  creates a base </span><span class=Example><span lang=EN-GB>struct</span></span><span
  lang=EN-GB> (</span><span class=Example><span lang=EN-GB>class</span></span><span
  lang=EN-GB>) with<span class=Standout> </span></span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB> in its name. The actual full
  name of the class depends on the version of CppUTest you are using. This
  variability suggests a particular style of writing tests, which we’ll see
  later on.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The TEST_GROUP creates a </span><span
  class=Example><span lang=EN-GB>struct</span></span><span lang=EN-GB>. It is
  important to end a class definition with a “;”. TEST creates a class, but
  unlike TEST_GROUP, you are adding a method to a class via the macro rather
  than fully defining a class. So it does not require a “;” at the end because
  the macro does it for you. It’s still there.</span></p>
  <p class=TableText><span lang=EN-GB>It is safe to simply always use a
  &quot;;&quot; at the end of both of these macros.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a test. This macro creates a </span><span
  class=Example><span lang=EN-GB>class</span></span><span lang=EN-GB> which
  includes InitialValueInRange1to6 in its name. The </span><span class=Example><span
  lang=EN-GB>class</span></span><span lang=EN-GB> inherits from the </span><span
  class=Example><span lang=EN-GB>struct</span></span><span lang=EN-GB> created
  by the TEST_GROUP macro. In reality, the </span><span class=Example><span
  lang=EN-GB>class</span></span><span lang=EN-GB> created has a single method
  added to it that holds the code between { and }, and it is that method that
  gets executed by the unit test framework.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Test assertion. This is a macro that
  calls a method, like LONGS_EQUAL. If the expression evaluates to true (a
  non-0 result) then the method returns and the test continues execution. If
  the expression is false (a 0 result), then the method terminates test
  execution (throwing an exception under the covers).</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609074"><span>3.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Create the test file</a></h3>

<p class=BodyText>Add a new source file to your project. Call it<span
class=Standout> </span><span class=Example>Die</span><span class=Standout>Test.cpp</span>.
Enter the code above into that file. Eclipse will warn you that line 1, the
#include of <span class=Example>Die</span>.h, names a file that does not exist.
That’s OK. You’ve written a test and the test is currently failing, but not for
long.</p>

<p class=BodyText>Build your application and review the compiler errors.</p>

<h3><a name="_Toc202609075"><span>3.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Die Header</a></h3>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class Die {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   <span
style='color:#7F0055'>int</span> faceValue() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01 – 03, 21</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Guard against this header file getting </span><span
  class=Example><span lang=EN-GB>#include</span></span><span lang=EN-GB>d
  multiple times. A header file may contain<span class=Standout> declaration</span></span><span
  class=Standout><span lang=EN-GB>s</span></span><span lang=EN-GB> or<span
  class=Standout> definition</span></span><span class=Standout><span
  lang=EN-GB>s</span></span><span lang=EN-GB>. A<span class=Standout>
  declaration</span> can be repeated, while a<span class=Standout> definition</span>
  cannot. This header file<span class=Standout> defines</span> the class<span
  class=Standout> </span></span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>. You can tell it is a<span class=Standout> definition</span>
  because </span><span class=Example><span lang=EN-GB>class Die</span></span><span
  lang=EN-GB> is followed by </span><span class=Example><span lang=EN-GB>{ … };</span></span><span
  lang=EN-GB> If the code instead was: </span><span class=Example><span
  lang=EN-GB>class Die;</span></span><span lang=EN-GB> then it would only be a<span
  class=Standout> declaration</span>, which can safely be repeated.</span></p>
  <p class=TableText><span lang=EN-GB>A<span class=Standout> declaration</span>
  states that something exists but does not provide details about size,
  structure or functionality. A<span class=Standout> definition</span> does
  what a<span class=Standout> declaration</span> does and additionally
  describes size, structure and/or functionality. This<span class=Standout>
  class definition</span> states that there is a </span><span class=Example><span
  lang=EN-GB>class</span></span><span lang=EN-GB> called<span class=Standout> </span></span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> with a
  single member function (method), </span><span class=Example><span lang=EN-GB>int
  faceValue() const;.</span></span></p>
  <p class=TableText><span lang=EN-GB>Any<span class=Standout> compilation unit</span>
  can include multiple<span class=Standout> declarations</span> of a given
  thing (class, function, variable) but only one<span class=Standout>
  definition</span>. A<span class=Standout> declaration</span> after a<span
  class=Standout> definition</span> is also OK.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The </span><span class=Example><span
  lang=EN-GB>#pragma</span></span><span lang=EN-GB> macro is a standard way to
  introduce compiler-specific code. By definition, if a compiler does not
  understand the text after </span><span class=Example><span lang=EN-GB>#pragma</span></span><span
  lang=EN-GB> it ignores it silently. This particular </span><span
  class=Example><span lang=EN-GB>#pragma</span></span><span lang=EN-GB> says to
  actually only include this physical file once. Most modern compilers support
  it and it often is enough to just include this expression. If you know your
  compiler and you know your compiler supports this and you only use one
  compiler, you don’t need lines 2, 3 or 10.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02 – 03, 21</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a traditional way to guard
  against multiple inclusion of a header file. Unlike </span><span
  class=Example><span lang=EN-GB>#pragma once</span></span><span lang=EN-GB>,
  multiple inclusions still happen, but only the first one is processed, the
  others are skipped. The compiler reads up to the matching </span><span
  class=Example><span lang=EN-GB>#endif</span></span><span lang=EN-GB> and
  simply ignores those lines. It takes time to read those lines but it does not
  cause the compilation to fail.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Begin defining a class called </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> (the
  singular of dice). You can tell it is a definition in this case because it is
  followed by { versus ;.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Everything after this line is accessible
  to any code. The default access level for classes is </span><span
  class=Example><span lang=EN-GB>private:</span></span><span lang=EN-GB>, which
  means only code in the class (and friends, which we will not cover in this
  book) can access that element.</span></p>
  <p class=TableText><span lang=EN-GB>Note, the checking of </span><span
  class=Example><span lang=EN-GB>public:</span></span><span lang=EN-GB>, </span><span
  class=Example><span lang=EN-GB>private:</span></span><span lang=EN-GB> (and </span><span
  class=Example><span lang=EN-GB>protected:</span></span><span lang=EN-GB>) is
  done at compilation time.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Standout><span lang=EN-GB>Declare</span></span><span
  lang=EN-GB> a<span class=Standout> member function</span> (method). You can
  tell this is a<span class=Standout> declaration</span> for a method because
  it is followed by ; instead of {. This simple rule applies to </span><span
  class=Example><span lang=EN-GB>class</span></span><span lang=EN-GB>, </span><span
  class=Example><span lang=EN-GB>struct</span></span><span lang=EN-GB> and
  functions.</span></p>
  <p class=TableText><span lang=EN-GB>The return type of this method is </span><span
  class=Example><span lang=EN-GB>int</span></span><span lang=EN-GB>, meaning a
  caller can use that value for calculations. </span></p>
  <p class=TableText><span lang=EN-GB>The method takes no arguments as its
  formal argument list is </span><span class=Example><span lang=EN-GB>()</span></span><span
  lang=EN-GB>. This can also be written as </span><span class=Example><span
  lang=EN-GB>(void)</span></span><span lang=EN-GB>, but this distinction is
  only relevant for older C code.</span></p>
  <p class=TableText><span lang=EN-GB>Finally, the method is declared to be </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB>. A </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB> member
  function states an intention or a contract. It says that calling this method
  does not change the state of the receiving object. This makes sense at a
  non-quantum level, observing what was rolled does not change the value of a
  die.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>Finish the </span></span><span class=Example><span
  lang=EN-GB>class</span></span><span class=Standout><span lang=EN-GB>
  definition</span></span><span class=Standout><span lang=EN-GB
  style='font-weight:normal;font-style:normal'>.</span></span></p>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>Don’t forget ; at the end – we’ll have a failure
  exercise coming up to see what happens. Modern compilers can suggest that
  you’ve made such an error some times. More typically, you’ll get 25 or 100
  errors, enough for the compiler to just give up.</span></span></p>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>The reason you must finish a class with ; is as
  follows:</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>A class is
  the same as a struct, with a different default access level.</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>C++ is
  heavily backwards compatible with C.</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>In C, it
  was common practice to define a structure and immediately define a single
  variable of that structure.</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>To end a
  structure definition and not add an immediate variable definition, a struct
  is followed by a ;.</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>To end a
  structure definition and define an immediate variable, a struct is followed
  by some variable name and then a ;</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>So a struct
  is always followed by ;</span></span></p>
  <p class=TableBullet><span class=Standout><span style='font-size:11.0pt;
  font-family:Wingdings;font-weight:normal;font-style:normal'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span></span><span
  class=Standout><span style='font-weight:normal;font-style:normal'>Since
  struct == class (with different default access level), therefore you must end
  a class with ; to indicate that you’ve completed the class definition</span></span></p>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>Method definitions do not need a trailing ;.</span></span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>Balance the </span></span><span class=Example><span
  lang=EN-GB>#ifndef</span></span><span class=Standout><span lang=EN-GB
  style='font-weight:normal;font-style:normal'> on line 02 with a matching </span></span><span
  class=Example><span lang=EN-GB>#endif</span></span><span class=Standout><span
  lang=EN-GB style='font-weight:normal;font-style:normal'>.</span></span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609076"><span>3.3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Die Source</a></h3>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> int Die::faceValue()
const {</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>   return <span
style='color:#0000C0'>1</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the header file for this class as
  the first thing in the source file. It is not necessary to include the header
  file as the first thing in the source file. However, the header file must be </span><span
  class=Example><span lang=EN-GB>#include</span></span><span lang=EN-GB>d
  before <span class=Standout>defining</span> any of the class’ methods.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Standout><span lang=EN-GB>Define</span></span><span
  lang=EN-GB> the method </span><span class=Example><span lang=EN-GB>Die::faceValue</span></span><span
  lang=EN-GB>. The method signature must match that in the header file.
  However, since a source file can have either methods or functions (not
  associated with a class), use </span><span class=Example><span lang=EN-GB>Die::</span></span><span
  lang=EN-GB> to indicate that this is meant to<span class=Standout> define</span>
  a<span class=Standout> member function</span> as opposed to a non-member (or global)
  function.</span></p>
  <p class=TableText><span lang=EN-GB>The </span><span class=Example><span
  lang=EN-GB>::</span></span><span lang=EN-GB> operator is the scope operator.
  It says that the thing on its right is a member of the thing on its left. So </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB> is a
  member of </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>. The header file included the class<span class=Standout>
  definition</span>. You cannot<span class=Standout> define</span> a member
  function without a class<span class=Standout> definition</span>.</span></p>
  <p class=TableText><span lang=EN-GB>You can tell this is a<span
  class=Standout> definition</span> versus a<span class=Standout> declaration</span>
  because it is followed by { instead of ;.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Standout><span lang=EN-GB style='font-weight:
  normal;font-style:normal'>The test only requires a value between 1 and 6. So </span></span><span
  class=Example><span lang=EN-GB>return 1</span></span><span class=Standout><span
  lang=EN-GB style='font-weight:normal;font-style:normal'>. It’s good enough
  for now. We’ll use tests for force a better implementation.</span></span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609077"><span style='font-weight:normal'>3.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Exercise</a></h2>

<p class=BodyText>It’s time to get your failing test compiling and passing.
Create two files, <span class=Example>Die</span>.h and <span class=Example>Die</span>.cpp.
If you use Eclipse to create a new class rather than creating a header file and
source file, you will have a few additional methods. That’s OK, we’ll be
getting to those.</p>

<h3><a name="_Toc202609078"><span>3.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Results</a></h3>

<p class=BodyText>Once you’ve created the <span class=Example>Die</span> class,
build and run your tests. You should see something similar to:</p>

<p class=CodeExample>TEST(vectorShould, HaveInitialSizeOf0) - 0 ms</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(SmokeShould, NeverBeLost) - 0 ms</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(Die, InitialValueInRange1to6) - 0 ms</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (3 tests, 3 ran, 3 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<p class=BodyText>Before moving on, delete the files SmokeTest.cpp and
VectorTest.cpp. They were examples to demonstrate a working system and a
compilation failure. </p>

<p class=BodyText>If you simply remove the source files, Eclipse will leave the
object modules around and those tests will still be there. To fix it:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Delete the two files (if you have not already done so)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Perform a clean build. Right-click on the project and
select Clean Project.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Re-run your tests.</span></p>

<h3><a name="_Toc202609079"><span>3.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Exercises in Failure</a></h3>

<p class=BodyText>Now it is time for some controlled experiments.</p>

<h4>Forgetting ; at the end of TEST_GROUP</h4>

<p class=BodyText>Edit your file <span class=Example>Die</span>Test.cpp. Remove
the ; at the end of TEST_GROUP then build your system.</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>What errors do you see?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Do those errors seem to be related to what you just
did?</span></p>

<p class=BodyText>After reading the error messages, replace the ; at the end of
TEST_GROUP and verify that your system still builds.</p>

<h4>Forgetting ; at the end of class Die</h4>

<p class=BodyText>Try the same experiment but instead remove it from the <span
class=Example>Die</span> class in <span class=Example>Die</span>.hpp.</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>As before, what errors do you see?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Are they even she same?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Is there any clue as to the real problem?</span></p>

<p class=BodyText>After making those observations, fix your system by adding
the ; back on to the end of the <span class=Example>Die</span> class
definition.</p>

<h4>Getting the signature incorrect</h4>

<p class=BodyText>Try removing the word <span class=Example>const</span> from
the end of the <span class=Example>faceValue</span> method declaration in <span
class=Example>Die</span>.h, but not <span class=Example>Die</span>.cpp, and
build.</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Do these errors seem to make sense?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>What can you do to make finding these kinds of errors
easier?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>What can you do when writing your own code to make
committing these kinds of errors less likely?</span></p>

<h4>Why Experiment?</h4>

<p class=BodyText>One thing that most C++ compilers will do is give you errors
that only make sense, occasionally, to an expert. When I type some syntax
error, most of the time I look at the offending line and try to figure out it
without reading the error message. If that does not work, then I try skimming
the message to see if I recognize it as an error I’ve made in the past or if it
has certain keywords that resonate with me. This is the nature of dealing with
compilation errors. The only way you’ll get skilled at this is practice. Each
compiler is different but learning one compiler will help. Learning the syntax
will also help. There are other techniques that can help as well, for example
commenting out sections of a file to see if you can guess what’s going on. In
all cases, these are just approaches to figuring out what’s going wrong.
Experience and practice with the language is the cost of entry for solving
these kinds of problems.</p>

<h3><a name="_Toc202609080"><span>3.4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Concept Review</a></h3>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=343 valign=top style='width:342.9pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>#define</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Defines a macro. We used it as a
  technique to make sure that if a header file is included more than once, it
  is only processed the first time. This is necessary because<span
  class=Standout> definition</span></span><span class=Standout><span
  lang=EN-GB>s</span></span><span lang=EN-GB> cannot be repeated, while<span
  class=Standout> declaration</span></span><span class=Standout><span
  lang=EN-GB>s</span></span><span lang=EN-GB> can. A class header file typically
  contains a class <span class=Standout>definition</span>, so it cannot be
  processed once in any single compilation unit.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>#endif</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This balances the #ifndef macro that
  starts the beginning of the old-style conditional guard started with #ifndef.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>#ifndef</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This means “if not defined”. It’s used to
  see if a macro has or has not yet been defined. If it has not been defined,
  continue reading and compiling up to the matching #endif. If the macro has
  been defined, read, but don’t otherwise process up to the matching #endif.</span></p>
  <p class=TableText><span lang=EN-GB>Note that for any single compilation
  unit, you need to make sure that the identifier (macro name) after #define is
  unique. We do this by using the name of the file, which happens to match the
  name of the class. This is a good basic approach.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>#include</span><span lang=EN-GB> with
  &quot;&quot;</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The list of directories searched when
  using &quot;&quot; includes the current directory as well as standard
  directories and ones you specify. We used Eclipse to extend the list of
  directories searched to include the CppUTest base include directory. Eclipse
  simply passes </span><span class=Example><span lang=EN-GB>-I</span></span><span
  lang=EN-GB> (capital letter i) flag to the command-line compiler.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>#pragma</span><span lang=EN-GB> once</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a modern way to avoid multiple
  inclusions of the same header file. If a compiler supports this, then really
  only include the file once. If the compiler does not understand this, then by
  definition it silently ignores it.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>CHECK</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a macro that is part of CppUTest
  and it is made available by including TestHarness.h. It verifies that the
  resulting expression evaluates to true (non-0). If it does, then nothing
  happens and the test continues. If it does not, then the test terminates and
  is recorded as a failed test.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>class</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A combination of member data (fields or
  attributes) and member functions (methods). A class is equivalent to a struct
  other than its default access level, which is private.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>const member function</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A member function that does not logically
  change the state of the object. You should be able to call a </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB> member
  function over and over and get the same result.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>CppUTest</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>CppUTest is an open-source automated
  testing library. If you use it to create focused, small tests that test only
  one thing, then you may be creating unit tests. If you are testing larger
  chunks of code, then you are creating automated tests that are not actually
  unit tests. This is neither a good thing nor a bad thing.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Declaration</span></p>
  <p class=MsoNormal><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Expressing that something exists. You can
  declare that a class exists, a function exists or some variable exists. A
  declaration only provides basic type information, not storage or
  implementation details. It is lighter weight than a definition.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Definition</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Describes something in enough detail to
  know its size, its methods (if it is a class) or its code if is a method or
  function. Typically, classes are defined in a header file but their methods
  are only declared in the header file. The method bodies reside in a source
  file, thus they are defined in a source file.</span></p>
  <p class=TableText><span lang=EN-GB>For classes and methods, you can tell a
  definition from a declaration depending on what comes after the name. If
  there is a ; before a {, then it is a declaration. If there is a { before a
  ;, then it’s a definition.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Member function</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A function that is declared within a
  class definition. The only explicit example so far is </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB> on
  the </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Member function definition</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The implementation of a member function.
  The one example we have so far is </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB>::</span><span class=Example><span
  lang=EN-GB>faceValue</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>public:</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Access level of member data or member
  functions. Public members are accessible to any code.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Scope ::</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The name on the right is a part of the
  name on the left. Examples include std::vector (the vector class is a member
  of the std namespace) and </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>::</span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> (</span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> is a method in the </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> class).</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>struct versus class</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Classes and structs are equivalent in
  C++. The only difference is the default access; private for classes, public
  for structs.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>TEST</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A macro that defines an automated test,
  which is represented as a class. The class is a sub-class of the struct
  created by the related TEST_GROUP.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>TEST_GROUP</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A macro that defines a test fixture,
  which is implemented as a C++ struct.</span></p>
  <p class=TableText><span lang=EN-GB>Traditionally, you’ll only have one of
  these per source file. You can have more, but in general one source file for
  one purpose produces cleaner code that compiles and ages better.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>TestHarness.h</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The header file that gives the macros
  you’ll use for most of your test writing.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609081"><span>3.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Final Observation</a></h3>

<p class=BodyText>Notice that our test does not directly produce any output.
This is by design, not accidental. For now consider this comment:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Automated tests should produce no output</span><span
lang=EN-GB>.</span></p>

<p class=BodyText>We will come back to this but for now let your brain chew on
that thought.</p>

<h2><a name="_Toc202609082"><span style='font-weight:normal'>3.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Making Improvements</a></h2>

<p class=BodyText>The first test got us a class with a single, hard-coded
method. That’s a good start. Also, considering how much C++ you’ve already
covered, hopefully you’ve taken a break before moving into the second test for
this class.</p>

<p class=BodyText>In any case, you’ll be adding a new test, which will force an
update to the <span class=Example>Die</span> class. Though, it may not require
as much as you’d like to write yourself. Here’s something to begin observing:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>As you increase the number of tests, your production
code should become more general.</span></p>

<p class=BodyText>This can be used as either a metric or a guideline. As a
metric you might see if the code is in fact becoming more general as the number
of tests increase. You might notice:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Hard-coded values becoming conditions then moving into
loops</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Handling more cases overall</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Gracefully dealing with edge and exceptional conditions</span></p>

<h3><a name="_Toc202609083"><span>3.5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Test</a></h3>

<p class=BodyText>As with all the work in this book, we’ll be changing code
either by writing a test or with tests already in place. With that in mind,
here is a second test that you can add after the last test:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> TEST_GROUP(Die) {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> TEST(Die,
InitialValueInRange1to6) {</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   Die d;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>  
CHECK(d.faceValue() &gt;=1 &amp;&amp; d.faceValue() &lt;= 6);</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> TEST(Die,
RollesInRange1To6) {</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>   Die d;</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span>   for(int i = 0; i
&lt; 10000; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>     <span
style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span>     CHECK(<span
style='color:#0000C0'>d</span>.faceValue() &gt;= 1);</p>

<p class=CodeExample><span class=CodeLineNumber>18:</span>     CHECK(<span
style='color:#0000C0'>d</span>.faceValue() &lt;= 6);</p>

<p class=CodeExample><span class=CodeLineNumber>19:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>20:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a new test called
  RollsInRange1To6.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>14</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create an instance of a </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>. Notice the
  duplication from lie 09?</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>16</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call a new method, roll. If line 14 were
  in the body of the for loop, a new die object would be created for each time
  through the loop. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17 – 18</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Verify that the die’s </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB> is
  within the range 1 to 6. Do this in 2 checks rather than one like before. Notice
  the duplicate with line 10? It’s even worse in a sense because it does the
  same thing in a slightly different way, so it could be harder to notice.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609084"><span>3.5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When to Clean Up</a></h3>

<p class=BodyText>Notice the commentary about duplication? There’s an
underlying design principle known as Don’t Repeat Yourself (DRY<a href="#_ftn5"
name="_ftnref5" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[5]</span></span></span></a>).
Duplication can cause several problems:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Increased overall amount of code someone has to
maintain</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>When something changes, there’s more to change and more
opportunities to miss some of the needed places</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Ultimately, it serves as inertia resisting change.</span></p>

<p class=BodyText>So we will strive to remove duplication. However, to remove
the duplication we will have to change another test. Rather than deal with the
duplication now, we will finish what we have started and then remove the
duplication, staying focused on the current task. </p>

<h3><a name="_Toc202609085"><span>3.5.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Die Header File</a></h3>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class Die {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   <span
style='color:#7F0055'>int</span> roll();</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>   <span
style='color:#7F0055'>int</span> faceValue() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> #endif</p>

<p class=BodyText>The only change is the declaration of a new method, roll, on
line 7.</p>

<h3><a name="_Toc202609086"><span>3.5.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Die Source File</a></h3>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> int Die::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>   return 9999;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> int Die::faceValue()
const {</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   return <span
style='color:#0000C0'>1</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> }</p>

<p class=BodyText>The only change is the definition of the <span class=Example>Die</span>::roll
member function on lines 2 – 4. Notice the arbitrary return value? What is your
reaction to that?</p>

<h3><a name="_Toc202609087"><a name="_Ref269827527"><span>3.5.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Exercise:
Update Die</a></a></h3>

<p class=BodyText>Make the following changes:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add the new test to </span><span class=Example><span
lang=EN-GB>Die</span></span><span lang=EN-GB>Test.cpp</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Update </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB>.h with the roll method declaration</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Update </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB>.cpp with the roll method definition</span></p>

<p class=BodyText>Get back to green, meaning your code compiles and your tests
all pass.</p>

<h2><a name="_Toc202609088"><span style='font-weight:normal'>3.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>DRY</a> Violation</h2>

<p class=BodyText>Now that you are at a stable point, you have some options:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Clean up tests to remove duplication</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add new tests to force the extension of functionality</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Clean up the production code</span></p>

<p class=BodyText>Since we observed duplication, now is a good time to remove
it. We are going to change the structure of the code without changing its
behavior. In this case we’re removing duplication from test code, but we could do
something similar with production code.</p>

<p class=BodyText>Changing the structure of the code without changing its
behavior is known as<span class=Standout> refactoring</span>. Our working
definition of behavior will be “passing tests.” So long as we keep the tests
passing, we are refactoring.</p>

<h3><a name="_Toc202609089"><span>3.6.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Removing Duplication</a></h3>

<p class=BodyText>The <span class=Example>TEST_GROUP</span> macro introduces a
test fixture. It is time to take advantage of that. Any fields or methods added
to the <span class=Example>TEST_GROUP</span> are available to all <span
class=Example>TEST</span>S that use that <span class=Example>TEST_GROUP</span>.
So simply adding a <span class=Example>Die</span> object and a supporting
method will help remove the duplication.</p>

<p class=BodyText>In fact, this is an example of inheritance. Here’s a diagram
to represent what we are about to do:</p>

<p class=BodyText><img border=0 width=355 height=141 id="_x0000_i1028"
src="CppAndOOdTheLeastYouNeedToKnow_files/image007.gif"></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=135 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+d: </span><span class=Example><span
  lang=EN-GB>Die</span></span></p>
  </td>
  <td width=302 valign=top style='width:4.2in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+ means public. d is the name of something
  that is public. :</span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> means it is an instance of a </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=135 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+verify</span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB>Value(): void</span></p>
  </td>
  <td width=302 valign=top style='width:4.2in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+ means public. verify</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>Value() is
  the name of a public method. :void means the method returns nothing.</span></p>
  </td>
 </tr>
 <tr>
  <td width=135 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB><img border=0 width=128 height=67
  id="_x0000_i1029" src="CppAndOOdTheLeastYouNeedToKnow_files/image008.gif"></span></p>
  </td>
  <td width=302 valign=top style='width:4.2in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Inheritance. Each box represents a class.
  In this case the base type is a test fixture. We don’t know the exact name,
  but the name comes from the TSET_GROUP macro, so I’m taking a little liberty
  with UML. The derived class’ names come from the TEST macro. Everything in
  the base class is public so it will be available to the derived classes</span></p>
  </td>
 </tr>
</table>

<h4>Step 1: Add</h4>

<p class=BodyText>Start by adding new functionality rather than changing
anything in place. The diagram shows a public attribute (field/member data) and
a public method (member function). Here’s one way to accomplish both of those:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> <span
style='color:#7F0055'>#include</span> &quot;Die.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'>#include</span> &lt;CppUTest/CommandLineTestRunner.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> TEST_GROUP(Die) {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>   Die <span
style='color:#0000C0'>d</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   <span
style='color:#7F0055'>void</span> verifyDieValue() {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>     CHECK(<span
style='color:#0000C0'>d</span>.faceValue() &gt;= 1);</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>     CHECK(<span
style='color:#0000C0'>d</span>.faceValue() &lt;= 6);</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> };</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add a member field to the struct created
  using the TEST_GROUP</span><span lang=EN-GB> macro. Its name is d, its type
  is </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>. Since TEST_GROUP creates a struct, default access is public. The
  reason TEST_GROUP creates a struct versus a class is because it is meant to
  hold common data and methods to be used by tests, which inherit from the
  so-called test fixture.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07 – 10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a method called verify</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>Value(). It
  takes no parameters and returns no values. This is a method definition in a
  class definition. There’s a term for that, it’s called an <span
  class=Standout>implicit inline function</span>. Inline functions are
  something you should eventually learn how to write, but they are not a
  subject explicitly covered in this book. I’m only mentioning it here so that:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>You will understand what
  this code actually does</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>You will know what this
  is called so you can look it up in a C++ Reference’s index.</p>
  </td>
 </tr>
</table>

<h4>Run It</h4>

<p class=BodyText>Add these two changes and confirm that your code still
compiles. You can also re-run your tests. When people discuss Test Driven
Development and refactoring, they often discuss “getting to green fast and
often”. This one trick to accomplish that goal:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Initially add code, don’t change it</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Bite off a very small bit and get it working</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Make sure it compiles and the tests still pass</span></p>

<h4>Update First Test</h4>

<p class=BodyText>Make sure these appear to work by only updating one test.
Here’s the first test updated:</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> TEST(Die,
InitialValueInRange1To6) {</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>  verifyDieValue();</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> }</p>

<p class=BodyText>Note that the entire body is replaced by a call to the verify<span
class=Example>Die</span>Value method. The original test created a single die
then performed a CHECK. This method does the same.</p>

<h4>Run It</h4>

<p class=BodyText>Update the test and confirm that you are still green. See?
Keeping things clean and green isn’t so bad when you understand how to break
down a problem into smaller and smaller steps.</p>

<h4>Update Second Test</h4>

<p class=BodyText>Here’s an updated version of the second test:</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span> TEST(Die,
RollesInRange1To6) {</p>

<p class=CodeExample><span class=CodeLineNumber>18:</span>   <span
style='color:#7F0055'>for</span>(<span style='color:#7F0055'>int</span> i = 0;
i &lt; 10000; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>19:</span>     <span
style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample><span class=CodeLineNumber>20:</span>     verifyDieValue();</p>

<p class=CodeExample><span class=CodeLineNumber>21:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>22:</span> }</p>

<p class=BodyText>This example removes the creation of a <span class=Example>Die</span>
and it calls the public base method, thereby removing the duplication</p>

<h4>Run It</h4>

<p class=BodyText>Again, get to green. Change the test and verify that your
code compiles and the tests still pass.</p>

<h2><a name="_Toc202609090"><span style='font-weight:normal'>3.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A Message on Test Granularity</a></h2>

<p class=BodyText>The first two tests are similar. They both create an object
and they both check that the face value is within a particular range. However,
they are testing very different things.</p>

<p class=BodyText>The first test confirms that after an instance of the <span
class=Example>Die</span> class is created that is has a valid face value. That
is, the object is created in a well-defined, usable state. The second test
verifies that the die rolls a value in a valid range of 1 – 6. Notice that it
does not confirm the distribution of the values, just that a value outside that
range does not happen for a large number of uses.</p>

<p class=BodyText>What is the same is the mechanism of validation; confirming
the die is valid by looking at its face value. This is an example of checking
state. Looking at the value of a die and confirming that its value is in a
range is verifying that its state, its member data (or attributes) are in a
well-defined state. We happen to be checking all of the state in the die
because there’s only one value. This is incidental. It is reasonable to test
only part of an object’s state in one test and another part in another test.
For now, more, smaller tests are better than fewer, large tests. </p>

<p class=BodyText>For a quick answer as to why, consider how likely a test is
to break relative to its size. The larger a test, typically, the more it
covers. The more a test covers the more things that can change and break the
test. Larger tests tend to have more moving parts, each of which might cause a
test to break. As a corollary, if a test must be large, then the code it is
testing is probably highly coupled and hard to understand.</p>

<p class=BodyText>Stated differently: Bad code is hard to test; if you can
write clear tests, your code is probably well written.</p>

<h3><a name="_Toc202609091"><span>3.7.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Recap</a></h3>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=347 valign=top style='width:347.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>As # tests increases, production code
  should</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Become more general. More tests, testing
  different things, forces your production code to handle more situations. As
  it handles more situations, it will either become ugly or clean. The tests
  force change and they support experimentation to consider alternatives
  solutions to find one that is clean for the given set of tests.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>DRY</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Don’t Repeat Yourself.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Keeping Tests Clean</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>We will strive to have clean production
  code and clean test code. Tests can be an asset, allowing you to make changes
  safely without breaking exiting code. However, if you do not treat your tests
  with respect, or let them age badly, then they will eventually wither and
  die.</span></p>
  <p class=TableText><span lang=EN-GB>In fact, all code is either getting
  better or worse all the time. Even if you are not changing the code, your
  users and finding other ways to make it break, so unless you are actively
  caring for and feeding your code (test and production code), it’s going to
  die.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Order of Tests</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The order of test execution is, by
  design, unknown. While you can figure out the test order just looking at the
  output, do not take this information into consideration when writing tests.
  Tests should be written as mini-universes, with their own laws of physics
  (starting conditions) and their own, independent checks.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Test Fixture</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The TEST_GROUP macro introduces a test
  fixture, implemented as a C++ struct. It holds common member data and member functions
  for tests. A good way to group tests is by common setup. A test fixture is a
  way to capture common setup.</span></p>
  <p class=TableText><span lang=EN-GB>I recommend one test fixture per source
  file.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Test Fixture Fields</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Fields added to a TEST_GROUP</span><span
  lang=EN-GB> are available to each individual test. This is a way to reduce
  duplication across tests. We used a common </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB> object in the TEST_GROUP, and
  each TEST</span><span lang=EN-GB>s is able to access it. These fields are
  available because of inheritance.</span></p>
  </td>
 </tr>
 <tr>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB>Test Fixture Methods</span></p>
  </td>
  <td width=347 valign=top style='width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Methods in a TEST_GROUP are accessible by
  TESTs. We added a method in the TEST_GROUP to validate that the die’s roll
  was within the range 1 – 6 and then used that validation in each of the
  TESTs.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609092"><span style='font-weight:normal'>3.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fixing an anemic roll method</a></h2>

<p class=BodyText>The roll method returns a hard-coded value. How can we, in
general, improve the code<a href="#_ftn6" name="_ftnref6" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[6]</span></span></span></a>?
As stated earlier, we’ll be growing our code through the additional of
additional tests.</p>

<h3><a name="_Toc202609093"><span>3.8.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Validating Roll Distribution</a></h3>

<p class=BodyText>Now it is time for a test that verifies all values are
rolled. While we’re at it, we’ll also verify that the distribution is
“reasonable.” There were be several steps to the final form of the test, which
uses the standard library and iterators.</p>

<h4>Writing it the hard way</h4>

<p class=BodyText>Here’s a test that will get the job done:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> TEST(Die,
ShouldRollAllValuesEvenly_1) {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>   <span
style='color:#7F0055'>int</span> values[6] = { 0, 0, 0, 0, 0, 0 };</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span></p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>   <span
style='color:#7F0055'>for</span>(<span style='color:#7F0055'>int</span> i = 0;
i &lt; 600000; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>     <span
style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>     <span
style='color:#7F0055'>int</span> faceValue = <span style='color:#0000C0'>d</span>.faceValue();</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>     <span
style='color:#7F0055'>int</span> countIndex = faceValue - 1;</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>    
++values[countIndex];</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>10: </span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>   <span
style='color:#7F0055'>for</span>(<span style='color:#7F0055'>int</span> i = 0;
i &lt; 6; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>      
CHECK(values[i] &gt; 95000);</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>      
CHECK(values[i] &lt; 105000);</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>     }</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> }</p>

<p class=BodyText>In a nutshell:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create an array of size 6 (6-sided dice), initialized
to all 0’s.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Roll 600,000 times, incrementing the count by one for a
given face value (1 is stored at index 0, 2 at 1, etc.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Verify that all values rolled are in within 5% of
balanced</span></p>

<p class=BodyText>This test is fine as is, but since part of the purpose of
this book is to introduce classes in the standard library, read on.</p>

<h4>The std::array class</h4>

<p class=BodyText>There’s a simple wrapper class for raw arrays. It gives a way
to initialize values and iterate over a collection; it allows raw arrays to be
used with other parts of the standard library in the same way that the
collection classes work.</p>

<p class=BodyText>Here is the first update to the previous example (only the
changes):</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&lt;array&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='color:black'> TEST(Die, ShouldRollAllValuesEvenly_2) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:black'>   std::array&lt;</span><span style='color:#7F0055'>int</span><span
style='color:black'>, 6&gt; values;</span></p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:black'>   values.fill(0);</span></p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the std::array class. Note that
  in general the order of header files is important to CppUTest. The real issue
  is if the class uses dynamic memory allocation. This class does not, so it
  can be included before or after the #include of CppUTest/TestHarness.h.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define an std::array that holds 6 ints.
  The array class wraps “raw” arrays. Its initial index is 0. Its last index is
  the size (6), minus 1.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Initialize all values in the array to 0.
  Note that the fill method uses the second template parameter (6) to know the
  range. It starts at 0 and goes to 5 (1 minus the second parameter).</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>If there were all the std::class did, then there’d be little
reason to use it. However, before moving on, a few observations:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The variable values is no longer a primitive as it was
in the first version.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Therefore, a constructor is called upon its definition.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>If you review the first version, specifically lines 8,
12, and 13, you’ll notice the array is accessed using []. This is an overloaded
operator member function on the std::array class. The full method name is
actually operator[] . You could write line 08 as:</span></p>

<p class=CodeExample>    ++values.<span style='color:#7F0055'>operator</span>[](countIndex);</p>

<h4>Using a typedef</h4>

<p class=BodyText>When I use collection classes, any many other classes in the
standard library, I’ll use typedef statements to introduce synonyms for the
sometimes long names. It just so happens, as you’ll see, it also removes a DRY
violation. </p>

<p class=BodyText>Here’s one more minor change:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> typedef</span><span style='color:black'> std::array&lt;</span><span
style='color:#7F0055'>int</span><span style='color:black'>, 6&gt; </span>RollArray<span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> RollArray<span
style='color:black'> values;</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:black'> values.fill(0);</span></p>

<p class=BodyText>Line 01 introduces a name, RollArray, which is a synonym for
std::array&lt;int , 6&gt;. As with the previous example, not much change and it
might not seem like much value. However, read on to see additional changes that
will move this to an idiomatic use of classes in the standard library.</p>

<h4>Moving towards an iterator by using raw pointers</h4>

<p class=BodyText>The standard collections and algorithms use a so-called pair
of iterators to describe a range. An iterator is a logical way to process
elements in a collection. Each collection declares two methods: begin() and
end(). The first method, begin(), represents the logical beginning of a
collection. The end() is a logical identifier representing “one past the end”.</p>

<p class=BodyText>The validation loop at the bottom of the test could be
rewritten using this idea as follows:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> for</span> (<span style='color:#7F0055'>int</span> *i =
&amp;values[0]; i != &amp;values[6]; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>   CHECK(*i &gt;
95000);</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>   CHECK(*i &lt;
105000);</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span> }</p>

<p class=BodyText>A raw array stores values in contiguous bytes. The array
class is a lightweight wrapper around a raw array, so its underlying storage is
the same. The address of values[0] is the beginning of the array. The address
of values[6] is just after the last element in the array. This loop starts at
the first element and continues while i is not on the address just after the
last element.</p>

<p class=BodyText>If this were a raw array, the for loop should have been:</p>

<p class=CodeExample><span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> *i = values; i != values + 6; ++i) {</p>

<p class=BodyText>However, since values is an instance of a class, there’s an
even better way to write this:</p>

<p class=CodeExample><span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> *i = values.begin(); i != values.end(); ++i) {</p>

<p class=BodyText>In all of these examples, i represents an iterator into the
collection. It turns out that for classes like array, an iterator is just a raw
pointer. For more complex classes, the iterator is also a more complex type.
However, there’s a convention used in the standard library. Each collection
type has a nested typedef, iterator, which represents its iterator type.</p>

<p class=BodyText>The full name of that type in this case is:</p>

<p class=CodeExample><span style='color:black'>std::array&lt;</span><span
style='color:#7F0055'>int</span><span style='color:black'>, 6&gt;::</span>iterator;</p>

<p class=BodyText>However, we have a typedef for the first part, so in our
case, the name is:</p>

<p class=CodeExample>RollArray::iterator;</p>

<p class=BodyText>This changes the for-loop one more time:</p>

<p class=CodeExample><span style='color:#7F0055'>for</span>
(RollArray::iterator i = values.begin(); i != values.end(); ++i) {</p>

<h4>Introducing second typedef</h4>

<p class=BodyText>The almost-final version of the for loop is still a bit long
winded. I’ll introduce a second typedef to “promote” the nested typedef in the
collection class up to the current scope:</p>

<p class=CodeExample>TEST(Die, ShouldRollAllValuesEvenly_5) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>typedef</span>
std::array&lt;<span style='color:#7F0055'>int</span>, 6&gt; RollArray;</p>

<p class=CodeExample>  <span style='color:#7F0055'>typedef</span>
RollArray::iterator iterator;</p>

<p class=CodeExample>  RollArray values;</p>

<p class=BodyText>Now the final for-loop looks like this:</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span> (iterator i =
values.begin(); i != values.end(); ++i) {</p>

<p class=CodeExample>    CHECK(*i &gt; 95000);</p>

<p class=CodeExample>    CHECK(*i &lt; 105000);</p>

<p class=CodeExample>  }</p>

<h4>Shortening the middle loop</h4>

<p class=BodyText>The middle loop uses several temporary variables to make its
intent clearer. Here’s a “tighter” version that is probably more typical:</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> i = 0; i &lt; 600000; ++i) {</p>

<p class=CodeExample>    <span style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample>    ++values[<span style='color:#0000C0'>d</span>.faceValue()
- 1];</p>

<p class=CodeExample>  }</p>

<p class=BodyText>This is a more c-ish way of doing things. Regardless of
whether you prefer the longer version using temporary variables<a href="#_ftn7"
name="_ftnref7" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[7]</span></span></span></a>
or this shorter version, most compilers are going to generate the same code.</p>

<h4>Putting it all together</h4>

<p class=BodyText>&lt;TO DO&gt;</p>

<p class=BodyText>The previous section and the next two code examples no longer
flow… Need to integrate them. Also, the name in the previous examples is
different.</p>

<p class=BodyText><span style='font-family:Symbol'>&lt;</span>/TO DO&gt;</p>

<p class=BodyText>The tests do not currently check to see if all values are rolled.
This next test accomplishes that, making sure roll values are reasonably
distributed:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> TEST(Die,
DistributionReasonable) {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>   std::array&lt;<span
style='color:#7F0055'>int</span>, 6&gt; values;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>   values.fill(0);</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>   <span
style='color:#7F0055'>for</span>(<span style='color:#7F0055'>int</span> i = 0;
i &lt; 600000; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>     <span
style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>     ++values[<span
style='color:#0000C0'>d</span>.faceValue() - 1];</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>  <span
style='color:#7F0055'>for</span>(std::array&lt;<span style='color:#7F0055'>int</span>,
6&gt;::iterator </p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>       iter =
values.begin(); </p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>       iter !=
values.end(); </p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>       ++iter) {</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>     CHECK(*iter &gt;
95000);</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>     CHECK(*iter &lt;
105000);</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a new test called
  DistributionReasonable.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use the standard library array class.
  This class holds a raw array but gives a few convenience methods. This class
  looks like an </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
  lang=EN-GB>, but it is a fixed size.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This class is available by </span><span
  class=Example><span lang=EN-GB>#includ</span></span><span lang=EN-GB>ing </span><span
  class=Example><span lang=EN-GB>&lt;array&gt;</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Initialize the contents of the array to
  0. If you used a raw array, you’d either need to loop through the values, or
  initialize all of them with 0 when you created the array.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Loop 600,000 times.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05 – 06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Roll the die. Get the </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB>,
  subtract one. This gives a range of 0 – 5 (std:array’s are 0-based, as are </span><span
  class=Example><span lang=EN-GB>std::vector</span></span><span lang=EN-GB>s
  and raw arrays). Increment the count at index </span><span class=Example><span
  lang=EN-GB>faceValue</span></span><span lang=EN-GB> - 1 by one. So the count
  of the number of times 1 was rolled will be in index 0.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09 – 12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Iterate over the entire array. This is a
  bit much to take in, however this is how modern C++ using the standard
  library should be written. I’ll be giving a simpler version coming up using
  something called a </span><span class=Example><span lang=EN-GB>typedef</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use a nested typedef in the std::array
  class called iterator. The type iterator is actually just a pointer to what
  is in the array. Since the array contains </span><span class=Example><span
  lang=EN-GB>int</span></span><span lang=EN-GB>s, the type
  std::array&lt;int,6&gt;::iterator is actually int*. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02, 09</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Notice the duplication? Both lines
  contain the fully-qualified name </span><span class=Example><span lang=EN-GB>std::array&lt;int,
  6&gt;</span></span><span lang=EN-GB>.  This violated DRY. We’ll fix this
  before creating the test in our project.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09 – 10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define an instance of a thing called an </span><span
  class=Example><span lang=EN-GB>iterator</span></span><span lang=EN-GB>. That
  instance is known as </span><span class=Example><span lang=EN-GB>iter</span></span><span
  lang=EN-GB>. It is initialized to the </span><span class=Example><span
  lang=EN-GB>values.begin()</span></span><span lang=EN-GB>, which is the
  address of the first element in the array. That it, it points to what is in </span><span
  class=Example><span lang=EN-GB>values[0]</span></span><span lang=EN-GB>; it
  is equal to </span><span class=Example><span lang=EN-GB>&amp;values</span></span><span
  lang=EN-GB>. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>So long as </span><span class=Example><span
  lang=EN-GB>iter</span></span><span lang=EN-GB> is not at the end of the
  array, continue going into the loop. Since array is a thin wrapper around a
  raw array, you can figure out what </span><span class=Example><span
  lang=EN-GB>values.end()</span></span><span lang=EN-GB> returns. It is the
  address just after the last element in the array. Since this is a </span><span
  class=Example><span lang=EN-GB>std::array&lt;int, 6&gt;</span></span><span
  lang=EN-GB>, the last element is at index 5. Therefore, </span><span
  class=Example><span lang=EN-GB>values.end()</span></span><span lang=EN-GB>
  returns </span><span class=Example><span lang=EN-GB>&amp;values + 6</span></span><span
  lang=EN-GB>. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Increment the counter. You are possibly
  more accustomed to seeing iter++ (that is, post increment versus
  pre-increment). On a for() loop, they produce the same result. Modern
  compilers and processors can easily fix this at compile time. However, if the
  type of the iterator is actually a complex type as opposed to a raw type,
  then pre-increment is more efficient. I’ll have more to say about this later.
  For now, you can safely make this substitution universally. Most of the time
  it will make no difference. Occasionally it will be more efficient because it
  will avoid the creation of an unnecessary object. Since it is a hard habit to
  change, better to start practicing it now.</span></p>
  <p class=TableText><span lang=EN-GB>Technically, post-increment returns the
  value before assignment, which requires the creation of a temporary value.
  This temporary value is called an r-value. It is called an r-value because it
  can appear on the right-side of assignment (a = b) but not on the left side
  of assignment.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13, 14</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>To get to the current value in the array
  through the </span><span class=Example><span lang=EN-GB>iterator</span></span><span
  lang=EN-GB>, dereference it. That’s what </span><span class=Example><span
  lang=EN-GB>*iter</span></span><span lang=EN-GB> does, it turns the<span
  class=Standout> pointer to an </span></span><span class=Example><span
  lang=EN-GB>int</span></span><span lang=EN-GB> into an </span><span
  class=Example><span lang=EN-GB>int</span></span><span lang=EN-GB>.</span></p>
  <p class=TableText><span lang=EN-GB>Again, this is idiomatic use of the
  standard library. So this is something that you’ll need to practice so that
  it becomes second nature.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13, 14</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Make sure that the total number of rolls
  for a given value is approximately one sixth of the total number of rolls
  (with a 5% margin for error).</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>This test is a bit of a jump. It introduces
several new things:</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The std::array class from the standard library.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Iteration across all elements of a collection.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The iterator nested type</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Dereferencing iterators</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The begin() and end() methods of collections</span></p>

<p class=BodyText>For now, I want you to replicate it. You’ll be getting more
practice with this in the future but to be able to type it, you’ll need to
build up the complex muscle memory required. Think of this as the natural
language approach to learning C++.</p>

<h4>Fixing DRY Violation with an Idiom</h4>

<p class=BodyText>Before you actually write this test, there’s one more thing I
want to introduce to make this code a touch easier: using <span class=Example>typedef</span></p>

<p class=BodyText>Here’s the same code using <span class=Example>typedef</span>s
to remove the duplication, and I hope, make the code more readable:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>#include <span
style='color:#2A00FF'>&lt;array&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>typedef std::array&lt;int,
6&gt; RollArray;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>typedef RollArray::iterator
iterator;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>TEST(Die,
DistributionReasonable) {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>  RollArray values;</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>  values.fill(0);</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>  for (int i = 0; i &lt;
600000; ++i) {</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>    <span style='color:#0000C0'>d</span>.roll();</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='font-family:CourierNewPS-BoldMT'>     </span>++values[<span
style='color:#0000C0'>d</span>.faceValue() - 1];</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='font-family:CourierNewPS-BoldMT'>   </span>for (iterator<span
class=CodeLineNumber> </span>iter=values.begin(); iter!=values.end(); ++iter) {</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='font-family:CourierNewPS-BoldMT'>     </span>CHECK(*iter &gt; 95000);</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span><span
style='font-family:CourierNewPS-BoldMT'>     </span>CHECK(*iter &lt; 105000);</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>   }</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is the header file for </span><span
  class=Example><span lang=EN-GB>std::array</span></span><span lang=EN-GB>.
  This header file can be included after </span><span class=Example><span
  lang=EN-GB>&lt;CppUTest/TestHarness.h&gt;</span></span><span lang=EN-GB>. It
  happens to work because the </span><span class=Example><span lang=EN-GB>std::array</span></span><span
  lang=EN-GB> class does do anything with dynamic memory allocation.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB> to introduce a synonym for
  the full name of the array. The original version had duplication, this
  version does not. Now, anywhere below line 02 (in the compilation unit) using
  </span><span class=Example><span lang=EN-GB>RollArray</span></span><span
  lang=EN-GB> will actually be using </span><span class=Example><span
  lang=EN-GB>std::array&lt;int, 6&gt;</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The type </span><span class=Example><span
  lang=EN-GB>iterator</span></span><span lang=EN-GB> is actually a nested </span><span
  class=Example><span lang=EN-GB>typedef</span></span><span lang=EN-GB> in the </span><span
  class=Example><span lang=EN-GB>std::array</span></span><span lang=EN-GB>
  class. This line introduces a synonym for </span><span class=Example><span
  lang=EN-GB>iterator</span></span><span lang=EN-GB> called the same thing.
  This is a way to “promote” a nested </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB> up to the current scope.</span></p>
  <p class=TableText><span lang=EN-GB>Any line of code below line 03 (in the
  compilation unit) using </span><span class=Example><span lang=EN-GB>iterator</span></span><span
  lang=EN-GB> will actually be using </span><span class=Example><span
  lang=EN-GB>std::array&lt;int, 6&gt;::iterator</span></span><span lang=EN-GB>.</span></p>
  <p class=TableText><span lang=EN-GB>The name you use is arbitrary but it
  should make sense. Since the </span><span class=Example><span lang=EN-GB>iterator</span></span><span
  lang=EN-GB> meme is embedded deeply in the C++ standard library, I avoid
  originality and just use it.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a </span><span class=Example><span
  lang=EN-GB>std::array&lt;int, 6&gt;</span></span><span lang=EN-GB> by using
  the </span><span class=Example><span lang=EN-GB>typedef</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a </span><span class=Example><span
  lang=EN-GB>std::array&lt;int, 6&gt;::iterator</span></span><span lang=EN-GB>
  by using the </span><span class=Example><span lang=EN-GB>typedef</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<h4>Create the Test</h4>

<p class=BodyText>Create the second form of the test. Add it to the existing <span
class=Example>Die</span>Test.cpp class. You should be able to get a compiling
test that fails executed.</p>

<h3><a name="_Toc202609094"><span>3.8.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Header File</a></h3>

<p class=BodyText>Now that the <span class=Example>Die</span> needs to produce
different values, it’s time to give it a better implementation. The header file
needs some updates:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define DIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class Die {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   Die();</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>   int roll();</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   <span
style='color:#7F0055'>int</span> faceValue() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> private:</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>   int valu<span
style='color:#0000C0'>e</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare a no-argument constructor (ctor).
  If you declare no constructors, C++ will declare a no-argument constructor
  for your class, which is typically called the default constructor. The
  compiler-provided no-argument constructor performs default initialization.
  Default initialization for primitives is to do nothing. Default
  initialization for non-primitives (instances of classes, or objects) is to
  call the object’s no-argument constructor.</span></p>
  <p class=TableText><span lang=EN-GB>We’ve added member data on line 12 to
  this class, an </span><span class=Example><span lang=EN-GB>int</span></span><span
  lang=EN-GB>. Since </span><span class=Example><span lang=EN-GB>int</span></span><span
  lang=EN-GB> is a primitive type, its default initialization is to do nothing.
  We will use the constructor to set </span><span class=Example><span
  lang=EN-GB>value</span></span><span lang=EN-GB> to some reasonable initial
  value.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Everything from this line on is private:
  until the next </span><span class=Example><span lang=EN-GB>public:</span></span><span
  lang=EN-GB>, </span><span class=Example><span lang=EN-GB>private:</span></span><span
  lang=EN-GB>, or </span><span class=Example><span lang=EN-GB>protected:</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add member data (fields, instance data).
  Each instance of die will have its own value member data.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>This header file declares a constructor,
which is considered a special function. That it is special is not important,
what is important, however, is that that constructor is implicitly used
throughout your code base.</span></p>

<h4>Experiment</h4>

<p class=BodyText>Make the change to the header file and attempt to build. All
the code will compile, but it will not link. The linking error will be related
to the fact that your class definition contains a declaration for a no-argument
constructor, but you have not yet defined it (in the source file).</p>

<p class=BodyText>Often, you can add a member function to a class. So long as
it is not used, adding just a declaration but no definition will case no
problems. Since calls to constructors are implicit (added by the compiler),
they are used, even if it is not obvious. In fact, any time you define an
instance, a constructor will be called. No so for primitives (<span
class=Example>int</span>, <span class=Example>int*</span>, <span class=Example>char</span>,
<span class=Example>char*</span>, etc.).</p>

<h3><a name="_Toc202609095"><span>3.8.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Source File</a></h3>

<p class=BodyText>The header file contains a declaration of no-argument
constructor, so it is time to add it. This section contains a few steps so you
can observe things actually happening rather than just believe a book.</p>

<h4>First Pass</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include
&quot;Die.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> Die::Die() {}</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> <span
style='color:#7F0055'>int</span> Die::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>   return 9999;</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> <span
style='color:#7F0055'>int</span> Die::faceValue() <span style='color:#7F0055'>const</span>
{</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>   <span
style='color:#7F0055'>return</span> <span style='color:#0000C0'>value</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span> }</p>

<p class=BodyText>There are missing line numbers to maintain the same line
numbers from this version to the final version for this section.</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define the no-argument constructor. For
  now it does nothing. This code is what the compiler writes for you by
  default.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>16</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Change the definition of </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB> to
  return the new instance data. A question to start asking yourself is this:
  How does this method know one value from another? If there are 1,000 </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> objects in
  the system, how does this single method distinguish one die from another?</span></p>
  </td>
 </tr>
</table>

<h4>Experiments in Failure</h4>

<p class=BodyText>The code did not link. Now it will link if you define the
constructor. Add just line 5, get to compiling. Now you should see the most
recently added test failing. Why? Because the distribution of values is not
reasonable; the die only rolls 1.</p>

<p class=BodyText>Now, update your <span class=Example>faceValue</span> method
to return value instead of returning 1. Then run your tests. Now ask yourself,
“what just happened?!”</p>

<h4>Returning back to just one failure</h4>

<p class=BodyText>The problem is that the method <span class=Example>faceValue</span>
returns member data. That member data is an int, which C++ does not initialize
by default. Your particular compiler might initialize it to 0. If it does, the
tests will still fail.</p>

<p class=BodyText>What’s really happening is that memory for the die object is
allocated somewhere. You cannot tell for sure where without looking at
CppUTest, but where it is placed is not important. It’s in memory somewhere.</p>

<p class=BodyText>That memory may have previously held a value or it might have
been set to all 0’s. Whatever that memory had for a value is what the member
data will contain. So you need to initialize data. That is the primary role of
a constructor. So here are two equivalent ways to accomplish initialization:</p>

<p class=CodeExample>05: Die::Die() { value = 1; }</p>

<p class=BodyText>And then this form I want you to learn:</p>

<p class=CodeExample>05: Die::Die() : value(1) {}</p>

<p class=BodyText>The first form<span class=Standout> assigns</span> the value
1 to the member data. The second version<span class=Standout> initializes</span>
the member data to 1. It may sound like the same thing, and for primitives it
is the same thing. However,<span class=Standout> prefer initialization over
assignment</span>.</p>

<p class=BodyText>Of course, you’re going to have to learn one from the other.
This will come up again, so for now:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use the second form</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Understand that C++ treats initialization different
from assignment</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In terms of a constructor, the second form is how to
use initialization versus assignment.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Even though for primitives there is no difference,
there is a difference for objects. It will typically be better performing, but
more importantly, there are cases where it will be required.</span></p>

<p class=BulletList1><span lang=EN-GB>&nbsp;</span></p>

<p class=BulletList1><span lang=EN-GB>Make the change to your constructor and
notice that you are back to one failing test.</span></p>

<p class=BodyText>By the way, the name for the second form is:<span
class=Standout> Member-wise Initialization List</span>. It starts with a :
after the close parenthesis of the formal argument list and ends with the
opening curly bracket {.</p>

<h4>Get back to green</h4>

<p class=BodyText>Now it is time to get back to green. We’ll do that with a
quick and dirty implementation then a better one after that.</p>

<p class=CodeExample><span class=CodeLineNumber>0a:</span> <span
style='color:#7F0055'>int</span> Die::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>0b:</span>    <span
style='color:#7F0055'>static</span> <span style='color:#7F0055'>int</span>
lastValue = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>0c:</span>    lastValue =
(lastValue + 1) % 6;</p>

<p class=CodeExample><span class=CodeLineNumber>0d:</span>    <span
style='color:#7F0055'>return</span> <span style='color:#0000C0'>value</span> =
lastValue + 1;</p>

<p class=CodeExample><span class=CodeLineNumber>0e:</span> }</p>

<p class=BodyText>I’m using letters here because these lines are not going to
last very long.</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0b</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a variable called </span><span
  class=Example><span lang=EN-GB>lastValue</span></span><span lang=EN-GB>. This
  variable is </span><span class=Example><span lang=EN-GB>static</span></span><span
  lang=EN-GB>. This form of </span><span class=Example><span lang=EN-GB>static</span></span><span
  lang=EN-GB> makes </span><span class=Example><span lang=EN-GB>lastValue</span></span><span
  lang=EN-GB> exist for the entire program<a href="#_ftn8" name="_ftnref8"
  title=""><span class=MsoFootnoteReference><span class=MsoFootnoteReference><span
  lang=EN-GB style='font-size:12.0pt;font-family:"Times New Roman"'>[8]</span></span></span></a>.
  The initialization of lastValue to 0 is done once, the first time the method
  is executed, but never again.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0c</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add one to last value and use modulus
  with 6. This will limit </span><span class=Example><span lang=EN-GB>lastValue</span></span><span
  lang=EN-GB> to the range 0 – 5.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0d</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Assign the member data </span><span
  class=Example><span lang=EN-GB>value</span></span><span lang=EN-GB> to </span><span
  class=Example><span lang=EN-GB>lastValue + 1</span></span><span lang=EN-GB>.
  Since </span><span class=Example><span lang=EN-GB>lastValue</span></span><span
  lang=EN-GB> is in the range 0 – 5, </span><span class=Example><span
  lang=EN-GB>value</span></span><span lang=EN-GB> will be in the range 1 – 6.</span></p>
  <p class=TableText><span lang=EN-GB>Return the result of the assignment. Note
  that assignment returns the thing assigned to, which is value in this case.
  Technically, assignment returns an l-value. An l-value is something that can
  appear on the left-hand side of the assignment operator.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>This first version should get your tests passing. Make the
change and get to green. Once you are green, read on.</p>

<h4>Refactoring</h4>

<p class=BodyText>Remember that refactoring means to change the structure of
your code without changing its behavior. Behavior, in our work, is defined by
the automated tests. If we plan to change the production code, so long as the
tests pass, we are in great shape.</p>

<p class=BodyText>The second version of the C++ standard is called tr1, which
stands for “Technical Release 1”. OK, it really is not a standard but a
recommendation. It recommended adding several classes to the standard library. One
group of additions to the library for that version was is a number of new
random number generators. I’m providing this next version for two reasons:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>So you will be aware of classes available to you in the
library</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Students in the classes I’ve taught seem to like this</span></p>

<p class=BodyText>So here is a final version of the entire <span class=Example>Die</span>.cpp
file for this section:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include
&lt;tr1/random&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> Die::Die() : <span
style='color:#0000C0'>value</span>(1) {}</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> int Die::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>   using namespace
std::tr1;</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   static mt19937
engine;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>   static
uniform_int&lt;int&gt; uniform(1, 6);</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>   return <span
style='color:#0000C0'>value</span> = uniform(engine);</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> int Die::faceValue()
const {</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>   return <span
style='color:#0000C0'>value</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the new random number generation
  features via this header file. Notice the use of tr1 in the name of the
  header file. You can probably guess that something was part of tr1 if its
  header file includes tr1.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The final version of the constructor.
  This version initializes the member data value to 1 by using the member-wise
  initialization list.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The classes about to be named are part of
  tr1. Classes of tr1 are typically in the tr1 namespace. The tr1 namespace is
  a nested namespace in the std namespace. So, for example, mt19937 is a class
  name. Its full name is std::tr1::mt19937. Rather than typing that, the using
  expression brings all of the names in the std::tr1 namespace into the current
  scope (the roll method). This makes those names available without fully
  qualifying them.</span></p>
  <p class=TableText><span lang=EN-GB>Since this using expression is in the
  body of the definition of the roll method, it only impacts the roll method.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The class mt19937 is a random number
  generator. This line defines a single instance of the class, called engine.
  It is static, meaning there will only be one, which will live between
  executions of the roll method. The first time the roll method is called, this
  object will be initialized. Since this is an object, and not a primitive, one
  of its constructors will be called. There are no parameters provided to the
  constructor so the no-argument constructor will be called.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The template class uniform_int&lt;int&gt;
  attempts to uniformly distribute the values it is provided across some range
  of values. This line defines an instance of the class called uniform. The
  first time the roll method is called, one of uniform’s constructors will be
  automatically called. The (1, 6) after uniform are parameters provided to the
  constructor. So a constructor taking two numbers will be called rather than
  the no-argument constructor.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>First, generate a random value. Next,
  assign the random result to the value member data. Finally, return the
  l-value returned as a result of assignment, which is the member data </span><span
  class=Example><span lang=EN-GB>value</span></span><span lang=EN-GB>.</span></p>
  <p class=TableText><span lang=EN-GB>There is quite a bit going on here.</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The statement <span
  class=Example>uniform(engine)</span> calls a method on the uniform class
  taking an engine object. This looks like a function call, but it is in fact
  calling a method called <span class=Example>operator()</span>, literally.
  This expression could be written as <span class=Example>uniform.operator()(engine)</span>.
  </p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The () operator is called
  the function call operator. It allows an object to look like it is a
  function. Another name for this is “functor” or function-object.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The return from calling
  operator() is assigned to value.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The result of that
  assignment is value itself.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The member field value is
  returned.</p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Notice the DRY violation? Two lines of
  code both returning the value member data. This doesn’t seem like much, but
  as you will see, it causes some subtle problems.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>There is another design principle that
  this code violates: The<span class=Standout> Command/Query Separation
  Principle</span>. This principle suggests that a function or method should
  either be a command or a query. A command changes state but does not return a
  value. A query returns a value but does not change state. Since roll() can
  change the value of the die, its returning a value violates the principle.</span></p>
  <p class=TableText><span lang=EN-GB>There are times when following the
  command/query separation is problematic. One common example is with
  multi-threaded programming. Often you need to both perform a check and change
  a value if that check passes, however both of those things need to be done as
  a single unit of work.</span></p>
  <p class=TableText><span lang=EN-GB>We are not writing a multi-threaded
  application, however, so violation this principle might cause problems.</span></p>
  <p class=TableText><span lang=EN-GB>Now a secret. That violation is by
  design. It will come up shortly as you will see an actual problem that could
  have been averted had the code not violated the command/query separation.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>Now it is time to change your code. Change the implementation
of roll to use the new random number generation classes. Now that you are aware
of their existence, you’re in a good position to look them up if they tickle
your fancy<a href="#_ftn9" name="_ftnref9" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[9]</span></span></span></a>,
this will be the last mention of the random number generator.</p>

<h4>A note on this C ugliness</h4>

<p class=BodyText>Using a static variable in a method (or function) is an old C
hack. However, due to the design of the class I only wanted one instance of
both the engine and the uniform object. There are several ways to do this:</p>

<p class=NumList><span lang=EN-GB>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Static variables in the class (so-called class
data, or static member data)</span></p>

<p class=NumList><span lang=EN-GB>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Static variables in the source file, but outside
of a method</span></p>

<p class=NumList><span lang=EN-GB>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Global variables</span></p>

<p class=NumList><span lang=EN-GB>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Each die object could have its own copy, each
initialized with a different random seed</span></p>

<p class=NumList><span lang=EN-GB>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Each die object has its own pointer to an engine
and an uniform_int</span></p>

<p class=NumList><span lang=EN-GB>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>Not do it and just skip those classes (or
lightly mention them)</span></p>

<p class=NumList><span lang=EN-GB>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-GB>The static hack I used</span></p>

<p class=BodyText>Fundamentally I didn’t really like any of these solutions. My
personal definition of design is “Selecting the solution that sucks the least.”
Often there is not a single best answer, so you take the best answer you can
get.</p>

<p class=BodyText>Here is why, case by case, I rejected the first six options:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Option</span></p>
   </td>
   <td width=390 valign=top style='width:390.45pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>While I did want a single instance,
  adding these to the header file would then make all files that include </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>.h know
  about the random number generation stuff. This is strictly implementation
  only so spreading this knowledge across the source base represents bad and
  fundamentally unnecessary coupling.</span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This isn’t really any better than in the
  function, and it expands the visibility of the variables from just one method
  to every line in the compilation unit below where it is introduced.  It’s
  better than option 1, but if I’m already considering file-level scope, which
  is what static on a variable outside of a method represents, then static on a
  variable in a function (or method) really isn’t any more complex. Same idea,
  more focused scope.</span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Global variables allow for wide-reaching
  coupling. I will use them in controlled fashions. But in reality, global
  variables are a great way to have guaranteed employment as you work fixing
  bugs forever.</span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>First, there’s the issue of making the
  random implementation visible to all files that include </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>.h. That is
  unnecessary coupling. Unnecessary coupling causes slower compilation times,
  slower feedback, and increased time to read and understand what is going on.</span></p>
  <p class=TableText><span lang=EN-GB>Also, this would require the introduction
  of more C++ features than I wanted to do at this point. Important features,
  to be sure, but ones that will naturally occur.</span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This reduces the issue of unnecessary
  coupling because it is possible to use something called a forward-declaration
  to minimize the unnecessary coupling. However, this would introduce dynamic
  memory allocation as well.</span></p>
  <p class=TableText><span lang=EN-GB>Both of those subjects are coming up. But
  as with the previous option, more C++ than I wanted to cover at this point.
  Things that will come up anyway.</span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>6</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Of all the options that I did not pick,
  this is the best option. It might have been the best option overall, however
  I have witnessed enough people interested in this that it seems worthy of
  mention. I don’t think it’s worthy of a lot of detail because those details
  are available elsewhere, but to know to look up those details, you need to
  know it exists. So using it is a great way to raise awareness. </span></p>
  </td>
 </tr>
 <tr>
  <td width=47 valign=top style='width:46.95pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>7</span></p>
  </td>
  <td width=390 valign=top style='width:390.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This option is somewhat complex, but it’s
  something I will actually do in production code to keep implementation
  details deeply hidden.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609096"><span>3.8.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Recap</a></h3>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=343 valign=top style='width:342.9pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&lt;tr1/random&gt;</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The header file used to include support for
  new random number generation algorithms introduced into technical release 1
  of C++.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>array</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class in the standard library. It
  offers a thin wrapper around a raw C array. It provides utility methods and it
  also makes a raw array look like a standard collection.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>assignment</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>= is the assignment operator. It takes
  the value on its right side and applies it to the thing on its left side. The
  thing on the left side must be an l-value, such as a variable. The thing on
  the right side can be an l-value but it can also be an r-value, e.g., 4.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>begin</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A method on the standard collections. It
  returns an iterator set to the beginning element of the collection.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>command-query separation</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A design principle that suggests methods
  and functions should either be a command or a query, but not both. A command
  changes state but returns no value; a query returns a value but does not
  return state.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Constructor</span><span lang=EN-GB>(ctor)</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A special method on a class used to
  initialize an object of that class. It is special in that you do not
  explicitly call it; the compiler inserts code to invoke it. In fact, when
  creating an object, a constructor will be called. Primitive types, such as
  pointers do not have constructors.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>end</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A method on the standard collections. It
  returns something that can be used for comparison. Iteration across all
  elements in a collection start at begin(), and continue while the iterator is
  not equal to end().</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>function-object</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>An instance of a class that can respond
  to the message (). This is an overloaded operator. The full method name is
  operator(). At a superficial level, it makes an object look like it behaves
  like a function. When used as a parameter to a template class, it is possible
  to write code that uses either a function or a function object without having
  to do anything special, so it is a convenient way to make generic code.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>functor</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Same as a function object, just an
  alternative name.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>initialization</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>When an object or primitive is declared
  and set at the same time, it is being initialized. For non-primitives,
  initialization means the compiler inserts a call to one of its constructors.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>iterator</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is both a design pattern, a name
  used by the standard library and a nested </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB>. All of the collection
  types in the standard library contain a declaration of a type called
  iterator. It represents something that code uses to work through all elements
  in a collection. In the case of array and vector, the type of iterator is
  simply a pointer to what the array or vectors holds. For more complex
  collections, the iterator is more complex. However, its use is consistent
  across the collection classes in the standard library.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>l-value</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A fully-formed variable or object. It is
  something that can be on the left-side of an assignment operator. Temporary
  values or a constants such as 4 or “4” are not l-values, but instead
  r-values.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Member field</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A non-static variable that is part of a
  class definition.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>member-wise initialization list</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>On a constructor, it is the place where
  member data can be initialized using non-default initialization. It exists
  between the ) of the constructor argument list and the { marking the start of
  the method definition. The member-wise initialization list begins with a :. </span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>modulus (%)</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Given two integer values, return the
  remainder of division of the number on the left by the number on the right. 5
  % 6 is 5, whereas 6 % 5 is 1.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>mt19937</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class added to the standard library as
  part of technical release 1. It provides a sequence of random values using
  the</span><span class=apple-converted-space><span lang=EN-GB
  style='color:black'>&nbsp;</span></span><span class=apple-style-span><span
  lang=EN-GB style='color:black'>Mersenne Twister algorithm</span></span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>namespace</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A way to group related classes and
  variables. The original standard library resides in a namespace called std.
  Examples of its members include std::cout and </span><span class=Example><span
  lang=EN-GB>std::vector</span></span><span lang=EN-GB>. When technical release
  1 was introduced, it was created as a nested namespace under std, giving
  classes like std::tr1::mt19937.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>nested type</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Adding a type in a class creates a nested
  type. All of the standard collections have a nested type called iterator and
  another nested type called </span><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB>_iterator for dealing with constant collections.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>nested </span><span class=Example><span
  lang=EN-GB>typedef</span></span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The iterator and </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB>_iterator
  nested types are created using a C </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB>. Since those </span><span
  class=Example><span lang=EN-GB>typedef</span></span><span lang=EN-GB>s are in
  a class, they are nested </span><span class=Example><span lang=EN-GB>typedef</span></span><span
  lang=EN-GB>s. This means their full name includes the name of the class in
  which they reside.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>no-argument constructor</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A constructor on a class that takes no
  arguments. When you create a C++ class with no constructor, C++ will attempt
  to add one taking no parameters. You can choose to write that yourself if the
  one provided by C++ does not do what you require. We came across this while
  changing the </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> class. We added a primitive member data entry called value, which
  required initialization.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>non-primitive</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>An object. An instance of a class or
  struct. Non-primitives have constructors, which are called automatically when
  the object is created.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>object/instance</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Defining a variable of a class or struct
  creates an object. Object and instance are synonyms.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>operator()</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The function call operator. We saw this
  on the uniform_int class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pre-increment</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>++ on the left side of a variable.
  Pre-increment returns the value of a variable<span class=Standout> after</span>
  adding one. The significance of this is that the pre-increment operator
  returns an l-value rather than an r-value. An r-value requires the creation
  of a temporary object, whereas an l-value does not.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>prefer initialization over assignment</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>All non-primitives are initialized.
  Assignment after initialization may cause unnecessary or duplicate work.
  There is little difference with primitive values, however, there is no harm
  using initialization over assignment, so applying this to all variable types
  reduces the amount you need to remember.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>primitive</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Types know by the compiler. Examples
  include int, char, void*, to name a few. All points are primitives. All
  references (we’ve not come across this yet) are also primitives.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>primitive initialization</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Primitives are not initialized by
  default. We experienced this when adding the value member data to the </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> class. It
  was not initialized. We added a constructor to force its initialization. We
  then looked at assigning the value in the body of the constructor versus
  initializing it in the member-wise initialization list. For primitives,
  there’s little difference. However, there are situations where the
  member-wise initialization list is mandatory.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>private:</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Access level. Things that are private
  cannot be accessed outside of the class unless using “friends”.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>r-value</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A value that can only appear on the right
  side of an assignment operator. A copy or a temporary.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>special member functions</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Constructors and the destructor are
  examples of special member functions.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>static</span><span lang=EN-GB> variables</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Static typically means “one” in some
  manner.</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Static on a variable in a
  function means there will only be one, it will be initialized the first time
  through the function and it will live for the life of the program. </p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Static on a variable in a
  source file but outside of a function means there is only one, it will be
  initialized before its first use (typically before main() is called in
  practice) and it is only accessible from the point in the file where it
  occurs to the end of the file.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Static on a function in a
  file means the function is only available to this one compilation unit.
  File-level scope.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Static on a variable in a
  class means there will only be one of them rather than one per object. This
  is typically called class data.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Static on a method in a
  class means that it is a class method. It does not operate on objects. It
  does not itself have access to member data unless it happens to have an
  instance of the class.</p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>std::tr1</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The namespace of classes added as part of
  technical release 1 of the C++ language.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>template class</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class that takes parameters in
  &lt;&gt;. We have seen two examples up to this point, std::array and </span><span
  class=Example><span lang=EN-GB>std::vector</span></span><span lang=EN-GB>. A
  template class is a partial or meta class. Providing template parameter makes
  a complete class. In fact, in C++ a vector&lt;int&gt; and vector&lt;int*&gt;
  are two different classes. Using a template causes the creation of a complete
  class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>tr1</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Technical release 1, or </span><span
  class=apple-style-span><span lang=EN-GB style='color:black'>ISO/IEC TR 19768.
  This is a set of recommendations, not actually a standard. Several of the
  classes were taken from the boost library.</span></span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>typedef</span></span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A way in C (and C++) to introduce a
  synonym for another type. I’ll be using </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB> to remove duplication
  primarily when using template classes from the standard library.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>uniform_int&lt;int&gt;</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class described in tr1 that attempts to
  provide an even distribution of values across a range.</span></p>
  </td>
 </tr>
 <tr>
  <td width=95 valign=top style='width:94.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>using</span></p>
  </td>
  <td width=343 valign=top style='width:342.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A keyword to bring names from one
  namespace into another namespace.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609097"><span style='font-weight:normal'>3.9<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>C++ Idioms</a></h2>

<p class=BodyText>There’s one more group of changes based on things the
compiler does by default. The compiler will add a no-argument constructor if
you do not add any constructors to your class. The compiler will also add three
more methods to your class if you do not do so yourself:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A destructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A copy-constructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>An assignment operator</span></p>

<p class=BodyText>This section is about doing this yourself. Ultimately,
whether and how these methods are declared and or defined should be an explicit
decision. The first step, however, is awareness that C++ is adding these
methods and then how to override the default behavior.</p>

<h3><a name="_Toc202609098"><span>3.9.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updated Header File</a></h3>

<p class=BodyText>Whether a class will take over the generation of those 4
methods is part of a class’ definition, which is in a header file:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma<span
style='font-family:CourierNewPSMT'> once</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef<span
style='font-family:CourierNewPSMT'> DIE_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define<span
style='font-family:CourierNewPSMT'> DIE_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class<span
style='font-family:CourierNewPSMT'> Die {</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> public<span
style='font-family:CourierNewPSMT'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>   Die<span
style='font-family:CourierNewPSMT'>();</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='font-family:CourierNewPSMT'>   </span>virtual<span style='font-family:
CourierNewPSMT'> </span>~Die<span style='font-family:CourierNewPSMT'>();</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='font-family:CourierNewPSMT'>   </span>int<span style='font-family:CourierNewPSMT'>
</span>roll<span style='font-family:CourierNewPSMT'>();</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='font-family:CourierNewPSMT'>   </span>int<span style='font-family:CourierNewPSMT'>
</span>faceValue<span style='font-family:CourierNewPSMT'>() </span>const<span
style='font-family:CourierNewPSMT'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> private<span
style='font-family:CourierNewPSMT'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>   int <span
style='color:#0000C0'>value</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span> private<span
style='font-family:CourierNewPSMT'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span>   Die(const
Die&amp;);</p>

<p class=CodeExample><span class=CodeLineNumber>18:</span><span
style='font-family:CourierNewPSMT'>   Die&amp; </span>operator=<span
style='font-family:CourierNewPSMT'>(</span>const<span style='font-family:CourierNewPSMT'>
Die&amp;);</span></p>

<p class=CodeExample><span class=CodeLineNumber>19:</span> <span
style='font-family:CourierNewPSMT'>};</span></p>

<p class=CodeExample><span class=CodeLineNumber>20:</span></p>

<p class=CodeExample><span class=CodeLineNumber>21:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare a destructor. This is a special
  method called when an object is removed from the system. By convention, we’ll
  be making all of our destructors virtual. More on this later. There are
  situations where this is an inappropriate thing to do, e.g., embedded systems
  with strong memory restrictions, or putting objects into shared memory.
  Neither of these is relevant for this problem.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare a copy constructor. It is
  private, so it is not available for use outside of the class. In fact, it
  will not be used inside the class, so there will be no definition for this
  method. This makes it impossible to accidentally copy an object of this
  class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>18</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Ibid. but for the assignment operator.
  The assignment operator, by convention, returns a reference to the original
  receiver. By virtue of the &amp;, the return type is an original, not a copy,
  so it is an l-value. Assignment operators are meant to return l-values, and
  this is how to do that.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17, 18</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Both of these take in a </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB> </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> &amp;. The
  &amp; means reference. The </span><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> suggests that the object passed in will remain unchanged.</span></p>
  </td>
 </tr>
</table>

<h4>Experiment in Failure</h4>

<p class=BodyText>Update the header file and attempt to compile. You’ll notice
a linking error because your class’ definition states that the class is
providing a destructor. Since the compiler automatically injects calls to a
class’ destructor when it leaves the system, you must provide a definition if
you declare a destructor in the class’ definition.</p>

<h3><a name="_Toc202609099"><a name="_Ref269827600"><a name="_Ref269827591"><span>3.9.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Updated
Source</a></a></a></h3>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include
&lt;tr1/random&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> Die::Die() : <span
style='color:#0000C0'>value</span>(1) {}</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> Die::~Die() {}</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> int Die::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   using namespace
std::tr1;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>   static mt19937
engine;</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>   static
uniform_int&lt;int&gt; </p>

<p class=CodeExample>        uniform(1, 6);</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>   return <span
style='color:#0000C0'>value</span> = uniform(engine);</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>15:</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span> int Die::faceValue()
const {</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span>   return <span
style='color:#0000C0'>value</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>18:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define the destructor. There’s nothing to
  do, so the compiler-provided destructor would have been adequate. However,
  there’s still a reason to provide it. Doing so can reduce your object module
  size and your linking time. Not by much, but on a large system, you might
  notice a difference.</span></p>
  <p class=TableText><span lang=EN-GB>It is also not possible to make the
  destructor virtual if you do not declare it as such yourself. That is, a
  compiler-provided destructor will never be virtual.</span></p>
  </td>
 </tr>
</table>

<h4>Back to Green</h4>

<p class=BodyText>Add the destructor definition and get back to green</p>

<h3><a name="_Toc202609100"><span>3.9.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Recap</a></h3>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse;border:none'>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Term</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Definition</span></p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Assignment Operator</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A method with the following
  characteristics:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Its name is <span
  class=Example>operator=</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It must take one
  parameter, an object of the class, the typical parameter type is <span
  class=Example>const Type&amp;</span>.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It should return a
  reference to an object of the class, so the typical return type is <span
  class=Example>Type&amp;</span>.</p>
  <p class=TableText><span lang=EN-GB>By default, classes will be given an
  assignment operator. By declaring this method, you are stopping the compiler
  from adding this method itself. So long as it is not used, you do not need to
  define the method. By making it private, only your class can use it, which
  makes it unlikely that it will get used.</span></p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Copy Constructor</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A constructor used when copying the
  object. Like the assignment operator, the compiler provides one of these. If
  you declare it in your class, the compiler will not provide it for you.</span></p>
  <p class=TableText><span lang=EN-GB>A copy constructor has the following
  characteristics:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Its name is the same as
  your class name. This is a requirement of all constructors.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It must take one parameter,
  a reference to an object of your class. It should be a <span class=Example>const</span>
  reference, but in any case it must be a reference.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It has no return type
  because constructors do not have return types.</p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Destructor</span><span lang=EN-GB> (dtor)</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A destructor is named ~ClassName. It is
  automatically added by the compiler if you do not write one. A call to the
  destructor is automatically added by the compiler upon an object being
  removed. We added a destructor and made it virtual. For now, this is meant to
  get you practicing a habit. We’ll come across this again.</span></p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Operator Overloading</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>You can write operators for your class.
  There have been several examples of this so far: </span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The assignment operator
  declaration you just added to your class </p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The uniform_int class had
  an overloaded operator().</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The vector class and the
  array class both have an operator[], which makes both classes look like raw
  arrays.</p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>reference</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A reference is a primitive type. It
  allows a variable to refer to another variable rather than be a copy. In C,
  which does not have references, you accomplish the same thing by using
  pointers. Here are a few things to keep in mind with references:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Their primary use is as
  parameters sent into methods. While it is possible to use one in the middle
  of a function, it is atypical.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>They are primitive types.
  This means you can use one without including a header file; though you’ll
  have to forward-declare non-primitive types (classes) for which you use a
  reference.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>When they are created, they
  must be initialized, and once initialized always refer to the same thing.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Assignment to a reference
  changes the value of the thing referred to, not the reference itself.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>As we will see later, you
  cannot put references in template classes. So, for example, neither <span
  class=Example>std::vector</span>&lt;int&amp;&gt; or
  std::array&lt;int&amp;&gt; are valid C++.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>A reference is a synonym
  for another object.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>You might think of a
  reference as a dereferenced, initialized pointer. Then again, you might not.</p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>virtual</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A keyword saying that a method might be
  overridden in a sub-class. The first place where you explicitly used this
  feature was with the virtual destructor of </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB>. However, the TEST macro
  actually adds a virtual method to the class it creates to allow for test
  execution. We will be seeing much more of this coming up.</span></p>
  </td>
 </tr>
 <tr>
  <td width=73 valign=top style='width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Virtual dtor</span></p>
  </td>
  <td width=370 valign=top style='width:369.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The virtual destructor is a
  recommendation for any class that might be a base class. For now, form the
  habit. As you work through the book, more will be revealed.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609101"><span style='font-weight:normal'>3.10<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What’s
coming up?</a></h2>

<p class=BodyText>Next up is the <span class=Example>DiceGame</span> itself. However,
to effectively test the <span class=Example>DiceGame</span>, we will need to
learn several new things:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Inversion of Control &amp; Dependency Injection</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Test Doubles</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The Mechanics of dynamic binding in C++ (virtual
methods)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A light spattering of pointers and references</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Subclass/inheritance and command/query separation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>More on iterators in the standard library.</span></p>

<h2><a name="_Toc202609102"><span style='font-weight:normal'>3.11<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Review
Game Rules</a></h2>

<p class=BodyText>The <span class=Example>DiceGame</span> has a few simple
rules:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Roll &lt; 7, the player looses</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Roll &gt; 7, the player wins</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Roll == 7, it’s a push, neither a win nor a loss</span></p>

<p class=BodyText>The <span class=Example>DiceGame</span> ultimately uses 2 die
objects, both of which roll 1 – 6 (with an even distribution), so the range of
possible totals is 2 – 12.</p>

<p class=BodyText>If you are taking a typical approach to this problem, you
might simply write the production code, and be done with it. However,
throughout this book we’re only writing production code with tests in place
first. This introduces a challenge: How can you write a test for a particular
situation when what affects the results is a random event? The rules of the
game are fixed, but depend on something outside of our control. Or is it?</p>

<h3><a name="_Toc202609103"><span>3.11.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Test Control</a></h3>

<p class=BodyText>Consider this updated class diagram:</p>

<p class=BodyText><img border=0 width=329 height=145 id="_x0000_i1030"
src="CppAndOOdTheLeastYouNeedToKnow_files/image009.gif"></p>

<p class=BodyText>Imagine if you created a new class, <span class=Example>LoadedDie</span>.
This class behaves like a <span class=Example>Die</span> but it can be set to
always return a particular value. <span class=Example>LoadedDie</span> will
take the place of <span class=Example>Die</span> for tests in the <span
class=Example>DiceGame</span>. This allows a test to decide what’s going to
happen.</p>

<p class=BodyText>This might seem like cheating. However, you already have
tests to verify that <span class=Example>Die</span> works. Given that we know <span
class=Example>Die</span> works, then if <span class=Example>DiceGame</span>
uses <span class=Example>Die</span> or something that behaves like <span
class=Example>Die</span>, it will not invalidate our testing regime. Since we
can control a <span class=Example>LoadedDie</span>, we can control the test
results. In reality, we are selecting a particular path through the production
code by controlling the test. This may be a subtle point, so let me restate it
in a different way:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB> does not depend on how the roll method is implemented, it depends
on what the roll method returns. So any roll method that returns a valid range
of values will do. One that returns a random value is as good as one that
returns a controlled or fixed value.</span></p>

<p class=BodyText>This idea is fundamental. <span class=Example>LoadedDie</span>
is going to substitute for <span class=Example>Die</span> in the test. <span
class=Example>LoadedDie</span> is called a <span class=Standout>Test Double</span><a
href="#_ftn10" name="_ftnref10" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[10]</span></span></span></a>.
Test Double is a general category. It describes anything used as a placeholder
for a test, used to bring under control things that might otherwise change the
results of the test. In this particular case, <span class=Example>LoadedDie</span>
returns a fixed value, so a more specific name is a Stub.</p>

<p class=BodyText>The idea is basic; providing support in your designs for this
is fundamental to better coding. It just so happens that making something
testable also tends to lead to better design. However, at this point it’s time
to make a bold, if not misleading statement:</p>

<p class=BodyText><span class=Standout>Testing Trumps Design</span></p>

<p class=BodyText>That is, given a choice between a “great design” and a
“design that can be tested”, I’ll pick the testable design without a compelling
reason to do otherwise. This is generally a false dichotomy as good designs are
generally testable. So how can you take advantage of this idea for the <span
class=Example>DiceGame</span>? It will require a few moving parts:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Dependency Injection</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Polymorphism</span></p>

<h3><a name="_Toc202609104"><span>3.11.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Dependency Injection</a></h3>

<p class=BodyText>Objects interact by sending messages. When one object talks
to another object, the caller sends a message. A message is associated with a
method, which is then executed. There are two parts to this relationship:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>What message to send</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Which object receives the message</span></p>

<p class=BodyText>The idea of dependency injection only addresses the second
point. It has nothing to do with the first. So dependency injection is about
controlling<span class=Standout> which</span> objects are being sent messages.</p>

<p class=BodyText>In our particular situation, we have <span class=Example>DiceGame</span>
and <span class=Example>Die</span>. <span class=Example>DiceGame</span> needs
to <span class=Example>roll()</span> two die objects and then get their <span
class=Example>faceValue()</span>. The question then remains, to which die
objects will the <span class=Example>DiceGame</span> talk? Alternatively, how
will <span class=Example>DiceGame</span> get access to <span class=Example>Die</span>
objects? There are two general ways this can happen:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB> selects which </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB> objects it talks to</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB> is told which </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB> objects to talk to.</span></p>

<p class=BodyText>The second option is dependency injection. What does this
look like from a design perspective? There are several options; here is one
called constructor injection:</p>

<p class=BodyText><img border=0 width=339 height=200 id="_x0000_i1031"
src="CppAndOOdTheLeastYouNeedToKnow_files/image010.gif"></p>

<p class=BodyText>This is a UML Communication Diagram. A message starts the
whole sequence, that’s the unnumbered “TestScenario()” message coming “from the
outside.” That message results in three more messages (there’s more, I’m just
showing the first three). The first and second messages create two instances of
<span class=Example>LoadedDie</span>. Each is created with a value of 3 passed
in. The message <span class=Example>create</span> is a convention to show that
an object is being constructed. The <span class=Example>DiceGame</span> is then
created in step three and it is given two handles two <span class=Example>LoadedDie</span>
objects.</p>

<p class=BodyText>Rather than creating <span class=Example>Die</span> objects
itself, the <span class=Example>DiceGame</span> is given those objects. If the <span
class=Example>DiceGame</span> creates <span class=Example>Die</span> objects
directly, controlling what happens is more difficult (not impossible, just more
difficult). </p>

<p class=BodyText>As a sidebar, the first time I was introduced to the idea of
Dependency Injection, it seemed so trivial that I rejected it as a significant
idea. Sometimes I would pass things into constructors and sometimes I would
not. I didn’t see its impact on testability. I was confusing the mechanism,
passing an object in, with the intent, providing a hook for control of a
relationship.  It took several months for the importance of this seemingly
simple idea to sink in.</p>

<p class=BodyText>Given a <span class=Example>DiceGame</span> created with two <span
class=Example>LoadedDie</span> objects, both of which were created with the
value 3, can you guess the expected result of the test? If the <span
class=Example>LoadedDie</span> objects simply return the value they were given
at construction time, then 3 + 3 will give 6, which is less than 7. So the
player will lose.</p>

<p class=BodyText>However, there are several moving parts to make this work in
C++.</p>

<h3><a name="_Toc202609105"><a name="_Ref269499440"><a name="_Ref269499435"><span>3.11.3<span
style='font:7.0pt "Times New Roman"'> </span></span>Polymorphism</a></a></a>
Moving Parts</h3>

<p class=BodyText>Simply passing in a different object is not enough. We need
to write the code in such a way that we get<span class=Standout> different
behavior</span> with <span class=Example>LoadedDie</span> than with <span
class=Example>Die</span> objects. Specifically, we want the sum seen by the <span
class=Example>DiceGame</span> to be under our control. We have not yet written
it as such, but assume for the moment that <span class=Example>DiceGame</span>
uses faceValue() to calculate a sum. This means we need <span class=Example>LoadedDie</span>
to return a controlled value from the <span class=Example>faceValue</span>
method. For this to work:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>Die</span></span><span
class=Standout><span lang=EN-GB> should</span></span><span lang=EN-GB> have a
virtual destructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>Die</span></span><span
class=Standout><span lang=EN-GB> must</span></span><span lang=EN-GB> have at
least one other virtual method, </span><span class=Example><span lang=EN-GB>faceValue()</span></span><span
lang=EN-GB> in this case</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>That virtual method (</span><span class=Example><span
lang=EN-GB>faceValue()</span></span><span lang=EN-GB>)<span class=Standout>
must</span> be overridden by </span><span class=Example><span lang=EN-GB>LoadedDie</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>That virtual method (</span><span class=Example><span
lang=EN-GB>faceValue()</span></span><span lang=EN-GB>)<span class=Standout>
must</span> be called by </span><span class=Example><span lang=EN-GB>DiceGame</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
class=Standout><span lang=EN-GB> must</span></span><span lang=EN-GB> hold
either pointers or references to </span><span class=Example><span lang=EN-GB>Die</span></span></p>

<p class=BodyText>The last four bullets enable dynamic binding of the method.
That is, the particular method called depends on the type of the object
receiving the message. If the <span class=Example>faceValue</span> message is
sent to an instance of the <span class=Example>Die</span> class, it will call <span
class=Example>Die</span>::<span class=Example>faceValue</span>. If the message
is instead sent to an instance of the <span class=Example>LoadedDie</span>
class, then it will instead invoke <span class=Example>LoadedDie</span>::<span
class=Example>faceValue</span>. This determination is made at runtime, rather
than at compile time. Thus, the method is dynamically bound. In C++, most of
the work is calculated at compile time, so while there is some overhead, it’s
small. It’s the cost of an indirect jump versus a direct jump.</p>

<p class=BodyText>That is a whole lot to take it. Rather than just jumping
right in, we will continue the practice of working through a series of
automated tests and changing production code to produce the desired effect.</p>

<h2><a name="_Toc202609106"><span style='font-weight:normal'>3.12<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Testing
Into It: LoadedDieTest</a></h2>

<p class=BodyText>Before we can use <span class=Example>LoadedDie</span>, we’ll
need to create it. So that’s a good place to start. Here’s the first version of
Loaded<span class=Example>Die</span>Test.cpp:</p>

<p class=CodeExample>#include &quot;LoadedDie.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include &lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(LoadedDieShould) {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(LoadedDieShould,
HaveFaceValueEqualToConstructorParamaterValue) {</p>

<p class=CodeExample>   LoadedDie die(5);</p>

<p class=CodeExample>   LONGS_EQUAL(5, die.faceValue());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This test simply demonstrates that:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There is (or rather will be) a class called </span><span
class=Example><span lang=EN-GB>LoadedDie</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Constructing an instance of </span><span class=Example><span
lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> takes a single parameter</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Calling the </span><span class=Example><span
lang=EN-GB>faceValue</span></span><span lang=EN-GB> method on a </span><span
class=Example><span lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> returns
the value passed into the constructor.</span></p>

<p class=BodyText>Of course, if you create just this test, it will not compile
because there is no <span class=Example>LoadedDie</span> class yet.</p>

<h3><a name="_Toc202609107"><span>3.12.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Options: Interface/Concrete Inheritance</a></h3>

<p class=BodyText>There are two ways to accomplish our goal:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
lang=EN-GB> as a subclass of </span><span class=Example><span lang=EN-GB>Die</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create a top-level<span class=Standout> interface</span><a
href="#_ftn11" name="_ftnref11" title=""><span class=MsoFootnoteReference><b><i><span
class=MsoFootnoteReference><b><span lang=EN-GB style='font-size:12.0pt;
font-family:"Times New Roman";color:black'>[11]</span></b></span></i></b></span></a>
that both </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB> and </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
lang=EN-GB> inherit from</span></p>

<p class=BodyText>The second approach is more pure, but it also includes more
moving parts. For now, we will pick the first option. However, we will use the
second option later in this project.</p>

<p class=BodyText>With this decision made, here is <span class=Example>LoadedDie</span>’s
header file:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef LOADEDDIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define LOADEDDIE_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='font-family:CourierNewPS-BoldMT'> </span>class LoadedDie: public Die {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>  LoadedDie(<span
style='color:#7F0055'>int</span> value);</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>  <span
style='color:#7F0055'>int</span> faceValue() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>11: </span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span> private:</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>  int loadedValue;</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>15: </span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span> #endif</p>

<p class=BodyText>The only new thing in this example is on line 07. The part
from the : to the { is how you create a subclass. This states that <span
class=Example>LoadedDie</span> publicly inherits from the class <span
class=Example>Die</span>. As we will see, a <span class=Example>LoadedDie</span>
is “compatible”  with or “substitutable for” a <span class=Example>Die</span>.
Anywhere code wants a <span class=Example>Die</span>, we can provide a <span
class=Example>LoadedDie</span>.</p>

<p class=BodyText>To use inheritance, the code must include the header file for
the base class, <span class=Example>Die</span>.h in this case. Inheritance is
simultaneously powerful and highly coupling. I’ll have more to say on this in a
bit.</p>

<h3><a name="_Toc202609108"><span>3.12.2<span style='font:7.0pt "Times New Roman"'>
</span></span>LoadedDie Implementation</a></h3>

<p class=CodeExample>#include &quot;LoadedDie.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDie::LoadedDie(int value) : loadedValue(value) {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int LoadedDie::faceValue() const {</p>

<p class=CodeExample>   return loadedValue;</p>

<p class=CodeExample>}</p>

<p class=BodyText>There is no new syntax in this example. The constructor is
provided an int called value. The member data, loadedValue, is initialized with
value in the member-wise initialization list. The method <span class=Example>faceValue</span>
returns loadedValue instead of value, which is what <span class=Example>Die</span>::<span
class=Example>faceValue()</span> does. <span class=Example>LoadedDie</span>::<span
class=Example>faceValue</span> is meant to replace, or override, <span
class=Example>Die</span>::<span class=Example>faceValue</span>.</p>

<h3><a name="_Toc202609109"><span>3.12.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Get your test passing</a></h3>

<p class=BodyText>You have three files to create:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Loaded</span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB>Test.cpp</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
lang=EN-GB>.h</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
lang=EN-GB>.cpp</span></p>

<p class=BodyText>Get to green before moving on. </p>

<p class=BodyText>Here’s a question to ask yourself: In Polymorphism Moving
Parts on page <span>68</span>, there’s a list of bullets. Does this solution
conform to those bullets?</p>

<h3><a name="_Toc202609110"><a name="_Ref269748864"><a name="_Ref269748856"><span>3.12.4<span
style='font:7.0pt "Times New Roman"'> </span></span>Experiment in Failure</a></a></a></h3>

<p class=BodyText>Make an update to your <span class=Example>LoadedDie</span>
test:</p>

<p class=CodeExample>TEST(LoadedDieShould,
HaveFaceValueEqualToConstructorParamaterValue) {</p>

<p class=CodeExample>   LoadedDie die(5);</p>

<p class=CodeExample>   LONGS_EQUAL(5, die.faceValue());</p>

<p class=CodeExample>   Die &amp;d = die;</p>

<p class=CodeExample>   LONGS_EQUAL(5, d.faceValue());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Earlier I mentioned that you do not typically use references
in the middle of a method and here I am violating that. It’s to demonstrate a
failure. The variable d is a reference to the variable die. That is, die and d
are the same variable. If they are the same value, then it seems to make sense
that the <span class=Example>faceValue</span> method should give the same
result. If that’s the case, then this test will pass.</p>

<p class=BodyText>Check, are you green?</p>

<p class=CodeExample>TEST(LoadedDieShould,
HaveFaceValueEqualToConstructorParamaterValue)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>..\LoadedDieTest.cpp:12: error: Failure in
TEST(LoadedDieShould, HaveFaceValueEqualToConstructorParamaterValue)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   expected &lt;5 0x5&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   but was  &lt;1 0x1&gt;</p>

<p class=BodyText>The test fails. The second assertion shows that the <span
class=Example>faceValue</span> is 1 instead of the expected (or desired 5). So there’s
a problem with the current implementation.</p>

<h3><a name="_Toc202609111"><span>3.12.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Fixing It</a></h3>

<p class=BodyText>The problem is that C++ does not pick the method at runtime
unless the method is declared virtual in the base class’ definition. So the <span
class=Example>faceValue</span> method needs to be declared virtual. As soon as
there’s one virtual method in a class, the destructor should be declared
virtual as well<a href="#_ftn12" name="_ftnref12" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[12]</span></span></span></a>.
While nothing bad will happen here, there is a possibility of a memory leak if
you do not do this. So form the habit of making destructors virtual unless you
have a good reason not to.</p>

<p class=BodyText>Simply change <span class=Example>Die</span>.h so that the
destructor and the <span class=Example>faceValue</span> methods are declared
virtual:</p>

<p class=CodeExample><span>class</span> Die {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   <span>Die</span>();</p>

<p class=CodeExample>   <span style='color:#7F0055'>virtual</span> ~Die();</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> roll();</p>

<p class=CodeExample>   <span style='color:#7F0055'>virtual</span> <span
style='color:#7F0055'>int</span> faceValue() <span style='color:#7F0055'>const</span>;</p>

<p class=BodyText>Make this change and see that your tests are now passing. Congratulations,
you’ve just used a test to confirm the need for a virtual method.</p>

<h3><a name="_Toc202609112"><span>3.12.6<span style='font:7.0pt "Times New Roman"'>
</span></span>Overloading faceValue versus roll</a></h3>

<p class=BodyText>Why did <span class=Example>LoadedDie</span> override <span
class=Example>faceValue</span> versus roll? A quick answer is “because that’s
how we wrote it.” More fundamentally, how would you choose given this
situation? Alternatively, how can we render the decision moot?</p>

<p class=BodyText><span class=Standout>Command-query separation</span> suggests
that a method should either produce a change or return a value, but not do
both. The roll() method violates this as it, presumably, changes the value of a
<span class=Example>Die</span> and returns the value just rolled.</p>

<p class=BodyText>That means that a client of a <span class=Example>Die</span>
could simply call roll() and never call <span class=Example>faceValue</span>.
Do you see a problem with this? In the section Polymorphism Moving Parts, on <span>68</span>,
one of the bullets states that the client must call the virtual method. If the
only method that is virtual is <span class=Example>faceValue</span>, and it is
possible that a client could call roll and get the same result, then it is
possible that a client will not call the virtual method.</p>

<p class=BodyText>There are several ways to address this problem:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Ignore it. Buyer beware. Some assembly required. Not a
great option, but a common one.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Change the roll() method to call </span><span
class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB>.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Change roll() to not return a value, forcing clients to
call </span><span class=Example><span lang=EN-GB>faceValue</span></span><span
lang=EN-GB>.</span></p>

<p class=BodyText>Let’s look at those last two options:</p>

<h4>Fixing DRY violation</h4>

<p class=BodyText>The current implementation violations DRY. There are two ways
in which the <span class=Example>faceValue</span> can be acquired by client
code. Here’s the current implementation:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Die::roll() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>using</span> <span
style='color:#7F0055'>namespace</span> std::tr1;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span> mt19937
engine;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span>
uniform_int&lt;<span style='color:#7F0055'>int</span>&gt; uniform(1, 6);</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>value</span> = uniform(engine);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Here is a version with the DRY violation removed:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Die::roll() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>using</span> <span
style='color:#7F0055'>namespace</span> std::tr1;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span> mt19937
engine;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span>
uniform_int&lt;<span style='color:#7F0055'>int</span>&gt; uniform(1, 6);</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#0000C0'>value</span> =
uniform(engine);</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> faceValue();</p>

<p class=CodeExample>}</p>

<p class=BodyText>This solves the problem because <span class=Example>faceValue</span>
is always called. There were two ways in which the <span class=Example>faceValue</span>
was returned. Now there is only 1 way; there is always a path through the <span
class=Example>faceValue</span>.</p>

<p class=BodyText>This is a good solution; however, it may not be not an
obvious one until you consider the possibility of a subclass.</p>

<h4>Fix command-query separation violation</h4>

<p class=BodyText>Another way to fix the problem is to change roll to not return
a value. This forces the client to call <span class=Example>faceValue</span> if
it needs the value. The updated roll() method becomes:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> Die::roll() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>using</span> <span
style='color:#7F0055'>namespace</span> std::tr1;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span> mt19937
engine;</p>

<p class=CodeExample>   <span style='color:#7F0055'>static</span>
uniform_int&lt;<span style='color:#7F0055'>int</span>&gt; uniform(1, 6);</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#0000C0'>value</span> =
uniform(engine);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice that these two approaches result in nearly the same
code.</p>

<h3><a name="_Toc202609113"><span>3.12.7<span style='font:7.0pt "Times New Roman"'>
</span></span>Fixing Die: Command Query Separation</a></h3>

<p class=BodyText>Update the <span class=Example>Die</span> class to remove the
command-query separation. The definition is above. You will also need to change
the declaration (in the header file). Make sure you are green before
continuing.</p>

<h3><a name="_Toc202609114"><span>3.12.8<span style='font:7.0pt "Times New Roman"'>
</span></span>Review</a></h3>

<p class=BodyText>Inheritance is defining one class in terms of another. <span
class=Example>LoadedDie</span>’s definition depends on <span class=Example>Die</span>’s
definition, so much so that the header file of <span class=Example>LoadedDie</span>
must include the header file of <span class=Example>Die</span>. In fact,
inheritance is the highest form of coupling in class-based, statically typed
languages (e.g., C++, Java, C#). This is ironic in the sense that inheritance
offers the possibility of flexibility at the cost of being fragile.</p>

<p class=BodyText>If you plan to use inheritance and polymorphism in your
solution, there are several steps required in C++ to make it happen:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There must be a base class.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There must be a derived class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There must be method declared virtual in the base class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The derived class must override the base class method</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A client must invoke the method through a pointer or
reference to the base class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>You should make the destructor virtual in the base
class.</span></p>

<p class=BodyText>That’s a bit to remember. Practice it.</p>

<p class=BodyText>Even if you understand the mechanics, however, knowing when
to do this is something that only comes with experience. You need to try things
out to see if they work. One thing that helps is trying to put methods with
objects that have the information to make decisions or do the work. This is one
of Craig Larman’s GRASP patterns; specifically Information Expert. If you find
yourself using a lot of if then else blocks or switch statements, you may be
missing an opportunity.</p>

<p class=BodyText>Once you figure out how, and then even when, there’s still
the issue of avoiding a DRY violation and watching out for command-query
separation violations. You’ll see several more examples later.</p>

<h2><a name="_Toc202609115"><span style='font-weight:normal'>3.13<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What’s
on Deck?</a></h2>

<p class=BodyText>It’s time to create the actual <span class=Example>DiceGame</span>
class. There’s some work to be done, so this is what’s coming up:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Creating the </span><span class=Example><span
lang=EN-GB>DiceGame</span></span><span lang=EN-GB> from scratch, strictly using
tests</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Generalizing production code by adding tests</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refactoring code by extracting classes</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Making tests easier by changing the APIs of classes</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We’ll revisit dependency injection</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Dynamic memory allocation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Using destructors</span></p>

<h2><a name="_Toc202609116"><span style='font-weight:normal'>3.14<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Test-Driven
Walkthrough</a></h2>

<p class=BodyText>Here’s a first test to cover one of the conditions of the <span
class=Example>DiceGame</span>:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include
&quot;LoadedDie.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #include
&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> TEST_GROUP(DiceGame)
{};</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> TEST(DiceGame,
BalanceDecreasesForLoss) {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>    LoadedDie *d1 =
new LoadedDie(3);</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>    LoadedDie *d2 =
new LoadedDie(3);</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>    DiceGame game
(d1, d2);</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>    game.play();</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>    LONGS_EQUAL(-1,
game.getBalance());</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08, 09</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create an instance of a </span><span
  class=Example><span lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> using
  new. The new operator allocates enough memory to hold the thing being
  created, calls a constructor (if what is being created is non-primitive), and
  returns a pointer to the allocated memory.</span></p>
  <p class=TableText><span lang=EN-GB>Objects created with new live until the
  code uses the delete operator to release the memory. This code does not use
  delete, so either there is a memory leak or the game calls delete to free
  memory.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a </span><span class=Example><span
  lang=EN-GB>DiceGame</span></span><span lang=EN-GB>. This is a local variable,
  so it will go away once this block of code finishes. The </span><span
  class=Example><span lang=EN-GB>DiceGame</span></span><span lang=EN-GB>’s
  constructor is passed two </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB> pointers. Initially we will do nothing with those pointers, and
  then we’ll release the memory properly.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call the game’s play method. The play
  method will decide if the game is a win, lose or draw based on the sum of the
  die objects passed into the constructor.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This test controlled what’s going to
  happen. Another way to think about this is that the test has picked one
  particular path through the production code. The expected result is a loss,
  so the balance, assumed to be initially 0, is reduced by one. The test
  defines its own reality.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609117"><span>3.14.1<span style='font:7.0pt "Times New Roman"'>
</span></span>What’s required to make this work?</a></h3>

<p class=BodyText>First, of course, is the <span class=Example>DiceGame</span>
class. It does not exist. A review of the test suggests several demands on the <span
class=Example>DiceGame</span> class:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It must have a constructor that takes two parameters.
Pointers to something. While the code creates </span><span class=Example><span
lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> objects, we’ll be treating
them as </span><span class=Example><span lang=EN-GB>Die</span></span><span
class=BodyTextChar><span lang=EN-GB> objects.</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The game must have a play method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The game must have a getBalance method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The game, apparently, is responsible for properly
handing the dynamically allocated memory of the </span><span class=Example><span
lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> objects. </span></p>

<h3><a name="_Toc202609118"><span>3.14.2<span style='font:7.0pt "Times New Roman"'>
</span></span>DiceGame Header</a></h3>

<p class=BodyText>Here’s a minimal header that, with the provided source, will
get the code back to compiling:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> <span
style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> <span
style='color:#7F0055'>#ifndef</span> DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> <span
style='color:#7F0055'>#define</span> DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class Die;</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> <span
style='color:#7F0055'>class</span> DiceGame {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>    DiceGame(Die *d1,
Die *d2);</p>

<p class=CodeExample><span class=CodeLineNumber>10:    </span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>    <span
style='color:#7F0055'>void</span> play();</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>    <span
style='color:#7F0055'>int</span> getBalance() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>14: </span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare that there is a class </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>. This is
  also known as a forward-declare. There is a header file that contains the </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> definition.
  Including header files is expensive. A review of the rest of this header file
  only shows one more use of the </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> type (so far). Line 09 makes a reference to </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>*. </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>* is a
  pointer. All pointers are primitives, and more importantly, the same size. So
  the compiler does not need size information, therefore it does not require a
  definition of </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>, it just needs to know that the class exists.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The constructor takes in two </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> pointers.
  The test creates </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB> with new. New returns pointers, which we are providing to </span><span
  class=Example><span lang=EN-GB>DiceGame</span></span><span lang=EN-GB>. Since
  </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB> inherits from </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> (using so-called public inheritance), a pointer to a </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> can also
  point to a </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB>. You already saw something similar in a test where a reference to
  a </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> (also a primitive type) referred to a </span><span class=Example><span
  lang=EN-GB>LoadedDie</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609119"><span>3.14.3<span style='font:7.0pt "Times New Roman"'>
</span></span>DiceGame Source</a></h3>

<p class=BodyText>This will get the code compiling but with a failing test:</p>

<p class=CodeExample>#include &quot;DiceGame.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>DiceGame::DiceGame(Die *d1, Die *d2) {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>void DiceGame::play() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int DiceGame::getBalance() const {</p>

<p class=CodeExample>   return -1;</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609120"><span>3.14.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Get it Compiling</a></h3>

<p class=BodyText>You have a little bit of work:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB>Test.cpp</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB>.h</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB>.cpp</span></p>

<p class=BodyText>Get the code compiling and run all tests. The code should
fail, but the failure may be a surprise:</p>

<p class=CodeExample>TEST(DiceGame, BalanceDecreasesForLoss)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>..\DiceGameTest.cpp:7: error: Failure in TEST(DiceGame,
BalanceDecreasesForLoss)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   Memory leak(s) found.</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>Leak size: 12 Allocated at: ..\DiceGameTest.cpp and line:
8. Type: &quot;new&quot; Content: &quot;ÈÇA&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>Leak size: 12 Allocated at: ..\DiceGameTest.cpp and line:
9. Type: &quot;new&quot; Content: &quot;ÈÇA&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>Total number of leaks:  2</p>

<p class=BodyText>There’s a memory leak. This is the primary reason I chose to
use CppUTest for this book. It has simple memory leak detection built in. There
are other solutions I could have used, but all of them require more moving
parts, so I decided to keep it simple.</p>

<p class=BodyText>You have two quick options to fix this memory leak:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Have the test free the memory</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Have the </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB> free the memory</span></p>

<p class=BodyText>If we have the test free the memory, then every test will
have to do it. That’s a DRY violation. It also seems like a poor assignment of
responsibility. If we have the <span class=Example>DiceGame</span> free the
memory, it resolves the DRY violation, but it complicates the <span
class=Example>DiceGame</span> class and it requires “tribal knowledge” of your
clients. Your clients will have to know to only pass in objects created using
new. There is no language-defined way to determine if a given pointer can
safely be deleted or not<a href="#_ftn13" name="_ftnref13" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[13]</span></span></span></a>,
so you must just “be careful” (at least for now).</p>

<p class=BodyText>We are going to have <span class=Example>DiceGame</span> free
the memory. We will remove the requirement of tribal knowledge for successful
use through a better API design. We’re going to do that later.</p>

<h3><a name="_Toc202609121"><span>3.14.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Handle the memory leak, fix the test</a></h3>

<p class=BodyText><span class=Example>DiceGame</span> needs to hold on to two <span
class=Example>Die</span> pointers. We have several options to accomplish that:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Hold two attributes</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use an </span><span class=Example><span lang=EN-GB>std::array</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use an </span><span class=Example><span lang=EN-GB>std::vector</span></span></p>

<p class=BodyText>Since I want you to learn how to use some of the standard
libraries, we’ll use the vector class. However, any of these solutions would work.</p>

<h4>Update the header</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span> <span
style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> <span
style='color:#7F0055'>#ifndef</span> DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> <span
style='color:#7F0055'>#define</span> DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> class Die;</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> #include <span
style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>07: </span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> <span
style='color:#7F0055'>class</span> DiceGame {</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>    <span
style='color:#7F0055'>typedef</span> std::vector&lt;Die*&gt; DiceCollection;</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>    <span
style='color:#7F0055'>typedef</span> DiceCollection::iterator iterator;</p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>    DiceGame(Die *d1,
Die *d2);</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>    <span
style='color:#7F0055'>virtual</span> ~DiceGame();</p>

<p class=CodeExample><span class=CodeLineNumber>15: </span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>    <span
style='color:#7F0055'>void</span> play();</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span>    <span
style='color:#7F0055'>int</span> getBalance() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>18: </span></p>

<p class=CodeExample><span class=CodeLineNumber>19:</span> private:</p>

<p class=CodeExample><span class=CodeLineNumber>20:</span>    DiceCollection <span
style='color:#0000C0'>theDice</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>21:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>22: </span></p>

<p class=CodeExample><span class=CodeLineNumber>23:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use the </span><span class=Example><span
  lang=EN-GB>std::vector</span></span><span lang=EN-GB> class. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use a nested </span><span class=Example><span
  lang=EN-GB>typedef </span></span><span lang=EN-GB>to make using the </span><span
  class=Example><span lang=EN-GB>std::vector</span></span><span lang=EN-GB>
  just a bit easier. DiceCollection is a synonym for a vector of pointer to </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The vector class has an iterator. Create
  a synonym in the </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
  lang=EN-GB> class with the same name as the nested typedef. An iterator is
  included with all of the standard collections and it is one way to work with
  each of the elements in a given collection.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>20</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Store an std::vector&lt;</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>*&gt;, but
  make it read well.</span></p>
  </td>
 </tr>
</table>

<h4>Update the source</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #include
&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #include <span
style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>
DiceGame::DiceGame(Die *d1, Die *d2) {</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>    <span
style='color:#0000C0'>theDice</span>.push_back(d1);</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>    <span
style='color:#0000C0'>theDice</span>.push_back(d2);</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>09: </span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>
DiceGame::~DiceGame() {</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>    for(iterator </p>

<p class=CodeExample><span class=CodeLineNumber>          </span>iter = <span
style='color:#0000C0'>theDice</span>.begin(); iter != t<span style='color:#0000C0'>heDice</span>.end();
++iter)</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>       delete *iter;</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>14: </span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span> void
DiceGame::play() {</p>

<p class=CodeExample><span class=CodeLineNumber>16:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>17: </span></p>

<p class=CodeExample><span class=CodeLineNumber>18:</span> int
DiceGame::getBalance() const {</p>

<p class=CodeExample><span class=CodeLineNumber>19:</span>    return -1;</p>

<p class=CodeExample><span class=CodeLineNumber>20:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06, 07</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add d1 and then d2 to the end of the
  vector. This is in the body of the constructor. By the time the code reaches
  this point, the vector’s constructor has already been called. It is not
  possible to use a constructor to automatically insert these, so it is done
  after initialization of the vector.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Iterate over the entire vector, one element
  at a time.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call delete, one by one, on each item in
  the vector.</span></p>
  </td>
 </tr>
</table>

<h4>Get to green</h4>

<p class=BodyText>Make these changes, you should be green.</p>

<h4>Follow the idiom</h4>

<p class=BodyText>There is one more problem with the class. It can be copied.
This might not seem like a bad idea, but if a copy is made, the copy will get
copies of the pointers stored in the contained vector. Let me say that again:
The copied object will have <span class=Standout>copies of the pointers to the
Die</span> objects, not copies of the Die objects. Eventually the original (or
the copy) will go away, freeing memory. The remaining version will either use
the now deallocated objects or attempt to delete them as well. What happens in
both cases is not defined, but it falls under the category of “things your
mother told you to avoid.”</p>

<p class=BodyText>The easiest thing to do is not allow copies. Simply add this
section to your <span class=Example>DiceGame</span>’s header file just before
the close curly bracket:</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   DiceGame(<span style='color:#7F0055'>const</span>
DiceGame&amp;);</p>

<p class=CodeExample>   DiceGame&amp; operator=(<span style='color:#7F0055'>const</span>
DiceGame&amp;);</p>

<p class=BodyText>At this point it may be worth mentioning that the private: is
not necessary if there’s already another private: above. I do this by
convention. The bottom of my class has private, but unimplemented methods.</p>

<p class=BodyText>Make sure your solution is still green, and then continue.</p>

<h3><a name="_Toc202609122"><span>3.14.6<span style='font:7.0pt "Times New Roman"'>
</span></span>Always losing is no fun</a></h3>

<p class=BodyText>The implementation leaves a lot to be desired. On the one
hand, since the value -1 is already returned, the worse you can ever do is
losing once. On the other hand, you always lose once. To infinitely improve the
odds of winning, it’s time for another test:</p>

<p class=CodeExample>TEST(DiceGame, BalanceIncreasesForWin) {</p>

<p class=CodeExample>   LoadedDie *d1 = <span style='color:#7F0055'>new</span>
LoadedDie(4);</p>

<p class=CodeExample>   LoadedDie *d2 = <span style='color:#7F0055'>new</span>
LoadedDie(4);</p>

<p class=CodeExample>   DiceGame game (d1, d2);</p>

<p class=CodeExample>   game.play();</p>

<p class=CodeExample>   LONGS_EQUAL(1, game.getBalance());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Create this test and verify that it fails.</p>

<h4>What all do we need?</h4>

<p class=BodyText>This one simple test is going to force a bit of coding:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The code needs to actually check for winning or losing</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The code needs either a balance or a way to remember if
the previous time was a wind or a loss</span></p>

<p class=BodyText>Here is one way to get this test to pass:</p>

<h4>Add a new field to the class:</h4>

<p class=CodeExample>private:</p>

<p class=CodeExample>   DiceCollection <span style='color:#0000C0'>theDice</span>;</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> balance;</p>

<h4>Don’t forget to initialize that balance</h4>

<p class=BodyText>Add a member-wise initialization list to set balance to 0:</p>

<p class=CodeExample>DiceGame::DiceGame(Die *d1, Die *d2) : <span
style='color:#0000C0'>balance</span>(0) {</p>

<p class=BodyText>You do not need to do anything with the other member data,
theDice. Its no-argument constructor is called automatically.</p>

<h4>Now do something in play</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span> <span
style='color:#7F0055'>void</span> DiceGame::play() {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>    <span
style='color:#7F0055'>int</span> sum = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>    <span
style='color:#7F0055'>for</span>(iterator </p>

<p class=CodeExample>           iter = <span style='color:#0000C0'>theDice</span>.begin();
iter != <span style='color:#0000C0'>theDice</span>.end(); ++iter) {</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>      
(*iter)-&gt;roll();</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>       sum +=
(*iter)-&gt;faceValue();</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>    }</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>    <span
style='color:#7F0055'>if</span> (sum &gt; 7)</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>       ++<span
style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>    <span
style='color:#7F0055'>if</span> (sum &lt; 7)</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span>       --<span
style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Iterate over every element in the
  collection.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Roll the current die object. Since the
  vector holds pointers and an iterator is a pointer to what the vector holds,
  the iterator type is actually </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>**. The expression (*iter) results in a pointer to a die object.
  -&gt; then sends a message through a pointer. You could also write this
  (**iter).roll().</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add to the sum the faceValue() of the
  current die object.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08 – 11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Conditionally increment or decrement the
  balance depending on the sum. Note I could have used an else if on line 10,
  but the code is clear enough that I don’t do so.</span></p>
  </td>
 </tr>
</table>

<h4>Return the balance</h4>

<p class=BodyText>Since balance now holds the results, getBalance() needs to
return it:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span>
DiceGame::getBalance() <span style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> balance;</p>

<p class=CodeExample>}</p>

<h4>Get back to green</h4>

<p class=BodyText>Make these changes and get back to green. </p>

<h4>One final test</h4>

<p class=BodyText>There’s no test for a “push”. Even though reviewing code
suggests it is handled correctly, let’s write a test. This test serves as a
reminder of the rules of the game and it constrains the implementation to work
for all the conditions we know about.</p>

<p class=CodeExample>TEST(DiceGame, BalanceRemainsSameForPush) {</p>

<p class=CodeExample>   LoadedDie *d1 = <span style='color:#7F0055'>new</span>
LoadedDie(4);</p>

<p class=CodeExample>   LoadedDie *d2 = <span style='color:#7F0055'>new</span>
LoadedDie(3);</p>

<p class=CodeExample>   DiceGame game (d1, d2);</p>

<p class=CodeExample>   game.play();</p>

<p class=CodeExample>   LONGS_EQUAL(0, game.getBalance());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Add this final test and verify that your solution is still
green.</p>

<h3><a name="_Toc202609123"><span>3.14.7<span style='font:7.0pt "Times New Roman"'>
</span></span>Experiments in Failure</a></h3>

<p class=BodyText>Now for a few experiments to see what might happen if you
make a few common mistakes. Here’s what’s on deck:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Removing the body of the </span><span class=Example><span
lang=EN-GB>DiceGame</span></span><span lang=EN-GB> destructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Removing virtual from the declaration of the </span><span
class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> destructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Removing virtual from the declaration of </span><span
class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>::</span><span
class=Example><span lang=EN-GB>faceValue</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Removing </span><span class=Example><span lang=EN-GB>const</span></span><span
lang=EN-GB> from the declaration and definition of </span><span class=Example><span
lang=EN-GB>LoadedDie</span></span><span lang=EN-GB>::</span><span
class=Example><span lang=EN-GB>faceValue</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Adding virtual to the declaration of </span><span
class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>::roll</span></p>

<h4>Body of ~DiceGame</h4>

<p class=BodyText>Make the following change to the body of <span class=Example>DiceGame</span>:</p>

<p class=CodeExample>DiceGame::~DiceGame() {</p>

<p class=CodeExample>//   for(iterator </p>

<p class=CodeExample>//       <u>iter</u> = theDice.begin(); <u>iter</u> !=
theDice.end(); ++<u>iter</u>)</p>

<p class=CodeExample>//      delete *<u>iter</u>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Run your tests and notice what happens. In my solution, I end
up with three failures. All of those failures related to memory leaks. If you
do a little research, you’ll notice that there are three tests using the <span
class=Example>DiceGame</span> class.</p>

<p class=BodyText>This is a demonstration of a memory leak, but why is there a
memory leak?</p>

<p class=BodyText>In a nutshell:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
lang=EN-GB> class is a generic container, so it knows nothing about what you
are choosing to put into it. This includes the difference between pointers and
non-pointers.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There is nothing built into the language making it
possible to tell if something that happens to be a pointer also happens to be
dynamically allocated or not. There are things you can do under the covers to
strongly suggest such a thing, and it is possible to use custom libraries to
make it possible, but no language-defined way.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Since the </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
lang=EN-GB> class can only depend on standards, there’s no way to know if what
is holds is a pointer to dynamically allocated memory.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Even if there were a way to make that determination, there’s
no way the </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
lang=EN-GB> could know that it is responsible for cleaning up that memory. It
would be possible add some kind of flag, but then you’re back to the issue of
not having a standard way to know if something is both a pointer and that it
points to dynamically allocated memory.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Therefore, the vector has no policy regarding what is
put in it.</span></p>

<p class=BodyText>That’s not to say that the <span class=Example>std::vector</span>
does not handle its own memory allocation. A vector holds onto a block of
memory that it dynamically allocated. The vector manages an initial block,
which can change size over time. Here’s a logical image of some sample code:</p>

<p class=CodeExample>void foo() {</p>

<p class=CodeExample>  std::vector&lt;int*&gt; v;</p>

<p class=CodeExample>  int valueOnStack;</p>

<p class=CodeExample>  int *valueOnHeap = new int;</p>

<p class=CodeExample>  v.push_back(&amp;valueOnStack);</p>

<p class=CodeExample>  v.push_back(valueOnHeap);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Given this simple code, what does this logically look like in
memory?</p>

<p class=BodyText><img border=0 width=278 height=214 id="_x0000_i1032"
src="CppAndOOdTheLeastYouNeedToKnow_files/image011.gif"></p>

<p class=BodyText>The code example includes three local variables, v,
valueOnStack and valueOnHeap. Those variables are stored on the program stack.
The <span class=Example>std::vector</span> holds onto a block of memory (its
default size is typically 10). After putting two values onto the vector using <span
class=Example>push_back</span>, the value at index 0 is an address to the local
variable valueOnStack. The value at index 1 is a copy of the address held onto
by the variable valueOnHeap.</p>

<p class=BodyText>When this method exits, the program stack is cleared.
Anything that is an object on the program stack will have its destructor
called. Primitive values like int and int* do not have destructors. So given
this code example, this is what the stack and the heap will resemble after the
program terminates:</p>

<p class=BodyText><img border=0 width=278 height=213 id="_x0000_i1033"
src="CppAndOOdTheLeastYouNeedToKnow_files/image012.gif"></p>

<p class=BodyText>The <span class=Example>std::vector</span> class assumes no
responsibility for what is added to it. It assumes responsibility for the
memory it allocates, which is what it uses to hold on to the things you add to
it. However, if you add a pointer to a dynamically allocated object, then you
have to take care of releasing that memory.</p>

<p class=BodyText>The body of the destructor was doing that. We’ll revisit this
in a bit to see another way to make this happen automatically. </p>

<p class=BodyText>Before moving on to the next experiment, uncomment the body
of the destructor and verify your code is still green.</p>

<h4>Removing virtual on ~Die declaration</h4>

<p class=BodyText>In this next experiment, you’re going to simply remove
virtual to “see” what happens. So remove the keyword virtual from the
declaration of the <span class=Example>Die</span> destructor and run your
tests. What happens?</p>

<p class=BodyText>It appears as if nothing happens, and in this particular case
nothing bad happens. To have this kind of change cause a problem requires
several steps:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A derived class inheriting from a base class (we have
this)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Creating an instance of a derived class using new (we
have this)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Holding on to that newly-created object via a pointer
(we have this)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Releasing memory to that newly-created object through
its pointer (we have this)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The base class’ destructor must be non-virtual (we just
did this)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The derived class must dynamically allocate memory
(missing)</span></p>

<p class=BodyText>In fact, it takes quite a few moving parts to have a
non-virtual destructor in a base class cause problems for a derived class.
However, to convince you of the problem, make the following change to your <span
class=Example>LoadedDie</span>.h (add an <span class=Example>std::vector</span>):</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class LoadedDie: public Die {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   LoadedDie(int value);</p>

<p class=CodeExample>   int faceValue() const;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   int loadedValue;</p>

<p class=CodeExample>   std::vector&lt;int&gt; <span style='color:#0000C0'>problemChild</span>;</p>

<p class=CodeExample>};</p>

<p class=BodyText>Now change your <span class=Example>LoadedDie</span>.cpp
(just the constructor):</p>

<p class=CodeExample>LoadedDie::LoadedDie(<span style='color:#7F0055'>int</span>
value) : <span style='color:#0000C0'>loadedValue</span>(value) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>problemChild</span>.push_back(value);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Make these changes, run your tests. You’ll notice three tests
failing due to memory leaks.</p>

<p class=BodyText>Now, make the destructor in <span class=Example>Die</span>
virtual and see that the tests pass. Finally, remove the use of <span
class=Example>std::vector</span> in <span class=Example>LoadedDie</span> (both
the header and the source).</p>

<h4>What just happened?</h4>

<p class=BodyText>Your <span class=Example>LoadedDie</span> class had a
destructor even if you do not write one for it. Even if you do write one for
it, the call to the destructor of contained objects is added by the compiler
(remember, destructors are special). The <span class=Example>std::vector</span>
class allocates memory. Exactly when is left to a given implementation, however
adding the line to the constructor to put a single value on the vector forces
the vector to perform dynamic memory allocation. When the <span class=Example>DiceGame</span>’s
destructor is called, it calls delete on each of its contained pointers to <span
class=Example>Die</span> objects:</p>

<p class=CodeExample>DiceGame::~DiceGame() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>for</span>(iterator </p>

<p class=CodeExample><span style='color:#7F0055'>      </span>iter = <span
style='color:#0000C0'>theDice</span>.begin(); iter != <span style='color:#0000C0'>theDice</span>.end();
++iter)</p>

<p class=CodeExample>      <span style='color:#7F0055'>delete</span> *iter;</p>

<p class=CodeExample>}</p>

<p class=BodyText>The question is this, “which destructor gets called?” If the
destructor is declared virtual in <span class=Example>Die</span>, then the
compiler will insert just enough code to make sure that the correct destructor
is called<a href="#_ftn14" name="_ftnref14" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[14]</span></span></span></a>
at runtime. If the destructor is not declared virtual, then the compiler
inserts a call to the destructor of the type returned by *iter). Since iter is
a pointer to a <span class=Example>Die</span>, *iter is a <span class=Example>Die</span>,
so the destructor called is ~<span class=Example>Die</span>, regardless of what
the pointer actually points to.</p>

<p class=BodyText>Adding virtual to even one method comes with a cost, which is
discussed later on. However, adding a second virtual method when there is
already one is a much smaller cost. So if you have even one virtual method,
just make the destructor virtual. If you are not using inheritance, then you do
not need a virtual destructor. If you’re not certain that either:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The class you are working on will never serve as a base
class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The class won’t be substituted with a test double
during test</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Subclasses, if there are any, will not need to perform
any dynamic allocation</span></p>

<p class=BodyText>Then you can safely leave off the virtual destructor. </p>

<p class=BodyText>On the other hand, if you are writing unit tests as you write
the rest of your code, you’ll probably find pretty quickly if there’s a missing
virtual destructor, so you can probably get away with leaving this until you
need it.</p>

<p class=BodyText>Make sure your code is green before moving on to the next
experiment.</p>

<h4>Removing virtual from the declaration of Die::faceValue</h4>

<p class=BodyText>This is an experiment you should have already performed. In
any case, make this change and see what happens.</p>

<p class=BodyText>You’ll notice several failing tests, 4 in my case. Why is
this? For the same reason that the wrong destructor is called, the wrong
version of <span class=Example>faceValue</span> is called.</p>

<p class=BodyText>Here’s the offending code:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> void</span> DiceGame::play() {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>    <span
style='color:#7F0055'>int</span> sum = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>    <span
style='color:#7F0055'>for</span>(iterator </p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:#7F0055'>       </span>iter = <span style='color:#0000C0'>theDice</span>.begin();
iter != <span style='color:#0000C0'>theDice</span>.end(); ++iter) {</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>       (*iter)-&gt;roll();</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>       sum +=
(*iter)-&gt;faceValue();</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>    }</p>

<p class=BodyText>Notice the call to <span class=Example>faceValue</span> on line
06? Which version of <span class=Example>faceValue</span> is called? If the
method is declared virtual, then the compiler inserts just enough code to make
sure that the correct version of <span class=Example>faceValue</span> is called.
If the <span class=Example>faceValue</span> method is not declared virtual,
then the compiler inserts enough code to call the method based on the type of
*iter. Since *iter is equal to <span class=Example>Die</span>**, *iter results
in a pointer to a <span class=Example>Die</span>, or <span class=Example>Die</span>*.
The compiler selects the method <span class=Example>Die</span>::<span
class=Example>faceValue</span> as a result. Making <span class=Example>faceValue</span>
virtual forces the compiler to insert a little bit more to make this work.</p>

<p class=BodyText>At this point it is worth mentioning a few more groups of
terms:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=113 valign=top style='width:112.5pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=325 valign=top style='width:324.9pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=113 valign=top style='width:112.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>static type (or)</span></p>
  <p class=TableText><span lang=EN-GB>compiler-time type</span></p>
  </td>
  <td width=325 valign=top style='width:324.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The type known by the compiler based on a
  static analysis (compile-time reading) of the type information. This is what
  can be determined strictly from looking at the compilation unit.</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:112.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dynamic type (or)</span></p>
  <p class=TableText><span lang=EN-GB>run-time type</span></p>
  </td>
  <td width=325 valign=top style='width:324.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The actual type of the object at runtime.
  This may or may not be different from the static type. If the static type is
  either a pointer or a reference to an object, then the static type and
  dynamic type can be different.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>In this most recent example, the static type
of iter is </span><span class=Example>Die</span><span lang=EN-GB>**. The static
type of the expression *iter is </span><span class=Example>Die</span><span
lang=EN-GB>*. However, given that our tests created instances of </span><span
class=Example>LoadedDie</span><span lang=EN-GB>, here’s how the analysis goes.
The static type of iter is still </span><span class=Example>Die</span><span
lang=EN-GB>**, as is the dynamic type. However, while the static type of *iter
is </span><span class=Example>Die</span><span lang=EN-GB>*, the actual type is </span><span
class=Example>LoadedDie</span><span lang=EN-GB>*. This only becomes important
upon calling a method that is virtual. For non-virtual methods, the compiler
selects the method based on the static type. For virtual methods, the compiler
selects the method based on the dynamic type. Since the compiler cannot possibly
know what the actual run-time type is, it instead inserts a level of
indirection that, when the program runs, causes the correct method to be
called. This is called virtual function dispatch. There’s more on this subject
later.</span></p>

<p class=BodyText>Add the virtual keyword back on to the declaration of <span
class=Example>faceValue</span>. Get your code back to green, and then move to
the next section.</p>

<h4>Removing const from the declaration and definition of LoadedDie::faceValue</h4>

<p class=BodyText>When you mean to override methods, the signatures need to
match exactly<a href="#_ftn15" name="_ftnref15" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[15]</span></span></span></a>.
Remove the <span class=Example>const</span> keyword from both the declaration
and definition of <span class=Example>faceValue</span> in <span class=Example>LoadedDie</span>
and run your tests. If you only remove it from one but not the other, your code
will not compile.</p>

<p class=BodyText>Interestingly, you’ll have the same tests failing as before.
In this case, while the base method is virtual, the derived method, as written,
does not match so it does not override. That is, it’s an unrelated method and
it does not have any impact on dynamic method selection.</p>

<p class=BodyText>In general, when I override a method from a base class in a
derived class, I’ll copy the method signature from the base class’ definition
into the derived class’ definition. Another thing to consider, when writing
automated tests meaning to invoke overridden methods, hold a reference or
pointer to the base class rather than the derived class. This is a sure way to
make sure you’ve actually overridden a base class method as intended.</p>

<p class=BodyText>Return your code to green. Add the <span class=Example>const</span>
keyword back on to the method declaration in the header file and the method definition
in the source file.</p>

<h4>Adding virtual to the declaration of Die::roll</h4>

<p class=BodyText>Is there any value in making roll virtual? There are no
subclasses that override roll, so making it virtual will have no noticeable
effect. You could look at the size of the executable before and after. When I
do that, before I make the change, my executable is 784,060 bytes. After the
change, the size is unchanged. Without creating a subclass, or doing some
sophisticated timings, it will be hard to tell whether or not roll is in fact
virtual.</p>

<p class=BodyText>Originally, the roll() method had a return value. This
violated command-query separation, and you fixed it. Now it returns no value,
so it makes it less likely that a client can depend on its effect directly. So
this experiment is not too fruitful.</p>

<p class=BodyText>You can return roll to non-virtual or leave it virtual. The
end result will not change.</p>

<h2><a name="_Toc202609124"><span style='font-weight:normal'>3.15<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Recap</a></h2>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=334 valign=top style='width:333.9pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>: public die</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The syntax for making one class inherit
  from another. After </span><span class=Example><span lang=EN-GB>class LoadedDie</span></span><span
  lang=EN-GB> and before the open curly bracket </span><span class=Example><span
  lang=EN-GB>{</span></span><span lang=EN-GB>, add this to define that one
  class is a subclass of another.</span></p>
  <p class=TableText><span lang=EN-GB>In all of the examples in this book we
  will use </span><span class=Example><span lang=EN-GB>: public</span></span><span
  lang=EN-GB>, but private and protected are available as options and outside
  our scope.</span></p>
  <p class=TableText><span lang=EN-GB>Using this for, so-called public
  inheritance, makes the class in the definition substitutable for the base
  class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>base class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class used as part of the definition of
  another class, specifically in an inheritance relationship. All of a base
  class becomes part of the derived class. Whether what comes from the base
  class is available to the derived class depends on the whether the thing in
  question (method or attribute) is declared to be public, protected or
  private. Private data, for example, is part of the overall structure but a
  derived class cannot directly access it.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>child class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>In an inheritance relationship, it is the
  class that is defined in terms of another class. A child class knows its
  parent (or base class). The reverse is not true.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>communication diagram</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A type of UML diagram that shows objects,
  connections between objects and interactions, or message flows. Before UML
  2.0, this was called a collaboration diagram.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>compile-time type</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The type of a variable that can be
  determined strictly looking at the source code. It is independent of the
  order of execution (run time information).</span></p>
  <p class=TableText><span lang=EN-GB>The compile-time type limits what is
  available to be used. Only things in the public interface of the compile-time
  type are available to be used by code.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>create</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A special method used on UML diagrams. It
  typically suggests the execution of a constructor. This is a standard
  convention on dynamic diagrams in UML, which includes sequence and
  communication diagrams.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>delete</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Delete is somewhat analogous to free in C
  with several key differences.</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>It is built into the
  language and it is known as the delete operator. Whereas free() is standard
  function in a library.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>If delete is used on a
  pointer to an object, e.g., <span class=Example>Die</span>*, it will
  automatically call a destructor. If it instead points to a raw time, then
  there is no destructor to call.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>There are three forms but
  I only use 1 in this book. The three forms are delete, delete[] and delete().
  The second and third form are array delete and placement delete.</p>
  <p class=TableText><span lang=EN-GB>In C++ you should use new for all
  allocation and delete for all deallocation. Mixing new with malloc is not
  defined. Using delete on something allocated with malloc or free on something
  allocated with new is also not defined. It’s easy to predict what will
  typically happen, but the standard says the results are undefined.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>delete versus free</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>See the discussion on delete.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dependency injection</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Making it possible for a client class to
  provide dependent objects. For example, the </span><span class=Example><span
  lang=EN-GB>DiceGame</span></span><span lang=EN-GB> requires two </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>* for its
  constructor, so its dependent objects must be provided.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>derived class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A class that has a parent or base class. </span><span
  class=Example><span lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> is an
  example of a derived class. This is a synonym for child class and subclass.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dynamic allocation</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Using </span><span class=Example><span
  lang=EN-GB>malloc</span></span><span lang=EN-GB> or </span><span
  class=Example><span lang=EN-GB>new</span></span><span lang=EN-GB> are
  examples of dynamic allocation. Acquiring space for data at runtime rather
  than pre-allocating at compile time.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dynamic binding</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Selection of a method at runtime rather
  than compile-time. In C++, virtual methods invoked through pointers or
  references are dynamically bound rather than statically bound.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dynamic type</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A pointer or reference to a class or
  struct can in fact point (or refer to) an object of its particular type or
  any class or structure publicly derived from that structure. For example, </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>* can
  legally point to either a </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>* or a </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB>*.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>heap</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A region of memory used for dynamic
  allocation. Things created with </span><span class=Example><span lang=EN-GB>new</span></span><span
  lang=EN-GB> (or </span><span class=Example><span lang=EN-GB>malloc</span></span><span
  lang=EN-GB>) are put on the heap rather than the stack. Things placed on the
  heap remain there until they are explicitly removed using </span><span
  class=Example><span lang=EN-GB>delete</span></span><span lang=EN-GB> (or </span><span
  class=Example><span lang=EN-GB>free</span></span><span lang=EN-GB> if </span><span
  class=Example><span lang=EN-GB>malloc</span></span><span lang=EN-GB> was
  used). The heap is also cleared when a program terminates.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>inheritance</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A relationship between classes. A base
  class serves as part of another class’ definition. All structural parts of
  the base class are in the derived class. Accessibility is determined by
  whether the thing in particular is public, protected or private. Items that
  are protected are available for derived classes. Things that are private are
  there, but not available for access.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>interface</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>C++ does not support interfaces directly.
  An interface represents a concept that describes behaviour but, provides no
  implementation for that behaviour.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>message</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>When a client makes a request of an
  object, is sends the target object a message. A message gets turned into a
  method at some point. In C++, that translation can be done at compile time or
  runtime. If the target is an object, then the determination is done at
  compile time. If the target is a pointer or reference to an object, then the
  determination is done at runtime if the message is virtual or compile time if
  the method is non-virtual.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>method</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A synonym for member function. A method
  is a behaviour of an object. A class declares a number of methods, some
  virtual, others non-virtual. Methods that are declared virtual can be
  overridden by sub-classes.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>new</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A keyword in C++, it provides a mechanism
  for allocating memory at runtime rather than compile time. Whereas malloc()
  is standard function in a library, new is a built-in operator.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>new versus malloc</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>When new is used to create an object, the
  compiler automatically calls a constructor. The sequence of steps for new
  used on an object:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Allocate an
  appropriately-sized chunk of memory.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Call the constructor to
  initialize the memory.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Return the address of the
  allocated memory.</p>
  <p class=TableText><span lang=EN-GB>Unlike new, malloc skips the middle step.
  There are three forms of new: new, new[], new(). The second and third forms
  are called array new and placement new, respectively. These forms are out of
  scope for this book.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>non-virtual destructor</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>By default, destructors are non-virtual.
  If a class may serve as a base class and it is possible that derived classes
  might perform dynamic memory allocation, then it is a good idea to make
  base-class destructors virtual. There are several conditions required to make
  a memory leak happen, but it is possible.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>override</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Method overriding is where a derived
  class replaces an implementation of a virtual base-class method suitable for
  its purposes. We have one explicit example of this where the </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB>
  method of </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB> returns a predictable result.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>parent class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Synonym for base class or superclass.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>polymorphism</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Pithy: same message, different method.
  That is, the same message sent to multiple objects results in different
  methods being executed based on which object receives a message. For example,
  sending </span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> to a </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> object results in the most recent roll value (or 1 if the die has
  not been rolled) to be returned. Whereas, sending </span><span class=Example><span
  lang=EN-GB>faceValue</span></span><span lang=EN-GB> to a </span><span
  class=Example><span lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> will
  always return the value passed into its constructor.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>request</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A synonym for message.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>response</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A synonym for method.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>run-time type</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The actual type of an object at program
  execution time. A pointer or reference to an object in C++ can point to or
  refer to a publicly derived subclass at runtime.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>stack</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>AKA program stack. The place where local
  variables are automatically stored by the compiler. A variable on the stack
  lives as long as the block of code containing that variable lives. Variables
  on the stack automatically go away when a method or function returns. If a
  variable is a non-primitive, then its destructor is also called.</span></p>
  <p class=TableText><span lang=EN-GB>Be careful here. Remember that pointers
  and references are primitive types. So, for example, a pointer to a die on
  the stack, when it goes away, does not result in a destructor call.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>static type</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Same as compile-time type. It is the type
  of a variable known to the compiler.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>stub</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB> is an example of a stub class. It is a particular kind of test
  double that has a fixed value. You can think of a stub as a “snapshot in
  time.”</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>sub class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Synonym for derived class or child class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>super class</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Synonym for base class or parent class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>test double</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A place-holder for a real object used to
  put some part of a test under control. We created </span><span class=Example><span
  lang=EN-GB>LoadedDie</span></span><span lang=EN-GB> as a test double for </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> to make
  sure we are able to test all of the rules of the </span><span class=Example><span
  lang=EN-GB>DiceGame</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>test isolation</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>There are several interpretations. Tests
  should not impact each other. However, in this section we introduce the
  possibility of using test doubles by using dependency injection to fully
  control what one particular test is doing.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>virtual</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A keyword added to member function
  declarations. A virtual method can be overridden by subclasses. If that
  method is invoked through a pointer or reference to a base class, the correct
  method will be selected at runtime based on the dynamic type of the object.
  That is, if </span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> is sent to a </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>, then </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>::</span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> is called, whereas if </span><span class=Example><span
  lang=EN-GB>faceValue</span></span><span lang=EN-GB> is sent to a </span><span
  class=Example><span lang=EN-GB>LoadedDie</span></span><span lang=EN-GB>, then
  </span><span class=Example><span lang=EN-GB>LoadedDie</span></span><span
  lang=EN-GB>::</span><span class=Example><span lang=EN-GB>faceValue</span></span><span
  lang=EN-GB> is invoked.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>virtual destructor</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Destructors for base classes should be
  declared virtual. If they are not, there’s a possibility of a memory leak, as
  demonstrated in </span><span lang=EN-GB>Experiment in Failure</span><span
  lang=EN-GB> stating on page </span><span lang=EN-GB><span>70</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>virtual method</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A method declared virtual can be
  overridden by subclasses. See virtual above.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>virtual method override</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Subclasses wishing to replace a
  base-class’ method with its own implementation override a virtual method
  declared in a base class.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609125"><span style='font-weight:normal'>3.16<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What’s
coming up?</a></h2>

<p class=BodyText>In this section we will revisit:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refactoring – specifically Extract Class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Dependency Inversion Principle</span></p>

<p class=BodyText>We will additionally improve memory management by using
std::shared_ptr and then have a first look at a design pattern called the
Abstract Factory pattern.</p>

<h3><a name="_Toc202609126"><span>3.16.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Remember Cup class?</a></h3>

<p class=BodyText>Remember some time ago the mention of a Cup class:</p>

<p class=BodyText><img border=0 width=380 height=122 id="_x0000_i1034"
src="CppAndOOdTheLeastYouNeedToKnow_files/image013.gif"></p>

<p class=BodyText>Now it is time to revisit Cup. The code already exists, it
just happens to be in the <span class=Example>DiceGame</span>. This burdens the
implementation of <span class=Example>DiceGame</span> with both business rules
as well as knowing how to store, roll, and deallocate multiple <span
class=Example>Die</span> objects.</p>

<p class=BodyText>To fix this, you are going to apply an “Extract Class”
refactoring. That is, there’s a class in the middle of another, and you are
going to make it its own class.</p>

<h3><a name="_Toc202609127"><span>3.16.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Refactoring: Definition</a></h3>

<p class=BodyText>You have already performed some refactoring. Even so, it’s
worth remembering just what refactoring means: Changing the structure of a
solution without changing its behavior.</p>

<p class=BodyText>In this class, you’ll move code from <span class=Example>DiceGame</span>
into a new class called Cup.</p>

<h3><a name="_Toc202609128"><span>3.16.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Updated Cup Header</a></h3>

<p class=BodyText>Here is a header file that captures the Cup-related concepts
from the <span class=Example>DiceGame</span> class. Notice that this is a new
file. You are not yet making changes to existing code.</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample>#ifndef CUP_H</p>

<p class=CodeExample>#define CUP_H</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class Die;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class Cup {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   <span style='color:#7F0055'>typedef</span>
std::vector&lt;Die*&gt; DiceCollection;</p>

<p class=CodeExample>   <span style='color:#7F0055'>typedef</span>
DiceCollection::iterator iterator;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   Cup(Die *d1, Die *d2);</p>

<p class=CodeExample>   ~Cup();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> roll();</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> total();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   DiceCollection <span style='color:#0000C0'>dice</span>;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>This code mirrors the code in <span class=Example>DiceGame</span>.
So far, there is nothing new.</p>

<h3><a name="_Toc202609129"><span>3.16.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Updated Cup Source</a></h3>

<p class=BodyText>The source code can be copied from <span class=Example>DiceGame</span>
as well:</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&quot;Cup.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&quot;Die.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>Cup::Cup(Die *d1, Die *d2) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>dice</span>.push_back(d1);</p>

<p class=CodeExample>   <span style='color:#0000C0'>dice</span>.push_back(d2);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>Cup::~Cup() {</p>

<p class=CodeExample>   for(iterator i = <span style='color:#0000C0'>dice</span>.begin();
i != <span style='color:#0000C0'>dice</span>.end(); ++i)</p>

<p class=CodeExample>      delete *i;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>void Cup::roll() {</p>

<p class=CodeExample>   for(iterator i = <span style='color:#0000C0'>dice</span>.begin();
i != <span style='color:#0000C0'>dice</span>.end(); ++i)</p>

<p class=CodeExample>      (*i)-&gt;roll();</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int Cup::total() {</p>

<p class=CodeExample>   int sum = 0;</p>

<p class=CodeExample>   for(iterator i = <span style='color:#0000C0'>dice</span>.begin();
i != <span style='color:#0000C0'>dice</span>.end(); ++i)</p>

<p class=CodeExample>       sum += (*i)-&gt;faceValue();</p>

<p class=CodeExample>   return sum;</p>

<p class=CodeExample>}</p>

<p class=BodyText>As with the header file, there’s nothing explicitly new in
this code. The one big difference is that the original code (still) has this
coupled for loop in <span class=Example>DiceGame</span>::play:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> DiceGame::play() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> sum = 0;</p>

<p class=CodeExample>   <span style='color:#7F0055'>for</span>(iterator </p>

<p class=CodeExample><span style='color:#7F0055'>      </span>iter = <span
style='color:#0000C0'>theDice</span>.begin(); iter != <span style='color:#0000C0'>theDice</span>.end();
++iter) {</p>

<p class=CodeExample>      (*iter)-&gt;roll();</p>

<p class=CodeExample>      sum += (*iter)-&gt;faceValue();</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   ...</p>

<p class=BodyText>This look both rolls the dice and calculates the total. The
Cup’s implementation of roll() and total() have had this one loop split into
two loops. In fact, Martin Fowler calls this a “split loop” refactoring. The
original code unnecessarily coupled rolling and calculating the total.</p>

<h3><a name="_Toc202609130"><span>3.16.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Getting to Compiling</a></h3>

<p class=BodyText>Before changing any of the old production code, get the
header file and source file for Cup created and compiling. Get you code back to
Green.</p>

<h3><a name="_Toc202609131"><span>3.16.6<span style='font:7.0pt "Times New Roman"'>
</span></span>Updating DiceGame</a></h3>

<p class=BodyText>Now it is time to change the <span class=Example>DiceGame</span>
to use the new code. However, rather than just changing all of the code in
place, these next steps use a technique often called parallel development. The
goal is to get the code as close to complete as possible so that the amount of
time that your automated tests fail is as small as possible.</p>

<h4>Updating class definition</h4>

<p class=BodyText>First, we’ll add some kind of “handle” to a Cup. You have
three general options (right now):</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A full Cup</span></p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   Cup cup;</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A pointer to a Cup</span></p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   Cup *cup;</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A reference to a Cup</span></p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   Cup &amp;cup;</p>

<p class=BodyText>All three will work but there are some advantages and
disadvantages:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A full Cup will be automatically instantiated
correctly. Its destructor will be called automatically as well. However,
there’s no chance for dynamic binding, so testing is a bit more difficult.
Also, to hold a full Cup, the </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB> header file will have to include the Cup header file. Including
header files is relatively expensive.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A pointer is not automatically instantiated or
released. Some code somewhere will have to call new and delete or something
more convoluted. However, you do not have to include the header file of Cup in
the header file of </span><span class=Example><span lang=EN-GB>DiceGame</span></span><span
lang=EN-GB>. A pointer also allows for the possibility of virtual methods to
play a role in the game.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A reference has nearly the same characteristics as a
pointer. The primary difference is that a reference must be initialized, which
will require you to use a member-wise initialization list. Once initialized, it
can never point to anything else.</span></p>

<p class=BodyText>My preference for testability leads me to the second two
options. References are OK as attributes, but I typically reserve them for
parameters and return values. For this solution, therefore, I’ll go with a
pointer. With that in mind, here’s an updated <span class=Example>DiceGame</span>
using parallel development:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:silver'> </span>#pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>#ifndef DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>#define DICEGAME_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>class Die;</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>#include <span
style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>class Cup;</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span></p>

<p class=CodeExample><span class=CodeLineNumber>09: </span>class DiceGame {</p>

<p class=CodeExample><span class=CodeLineNumber>10: </span>public:</p>

<p class=CodeExample><span class=CodeLineNumber>11: </span>   <span
style='color:#7F0055'>typedef</span> std::vector&lt;Die*&gt; DiceCollection;</p>

<p class=CodeExample><span class=CodeLineNumber>12: </span>   <span
style='color:#7F0055'>typedef</span> DiceCollection::iterator iterator;</p>

<p class=CodeExample><span class=CodeLineNumber>13: </span></p>

<p class=CodeExample><span class=CodeLineNumber>14: </span>   DiceGame(Die *d1,
Die *d2);</p>

<p class=CodeExample><span class=CodeLineNumber>15: </span>   <span
style='color:#7F0055'>virtual</span> ~DiceGame();</p>

<p class=CodeExample><span class=CodeLineNumber>16: </span></p>

<p class=CodeExample><span class=CodeLineNumber>17: </span>   <span
style='color:#7F0055'>void</span> play();</p>

<p class=CodeExample><span class=CodeLineNumber>18: </span>   <span
style='color:#7F0055'>int</span> getBalance() <span style='color:#7F0055'>const</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>19: </span></p>

<p class=CodeExample><span class=CodeLineNumber>20: </span>private:</p>

<p class=CodeExample><span class=CodeLineNumber>21: </span>   DiceCollection <span
style='color:#0000C0'>theDice</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>22: </span>   Cup *<span
style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>23: </span>   <span
style='color:#7F0055'>int</span> balance;</p>

<p class=CodeExample><span class=CodeLineNumber>24: </span></p>

<p class=CodeExample><span class=CodeLineNumber>25: </span>private:</p>

<p class=CodeExample><span class=CodeLineNumber>26: </span>   DiceGame(<span
style='color:#7F0055'>const</span> DiceGame&amp;);</p>

<p class=CodeExample><span class=CodeLineNumber>27: </span>   DiceGame&amp;
operator=(<span style='color:#7F0055'>const</span> DiceGame&amp;);</p>

<p class=CodeExample><span class=CodeLineNumber>28: </span>};</p>

<p class=CodeExample><span class=CodeLineNumber>29: </span></p>

<p class=CodeExample><span class=CodeLineNumber>30: </span>#endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Forward declare the Cup class. This just
  tells the compiler that there is a class called </span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB> somewhere in the system.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>22</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Add a pointer to a Cup as member data.
  This only requires a forward declare because all pointers are primitive
  types, and therefore the compiler knows their size, which is necessary to
  calculate the size of a single instance of a </span><span class=Example><span
  lang=EN-GB>DiceGame</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>These changes will leave the code in a
compiling state and the tests still pass.</span></p>

<h4>Initial Updating of Method Definitions</h4>

<p class=BodyText>To introduce this new Cup into the <span class=Example>DiceGame</span>
eco system, we will update a few of the existing methods to use it as well as
the original vector.</p>

<p class=BodyText>First, the construction and destruction:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>#include <span
style='color:#2A00FF'>&quot;Cup.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>DiceGame::DiceGame(Die
*d1, Die *d2) : <span style='color:#0000C0'>cup</span>(0), <span
style='color:#0000C0'>balance</span>(0) {</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   <span
style='color:#0000C0'>theDice</span>.push_back(d1);</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>   <span
style='color:#0000C0'>theDice</span>.push_back(d2);</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>}</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>DiceGame::~DiceGame()
{</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>   for(iterator </p>

<p class=CodeExample><span class=CodeLineNumber>          </span>iter = <span
style='color:#0000C0'>theDice</span>.begin(); iter != <span style='color:#0000C0'>theDice</span>.end();
++iter)</p>

<p class=CodeExample><span class=CodeLineNumber>09: </span>      delete *iter;</p>

<p class=CodeExample><span class=CodeLineNumber>10: </span>   delete <span
style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>11: </span>}</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The code will be using Cup, so it must
  include Cup.h. Remember, Cup was forward declared in the header file. The
  source file includes it because it needs to know more about the class than
  the header file.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Initialize the cup pointer to 0. This is
  how you initialize pointers in C++, use 0; do not use NULL.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Delete the pointer held in the member
  data. Right now this pointer is 0. By definition, it is safe to delete a
  pointer initialized to 0, so this is safe.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>This change keeps the code compiling and
running. However, there’s a bit of an issue going any further. The destructor
in </span><span class=Example>DiceGame</span><span lang=EN-GB> calls delete on
the pointers passed into the constructor. If we add those same </span><span
class=Example>Die</span><span lang=EN-GB> pointers to the Cup, which also calls
delete, then the same address will be deleted twice. This is forbidden, or
rather undefined.</span></p>

<p class=BodyText><span lang=EN-GB>Here’s a quick experiment to convince
yourself that this is a bad idea:</span></p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>DiceGame::DiceGame(Die
*d1, Die *d2) </p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>   : <span
style='color:#0000C0'>cup</span>(<span style='color:#7F0055'>new</span> Cup(d1,
d2)), <span style='color:#0000C0'>balance</span>(0) {</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   <span
style='color:#0000C0'>theDice</span>.push_back(d1);</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>   <span
style='color:#0000C0'>theDice</span>.push_back(d2);</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>}</p>

<p class=BodyText>On line 5, construct a new Cup, passing in d1 and d2. This
will cause some kind of segmentation violation or some other undefined
behavior. It will fail in some way that will vary by your platform and by what
you have installed. In my particular situation I am using Eclipse and I have
Visual Studio installed, so I get a prompt to bring up the Visual Studio debugger
for this violation. On an XP installation without Visual Studio installed, I’ll
get a dialog saying that a program terminated and I’ll be given the option of
mailing a report somewhere.</p>

<p class=BodyText>However, this does suggest an unorthodox intermediate form.
Simply update the constructor as shown and the remove the code that releases
memory in the destructor:</p>

<p class=CodeExample>DiceGame::~DiceGame() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>delete</span> <span
style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>The Cup now owns that memory and its destructor releases it.</p>

<p class=BodyText><span lang=EN-GB>Make these two changes and your code should
be green.</span></p>

<p class=BodyText><span lang=EN-GB>At this point, if you update the </span><span
class=Example>DiceGame</span><span lang=EN-GB>::play method, then the original
solution, the </span><span class=Example>std::vector</span><span lang=EN-GB>,
won’t really be partaking in the solution:</span></p>

<p class=CodeExample><span style='color:#7F0055'>void</span> DiceGame::play() {</p>

<p class=CodeExample>   <span style='color:#0000C0'>cup</span>-&gt;roll();</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> sum = <span
style='color:#0000C0'>cup</span>-&gt;total();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#7F0055'>if</span> (sum &gt; 7)</p>

<p class=CodeExample>      ++<span style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample>   <span style='color:#7F0055'>if</span> (sum &lt; 7)</p>

<p class=CodeExample>      --<span style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Simply roll the cup and then get its total. Making this
change leaves bits of the previous solution:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the header file</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>include
of &lt;vector&gt;</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>two
typedefs</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>member
data called theDice</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the source file</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>include
of <span class=Example>Die</span>.h</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>call
to <span class=Example>push_back</span> in the constructor</p>

<p class=BodyText>Removing these bits results in the following <span
class=Example>DiceGame</span> header:</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> DICEGAME_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> DICEGAME_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class Cup;</p>

<p class=CodeExample>class Die;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class DiceGame {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   DiceGame(Die *d1, Die *d2);</p>

<p class=CodeExample>   <span style='color:#7F0055'>virtual</span> ~DiceGame();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> play();</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> getBalance() <span
style='color:#7F0055'>const</span>;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   Cup *<span style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> balance;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   DiceGame(<span style='color:#7F0055'>const</span>
DiceGame&amp;);</p>

<p class=CodeExample>   DiceGame&amp; operator=(<span style='color:#7F0055'>const</span>
DiceGame&amp;);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>And the final <span class=Example>DiceGame</span> source
file:</p>

<p class=CodeExample>#include &quot;DiceGame.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&quot;Cup.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>DiceGame::DiceGame(Die *d1, Die *d2)</p>

<p class=CodeExample>   : <span style='color:#0000C0'>cup</span>(new Cup(d1,
d2)), <span style='color:#0000C0'>balance</span>(0) {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>DiceGame::~DiceGame() {</p>

<p class=CodeExample>   delete <span style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>void DiceGame::play() {</p>

<p class=CodeExample>   <span style='color:#0000C0'>cup</span>-&gt;roll();</p>

<p class=CodeExample>   int sum = <span style='color:#0000C0'>cup</span>-&gt;total();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   if (sum &gt; 7)</p>

<p class=CodeExample>      ++<span style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample>   if (sum &lt; 7)</p>

<p class=CodeExample>      --<span style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>int DiceGame::getBalance() const {</p>

<p class=CodeExample>   return <span style='color:#0000C0'>balance</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice that these files are quite a bit smaller, which makes
sense since much of the work was dealing with the details of an <span
class=Example>std::vector</span>&lt;<span class=Example>Die</span>*&gt;, which
has been delegated to the Cup class.</p>

<p class=BodyText>Make these changes; get your solution back to green.</p>

<h3><a name="_Toc202609132"><span>3.16.7<span style='font:7.0pt "Times New Roman"'>
</span></span>What of the idiom?</a></h3>

<p class=BodyText>Remember the copy constructor and assignment operator? Should
you hide these two methods? In fact, if you do not hide them, you could end up
with serious problems. This code would cause the same <span class=Example>Die</span>
object to get deleted multiple times:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>Die *d1 = new Die;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>Die *d2 = new Die;</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>Cup c1(d1, d2);</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>Cup c2(c1);</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>Cup c3 = c1;</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>Cup c4(0, 0);</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>c4 = c1;</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a die, nothing new here.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Ibid.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a cup called c1, it holds onto
  (and therefore owns) d1 and d2.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a cup called c2, using the
  compiler-provided copy constructor. c2 will hold a copy of d1 and d2 and it
  will think that it owns d1 and d2. Now there are two objects, c1 and c2 that
  own d1 and d2. The second cup will get destroyed first, and then the first
  cup will get destroyed. When that happens you’ll see some kind of serious
  program failure.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Adding insult to injury, construct
  another cup called c3 using the copy constructor. This line is equivalent to
  line 04, just a different syntax. You can distinguish this from assignment
  (line 07) because this line involves a variable definition. Oh, now three
  objects think they own d1 and d2.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a cup called c4, it initially points
  to two non-die objects. This will work, but don’t roll the cup, or the
  program fails.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Assign c1 to c4. This uses the
  compiler-provided assignment operator. Now c4 will think it owns d1 and d2.
  So there are 4 objects, all taking responsibility for releasing the same
  memory. This is a crash waiting to happen.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>How can you fix this? First, make the
assignment operator and copy constructor private:</span></p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   Cup(<span style='color:#7F0055'>const</span> Cup&amp;);</p>

<p class=CodeExample>   Cup&amp; operator=(<span style='color:#7F0055'>const</span>
Cup&amp;);</p>

<p class=BodyText>Another thing you can do is coming up; use an
std::shared_ptr. Even so, unless you have a compelling reason to do otherwise,
make these methods private. If you do so, then lines 04, 05 and 07 will not
compile.</p>

<h3><a name="_Toc202609133"><span>3.16.8<span style='font:7.0pt "Times New Roman"'>
</span></span>A Logical Fix to Cup</a></h3>

<p class=BodyText>Remember <span class=Example>faceValue</span> on <span
class=Example>Die</span>? It is constant. The Cup’s analog, total, is not the
same. It could do with a change:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> total();</p>

<p class=BodyText>This method does not change the Cup, so it should be <span
class=Example>const</span>:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> total() const;</p>

<p class=BodyText>Of course, to make this change, you will have to change the
method definition:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Cup::total() const
{</p>

<p class=CodeExample>...</p>

<p class=CodeExample>}</p>

<p class=BodyText> If you try just this, your code will not compile and the
error probably won’t give you much of a clue what’s wrong with your code.
Here’s the compilation error from my machine (yours may vary):</p>

<p class=CodeExample><span style='font-size:16.0pt;font-family:"Courier New"'>..\C</span>up.cpp:
In member function 'int Cup::total() cons<span style='font-size:16.0pt;
font-family:"Courier New"'>t':</span></p>

<p class=CodeExample><span style='background:red'>..\Cup.cpp:22: error:
conversion from '__gnu_cxx::__normal_iterator&lt;Die* const*,
std::vector&lt;Die*, std::allocator&lt;Die*&gt; &gt; &gt;' to non-scalar type
'__gnu_cxx::__normal_iterator&lt;Die**, std::vector&lt;Die*,
std::allocator&lt;Die*&gt; &gt; &gt;' requested</span></p>

<p class=BodyText>Containers have a nested typedef for iterator. This defines a
type you use when iterating over the contents of a collection. However, adding <span
class=Example>const</span> to the method makes the current object <span
class=Example>const</span>. When this happens, the collection is considered <span
class=Example>const</span>. The iterator is for non-<span class=Example>const</span>
collections. However, the standard collections have a second nested typedef, <span
class=Example>const</span>_iterator. So you can make the following changes to
get this back to compiling and working:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>class Cup {</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>public:</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   <span
style='color:#7F0055'>typedef</span> std::vector&lt;Die*&gt; DiceCollection;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>   <span
style='color:#7F0055'>typedef</span> DiceCollection::iterator iterator;</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>   <span
style='color:#7F0055'>typedef</span> DiceCollection::const_iterator
const_iterator;</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03, 04</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The original nested typedefs.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A new nested typedef for a </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB>_iterator.
  This is the thing you’ll use in any methods denoted as </span><span
  class=Example><span lang=EN-GB>const</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>The total() method definition changes to use
</span><span class=Example>const</span><span lang=EN-GB>_iterator:</span></p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>int Cup::total()
const {</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>   <span
style='color:#7F0055'>int</span> sum = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   <span
style='color:#7F0055'>for</span>(const_iterator i = <span style='color:#0000C0'>dice</span>.begin();
i != <span style='color:#0000C0'>dice</span>.end(); ++i)</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>       sum +=
(*i)-&gt;faceValue();</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>   <span
style='color:#7F0055'>return</span> sum;</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>}</p>

<p class=BodyText><span lang=EN-GB>&nbsp;</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Switch from </span><span class=Example><span
  lang=EN-GB>iterator</span></span><span lang=EN-GB> to </span><span
  class=Example><span lang=EN-GB>const_iterator</span></span><span lang=EN-GB>,
  and viola the code compiles and passes.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609134"><span style='font-weight:normal'>3.17<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What
is going on with const?</a></h2>

<p class=BodyText>The <span class=Example>const</span> keyword says something
is <span class=Example>const</span>. What exactly is <span class=Example>const</span>
depends on where the <span class=Example>const</span> is located. Here are the
typical examples you’ll see under a discussion of <span class=Example>const</span>:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Code</span></p>
   </td>
   <td width=293 valign=top style='width:293.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>int *pi = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Just a pointer to an integer.</span></p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> int *pci = 0;</span></p>
  <p class=TableText><span lang=EN-GB>int </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> *pci = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A pointer to an integer constant. That
  is, the pointer can point anywhere, and where it points to can change, but
  you cannot change the underlying integer to which it points. These are
  equivalent definitions.</span></p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>int *</span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> cpi = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A constant pointer to an integer. That
  is, this pointer will always point to the same place in memory (0 in this
  case). The value pointed to can be changed (if it didn’t point to 0 that is).</span></p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> int * </span><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> cpic = 0;</span></p>
  <p class=TableText><span lang=EN-GB>int </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> * </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> cpic = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A constant pointer to a constant integer.
  Nothing can change, neither the value pointed to nor the address in memory.
  These are equivalent definitions.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>This is a typical introduction to this subject, but it’s very
hard to figure out how to remember all of these details. I learned a secret
reading something by Andrew Koenig called the right-left rule. The basics to
reading declarations and definitions goes something like this:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Find the name – that’s the one potential hard part.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Once you have the name, read right until either:</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>You’ve
reached the end of the statement, a ; – or an = works the same way </p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>You
have one more open parentheses ) than close parentheses (</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Now read to the left until either:</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>If
you just found a ; going right, read all the way to the left</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>If
you just found an unmatched ) going right, read to the matching (.</p>

<p class=BodyText>Here are those definitions read using this rule:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Code</span></p>
   </td>
   <td width=293 valign=top style='width:293.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>int *pi = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The name is pi. Going to the right
  there’s an =, so read all the way to the left, which gives pi is a pointer to
  an int.</span></p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> int *pci = 0;</span></p>
  <p class=TableText><span lang=EN-GB>int </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> *pci = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The name is pci. Going to the right,
  there’s an =, so read all the way to the left, which gives either:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>pointer to an integer
  constant</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>pointer to a constant
  integer</p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>int *</span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> cpi = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The name is cpi. Going to the right is an
  =, so now reading to the left, cpi is a constant pointer to an integer.</span></p>
  </td>
 </tr>
 <tr>
  <td width=144 valign=top style='width:2.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> int * </span><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> cpic = 0;</span></p>
  <p class=TableText><span lang=EN-GB>int </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> * </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> cpic = 0;</span></p>
  </td>
  <td width=293 valign=top style='width:293.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The name is cpic. Going to the right is
  an =, so now reading back to the left:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>constant pointer to an
  int that is constant</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>constant pointer to a
  constant int</p>
  </td>
 </tr>
</table>

<p class=BodyText>Those are relatively simple examples. Here’s something that
is a bit more complex:</p>

<p class=CodeExample><span class=CodeLineNumber>18: </span>   <span
style='color:#7F0055'>int</span> getBalance() <span style='color:#7F0055'>const</span>;</p>

<p class=BodyText>The name is getBalance(), what of the rest?</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Going to the right is (, the rules don’t say anything
about that, but it means that getBalance appears to be a function.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Continuing right, there’s a ). However, that matches
the (, so getBalance is a function that takes no arguments. You don’t start
reading left because the () are balanced, there’s not an extra close parentheses.
</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Continuing right, is </span><span class=Example><span
lang=EN-GB>const</span></span><span lang=EN-GB>. So this is a method on
something that is </span><span class=Example><span lang=EN-GB>const</span></span><span
lang=EN-GB> – the object, it turns out.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Continuing right, is the ;, so finish to the left;</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Going left is int, which is the return type of the
method.</span></p>

<p class=BodyText>So getBalance is a method taking no parameters, which is <span
class=Example>const</span> and it returns an int. So what does the <span
class=Example>const</span> mean?</p>

<h4>The current Object</h4>

<p class=BodyText>How does any method know “the current object”? For example:</p>

<p class=CodeExample>Die d1;</p>

<p class=CodeExample>Die d2;</p>

<p class=CodeExample>d1.roll();</p>

<p class=CodeExample>d2.roll();</p>

<p class=BodyText>The roll method sets the value of a die, but there’s only one
roll method and in this example there are two <span class=Example>Die</span>
objects. How does this work?</p>

<p class=BodyText>Here’s a key to thinking about C++, everything in C++ can be,
and often is, represented in C. That is, everything  you write in C++ can be
translated to structs, functions and pointers. </p>

<p class=BodyText>The member function <span class=Example>Die</span>::roll()
appears to take no arguments, but in fact it takes one argument, the current
object. Logically there is a method whose name includes both roll and the name
of the class. Let’s call this method <span class=Example>Die</span>__roll. This
method takes one argument, a pointer to a die. That pointer is called “this”,
so here’s a more complete function declaration<a href="#_ftn16" name="_ftnref16"
title=""><span class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[16]</span></span></span></a>:</p>

<p class=CodeExample>void Die__roll(Die *this);</p>

<p class=BodyText>This is not quite correct, because in a method, it is not
possible to change to which object the so-called this pointer points to, so it
should be a constant pointer:</p>

<p class=CodeExample>void Die__roll(Die *const this);</p>

<p class=BodyText>Using the right-left rule to read this: “this” is a constant
pointer to a <span class=Example>Die</span>.</p>

<p class=BodyText>In the body of the roll method is the code assigns to value:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> Die::roll() {</p>

<p class=CodeExample>   ...</p>

<p class=CodeExample>   <span style='color:#0000C0'>value</span> =
uniform(engine);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This is equivalent to the following<a href="#_ftn17"
name="_ftnref17" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[17]</span></span></span></a>:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> Die::roll() {</p>

<p class=CodeExample>   ...</p>

<p class=CodeExample>   this-&gt;<span style='color:#0000C0'>value</span> =
uniform(engine);</p>

<p class=CodeExample>}</p>

<p class=BodyText>So logically (and in some cases nearly literally), the
compiler converts the simple example above to:</p>

<p class=CodeExample>Die d1;</p>

<p class=CodeExample>Die d2;</p>

<p class=CodeExample>Die__roll(&amp;d1);</p>

<p class=CodeExample>Die__roll(&amp;d2);</p>

<p class=BodyText>So now it is hopefully clear how methods know the current
object. It’s passed in as a hidden parameter. In fact, that’s what makes a
method a method, a hidden first parameter.</p>

<h4>So, again, what does a const method do?</h4>

<p class=BodyText>Consider the method <span class=Example>faceValue</span>:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Die::faceValue() <span
style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>value</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>What’s constant in this? The current object, or the this
pointer. Here’s a logical rewrite:</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Die__faceValue(<span
style='color:#7F0055'>const </span>Die *<span style='color:#7F0055'>const this</span>) 
{</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>value</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>So this is a constant pointer (which is always is) to a <span
class=Example>Die</span> that is itself constant (which it normally is not).
What this does is prevents changes to the current object. It’s still possible
to make changes. The object is not physically constant, but you have to do
something special in modern compilers to remove the <span class=Example>const</span>
characteristic<a href="#_ftn18" name="_ftnref18" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[18]</span></span></span></a>.</p>

<h2><a name="_Toc202609135"><span style='font-weight:normal'>3.18<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Taking
Small Steps, Recap</a></h2>

<p class=BodyText>This started off as an exercise to reduce the complexity in <span
class=Example>DiceGame</span> by refactoring. Specifically, you extracted a
class out of <span class=Example>DiceGame</span> and called in Cup. In general,
refactoring starts with creating new code rather than changing existing code.
You can certainly change code in place, but that is a bit riskier. Taking small
steps and keeping your code green leaves you in a better state to be
interrupted. Since a modern work day involves interruption, this style of code
modification can make your daily live a touch easier.</p>

<p class=BodyText>The steps for extracting class are:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create a new class by copying existing code</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-GB>Create a standard header file</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-GB>Create the source file</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-GB>Get to compiling</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add the Cup into the </span><span class=Example><span
lang=EN-GB>DiceGame</span></span><span lang=EN-GB> using parallel development</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Get
as much changed in <span class=Example>DiceGame</span> as you can manage while
keeping the solution green</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Finally
make the plunge</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Clean
up after the change</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Quick review</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>We
made the copy constructor and assignment operator private</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>We
made total() <span class=Example>const</span></p>

<p class=BodyText>In general, refactoring starts with creation rather than
making inline changes. You do not have to do this, but if you change code first
and get to a non-compiling state, when you get interrupted, and you will get interrupted,
you might lose your train of thought. If you leave the code compiling and the
tests passing most of the time, getting interrupted means you still have a
working system with some possibly unnecessary code.</p>

<p class=BodyText>Any reasonably mature code base is inconsistent, contains
unnecessary code and is in a constant state of decay. That’s the reality of any
successful system. So if you happen to get interrupted but tests are still
passing, then you’ve simply added a little white noise until you get back to the
work.</p>

<h2><a name="_Toc202609136"><span style='font-weight:normal'>3.19<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Memory
Allocation</a></h2>

<p class=BodyText>How can clients of <span class=Example>DiceGame</span>, or
Cup for that matter, know that these classes expect a dynamically allocated
pointer? Consider the constructors for <span class=Example>DiceGame</span>:</p>

<p class=CodeExample>class DiceGame {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   DiceGame(Die *d1, Die *d2);</p>

<p class=BodyText>Either of these examples successfully creates a <span
class=Example>DiceGame</span>:</p>

<p class=CodeExample>Die d1;                           Die *d1 = new Die;</p>

<p class=CodeExample>Die d2;                           Die *d2 = new Die;</p>

<p class=CodeExample>DiceGame troubleAhead(&amp;d1, &amp;d2);    DiceGame
noWorries(d1, d2);</p>

<p class=BodyText>The one on the left will lead to problems at the time of
destruction and there’s no good way to with the current API to make that clear.
You could use a nested typedef such as:</p>

<p class=CodeExample>class DiceGame {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   <span style='color:#7F0055'>typedef</span> Die*
dyno_die;</p>

<p class=CodeExample>   DiceGame(dyno_die d1, dyno_die d2);</p>

<p class=BodyText>This is better because it documents an expectation and it
does so in a way that must compile. Can we do better? Can we also clean up the
implementation and take care of the allocation a bit more automatically?</p>

<h3><a name="_Toc202609137"><span>3.19.1<span style='font:7.0pt "Times New Roman"'>
</span></span>std::shared_ptr</a></h3>

<p class=BodyText>There are classes in the standard library that help with
allocation. We’ll have a look at one such class, though there are several. As
with the rest of the book, let’s start with a failing test:</p>

<h4>MemoryLeakDemonstration.cpp</h4>

<p class=CodeExample><span class=CodeLineNumber>01: </span>#include
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>TEST_GROUP(MemoryLeakDemonstration)
{</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>};</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>TEST(MemoryLeakDemonstration,
ThisLeaks) {</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>   int *bad(new int);</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>}</p>

<p class=BodyText>This allocates memory on the heap on line 07. There’s no
other code that releases the memory, and in fact without doing something with
writing a custom memory allocation solution, there no way to recover after the
test terminates. This is what memory logically looks like over time:</p>

<p class=BodyText><img border=0 width=397 height=128 id="_x0000_i1035"
src="CppAndOOdTheLeastYouNeedToKnow_files/image014.gif"></p>

<p class=BodyText>The problem is that the variable is a raw type and raw types
don’t have constructors. What we need to do is convert the raw type into a
non-raw type so that the pointer will have delete called automatically when the
method terminates. Here’s a similar test, but this one passes:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>#include <span
style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>#include
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>TEST_GROUP(MemoryLeakDemonstration)
{</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>};</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span></p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>TEST(MemoryLeakDemonstration,
ThisWorks) {</p>

<p class=CodeExample><span class=CodeLineNumber>09: </span>   std::shared_ptr&lt;int&gt;
good(new int);</p>

<p class=CodeExample><span class=CodeLineNumber>10: </span>}</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the header file for
  std::shared_ptr&lt;&gt;. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a shared pointer instead of a raw
  pointer. Since this is a non-raw type, it has a destructor, which will get
  called when </span><span class=Example><span lang=EN-GB>good</span></span><span
  lang=EN-GB> goes out of scope.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Notice that the template parameter type
  is </span><span class=Example><span lang=EN-GB>&lt;int&gt;</span></span><span
  lang=EN-GB> and not </span><span class=Example><span lang=EN-GB>&lt;int*&gt;</span></span><span
  lang=EN-GB>. The class is designed to work with pointers to dynamically
  allocated memory. So a </span><span class=Example><span lang=EN-GB>std::shared_ptr&lt;int&gt;</span></span><span
  lang=EN-GB> is a shared pointer to an integer. The name of the class suggests
  it is a pointer already. The second example, std::shared_ptr&lt;int*&gt; is
  valid, but it is a shared pointer to a pointer to an </span><span
  class=Example><span lang=EN-GB>int</span></span><span lang=EN-GB>. It’s like
  an </span><span class=Example><span lang=EN-GB>int**</span></span><span
  lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>The std::shared_ptr class maintains a count
of the number of times the pointer is shared. The deallocation only happens if
the count goes to zero. Here’s what memory logically looks like over time: </span></p>

<p class=BodyText><img border=0 width=295 height=128 id="_x0000_i1036"
src="CppAndOOdTheLeastYouNeedToKnow_files/image015.gif"></p>

<h3><a name="_Toc202609138"><span>3.19.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Fixing DiceGame</a></h3>

<p class=BodyText>With this in mind, now you can fix <span class=Example>DiceGame</span>.
Here’s the updated header file:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>#include <span
style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>class DiceGame {</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>   ...</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>private:</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>   std::shared_ptr&lt;Cup&gt;
<span style='color:#0000C0'>cup</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>   ...</p>

<p class=CodeExample><span class=CodeLineNumber>09: </span>};</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the header file for
  std::shared_ptr&lt;&gt;. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Change the cup member data to be a shard
  pointer instead of a raw pointer. This will make calling delete unnecessary;
  it won’t compile either. </span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>The source file needs one change for this to
compile and work:</span></p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>DiceGame::~DiceGame()
{</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>}</p>

<p class=BodyText>Delete the body of the destructor. The std::shared_ptr takes
care of memory deallocation, so you can (and must) remove it.</p>

<p class=BodyText>The design of the class is meant to make it look just like a
pointer.</p>

<p class=BodyText>Notice the play method is unchanged:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> DiceGame::play() {</p>

<p class=CodeExample>   <span style='color:#0000C0'>cup</span>-&gt;roll();</p>

<p class=CodeExample>   <span style='color:#7F0055'>int</span> sum = <span
style='color:#0000C0'>cup</span>-&gt;total();</p>

<p class=CodeExample>   ...</p>

<p class=CodeExample>}</p>

<p class=BodyText>How does this work?</p>

<h4>Operator Overloading</h4>

<p class=BodyText>You’ve already seen examples of operator overloading,
specifically the assignment operator. It turns out that another operator you
can overload is <span class=Example>-&gt;</span>. If you were to create such an
operator for one of your classes, say <span class=Example>Die</span>, it could
look like this:</p>

<p class=CodeExample>Die* operator-&gt;() { <span style='color:#7F0055'>return</span>
<span style='color:#7F0055'>this</span>; }</p>

<p class=BodyText>Then the following code, while redundant, would work:</p>

<p class=CodeExample>Die d1;</p>

<p class=CodeExample>d1-&gt;roll();</p>

<p class=BodyText>Don’t do this. I’m just demonstrating what this might look
like. Here’s what the same operator might look like for the std::shared_ptr
class:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>namespace std {</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>   template&lt;class
<span style='color:#644632'>P</span>&gt; class shared_ptr {</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   public:</p>

<p class=CodeExample><span class=CodeLineNumber>04:    </span>   shared_ptr(<span
style='color:#644632'>P</span> *v) : <span style='color:#0000C0'>target</span>(v)
{}</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>      <span
style='color:#644632'>P</span>* operator-&gt;() { return <span
style='color:#0000C0'>target</span>; }</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>   private:</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>      <span
style='color:#644632'>P</span>* <span style='color:#0000C0'>target</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>   };</p>

<p class=CodeExample><span class=CodeLineNumber>09: </span>}</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span></p>

<p class=CodeExample><span class=CodeLineNumber>11: </span>exp::shared_ptr&lt;<span
style='color:#7F0055'>int</span>&gt; example(<span style='color:#7F0055'>new</span>
<span style='color:#7F0055'>int</span>);</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Everything from this line to the matching
  close } is in the namespace std.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a template class with one
  parameter<a href="#_ftn19" name="_ftnref19" title=""><span
  class=MsoFootnoteReference><span class=MsoFootnoteReference><span lang=EN-GB
  style='font-size:12.0pt;font-family:"Times New Roman"'>[19]</span></span></span></a>.
  The class is called shared_ptr.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare and immediately define a
  constructor. This kind of method is called an implicit inline method. The
  combination of declaring and then immediately defining a method is what makes
  it implicit.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Declare and then immediately define a
  method called </span><span class=Example><span lang=EN-GB>operator-&gt;.</span></span><span
  lang=EN-GB> The method returns the target pointer stored in the constructor.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create an instance of the shared_ptr.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText><span lang=EN-GB>This is in no way near a full implementation
of the class. For that you should have a look at the </span><span
class=Example>&lt;memory&gt;</span><span lang=EN-GB> header file.</span></p>

<h4>How can C++ tell the difference?</h4>

<p class=BodyText>How can the compiler decide between a “regular” -&gt; and one
you have declared for your class? You cannot change the definition of the
language. This means that while you can write your own operators for your
class, you cannot write your own operators for primitive types. All pointers
are primitive types, therefore you cannot change the behavior of -&gt; on a
pointer. For example:</p>

<p class=CodeExample>Die d1;</p>

<p class=CodeExample>d1-&gt;roll();</p>

<p class=BodyText>There’s only two things that can happen here:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>If your </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB> class has declared an operator-&gt; method, it will compile.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>If your </span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB> class does not declare an operator-&gt; method, this will not
compile.</span></p>

<p class=BodyText>Contrast that with this example:</p>

<p class=CodeExample>Die *d1 = new Die;</p>

<p class=CodeExample>d1-&gt;roll();</p>

<p class=CodeExample>delete d1;</p>

<p class=BodyText>There’s only one thing that happens here. The type of d1 is
pointer to <span class=Example>Die</span>. All pointers are primitive types, so
this uses the built-in version of operator-&gt;. There is no ambiguity in what
happens with either of these examples.</p>

<h3><a name="_Toc202609139"><span>3.19.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Fixing Cup</a></h3>

<h4>The Header File</h4>

<p class=BodyText>Now it’s time to get a little more creative and fix the Cup
class. Since Cup holds a vector of <span class=Example>Die</span> objects,
we’re going to have to do a bit more work:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>class Die;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>#include <span
style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>#include <span
style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>class Cup {</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>public:</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>   <span
style='color:#7F0055'>typedef</span> std::shared_ptr&lt;Die&gt; spDie;</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>   <span
style='color:#7F0055'>typedef</span> std::vector&lt;spDie&gt; DiceCollection;</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the necessary header file for the
  shared pointer.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Unlike the last example, define a nested
  typedef because it will make the changes to the source code easier.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Update the typedef to use sp</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> instead of </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>*. Note the use
  of typedefs minimize the changes in the header file to one line.</span></p>
  </td>
 </tr>
</table>

<h4>The Source File</h4>

<p class=BodyText>The source changes in terms of construction and destruction
only:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>Cup::Cup(Die *d1,
Die *d2) {</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>   <span
style='color:#0000C0'>dice</span>.push_back(spDie(d1));</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>   <span
style='color:#0000C0'>dice</span>.push_back(spDie(d2));</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>}</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span>Cup::~Cup() {</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>}</p>

<p class=BodyText>   </p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02, 03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Instead of putting raw </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> pointers
  into the </span><span class=Example><span lang=EN-GB>std::vector</span></span><span
  lang=EN-GB>, put </span><span class=Example><span lang=EN-GB>spDie</span></span><span
  lang=EN-GB>. Why you have to do this has to do with the design of the </span><span
  class=Example><span lang=EN-GB>shared_ptr</span></span><span lang=EN-GB>
  class. The </span><span class=Example><span lang=EN-GB>push_back</span></span><span
  lang=EN-GB> method on </span><span class=Example><span lang=EN-GB>vector</span></span><span
  lang=EN-GB> is expecting an </span><span class=Example><span lang=EN-GB>spDie</span></span><span
  lang=EN-GB> but you have a </span><span class=Example><span lang=EN-GB>Die*</span></span><span
  lang=EN-GB>. There is a constructor in </span><span class=Example><span
  lang=EN-GB>shared_ptr</span></span><span lang=EN-GB> that would work, but the
  design of </span><span class=Example><span lang=EN-GB>shared_ptr</span></span><span
  lang=EN-GB> makes the implicit use of that forbidden (by use of the </span><span
  class=Example><span lang=EN-GB>explicit</span></span><span lang=EN-GB>
  keyword). So you must explicitly create an instance of </span><span
  class=Example><span lang=EN-GB>std::shared_ptr</span></span><span lang=EN-GB>,
  for which we have already created a nested </span><span class=Example><span
  lang=EN-GB>typedef</span></span><span lang=EN-GB>. This is by design because
  accidentally creating a second shared pointer on something that already has a
  shared pointer will cause the program to crash when memory is either released
  multiple times or if memory that was released is then read.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>06</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>All memory is now taken care of by </span><span
  class=Example><span lang=EN-GB>std::shared_ptr</span></span><span lang=EN-GB>,
  simply remove the body of the destructor.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609140"><span style='font-weight:normal'>3.20<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Warning:
Circular References</a></h2>

<p class=BodyText>While std::shared_ptr solves the basic problem of releasing
memory, as with all solutions, it comes with problems. Specifically, circular
references will not get removed.</p>

<h3><a name="_Toc202609141"><span>3.20.1<span style='font:7.0pt "Times New Roman"'>
</span></span>The Problem: A concrete example</a></h3>

<p class=BodyText>Here is a simple domain using shared pointers:</p>

<p class=BodyText><img border=0 width=357 height=149 id="_x0000_i1037"
src="CppAndOOdTheLeastYouNeedToKnow_files/image016.gif"></p>

<p class=BodyText>Here’s a version of this diagram in code
(CircularReferenceExample.cpp):</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span> &lt;memory&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> struct Movie;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span> struct Renter {</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>  
std::shared_ptr&lt;Movie&gt; <span style='color:#0000C0'>movie</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> struct Movie {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>  
std::shared_ptr&lt;Renter&gt; <span style='color:#0000C0'>checkedOutBy</span>;</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>10: </span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:#7F0055'> struct</span> RentAMovieSystem {</p>

<p class=CodeExample><span class=CodeLineNumber>12:</span>   
std::shared_ptr&lt;Renter&gt; createRenter() {</p>

<p class=CodeExample><span class=CodeLineNumber>13:</span>       <span
style='color:#7F0055'>return</span> std::shared_ptr&lt;Renter&gt;(<span
style='color:#7F0055'>new</span> Renter);</p>

<p class=CodeExample><span class=CodeLineNumber>14:</span>    }</p>

<p class=CodeExample><span class=CodeLineNumber>15: </span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span>    <span
style='color:#7F0055'>void</span> rentAnyMovieTo(std::shared_ptr&lt;Renter&gt;
&amp;renter) {</p>

<p class=CodeExample><span class=CodeLineNumber>17:</span>       Movie
*someMovie = <span style='color:#7F0055'>new</span> Movie;</p>

<p class=CodeExample><span class=CodeLineNumber>18:</span>      
renter-&gt;movie.reset(someMovie);</p>

<p class=CodeExample><span class=CodeLineNumber>19:</span>       someMovie-&gt;<span
style='color:#0000C0'>checkedOutBy</span> = renter;</p>

<p class=CodeExample><span class=CodeLineNumber>20:</span>    }</p>

<p class=CodeExample><span class=CodeLineNumber>21:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>22: </span></p>

<p class=CodeExample><span class=CodeLineNumber>23:</span><span
style='color:#7F0055'> #include</span> &lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>24: </span></p>

<p class=CodeExample><span class=CodeLineNumber>25:</span>
TEST_GROUP(CircularReference) {</p>

<p class=CodeExample><span class=CodeLineNumber>26:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>27: </span></p>

<p class=CodeExample><span class=CodeLineNumber>28:</span>
TEST(CircularReference, Broken) {</p>

<p class=CodeExample><span class=CodeLineNumber>29:</span>    RentAMovieSystem
system;</p>

<p class=CodeExample><span class=CodeLineNumber>30:</span>   
std::shared_ptr&lt;Renter&gt; renter = system.createRenter();</p>

<p class=CodeExample><span class=CodeLineNumber>31:</span>   
system.rentAnyMovieTo(renter);</p>

<p class=CodeExample><span class=CodeLineNumber>32:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the required header file.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Forward-declare the Movie class, so it
  can be used on line 05.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>For this example, use </span><span
  class=Example><span lang=EN-GB>struct</span></span><span lang=EN-GB>.
  Everything is </span><span class=Example><span lang=EN-GB>public</span></span><span
  lang=EN-GB> by default.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A Renter has a single movie. This is a
  simplified version of the diagram where a Renter can either 0 or 1 movies
  rented rather than 0 to many. Adding a collection here simply complicates the
  example without making it any more broken.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Observation, this single file has both a
  declaration of Movie and Definition. That’s OK, as stated above, declarations
  can repeat, definitions cannot.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A movie knows who it was checked out by,
  which is 0 by default.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is like a simulated lookup method.
  Just creating rather than looking up a Renter object.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>16</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is where the magic happens</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a new movie</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>18</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Store the newly-created movie in the
  std::shared_ptr, replacing the current value in that object. It was built
  using its no-argument constructor, which sets its internal pointer to 0, and
  its count to 0.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>19</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Now set the movie’s Renter shared_ptr
  back to the current Renter. This is the line that creates the circular
  reference. At this point, unless the circle is broken, neither object will be
  released from memory.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>29</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a rental system used in the rest
  of the test.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Ask the rental system to create a Renter.
  This is like a lookup, I just didn’t want to have to simulate too much to
  demonstrate the principle.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>31</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call the method that forms the circle.
  Now memory will not be deallocated.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>What follows are some logic views of memory at critical
points in the code.</p>

<h4>After Line 30 Completes</h4>

<p class=BodyText><img border=0 width=432 height=202 id="_x0000_i1038"
src="CppAndOOdTheLeastYouNeedToKnow_files/image017.gif"></p>

<p class=BodyText>Line 30 requests the creation of a Renter by calling
createRenter, which returns an std::shared_ptr. The method first creates a new <span
class=Example>Renter</span>, which is on the heap. A renter holds an instance
of an <span class=Example>std::shared_ptr&lt;Movie&gt;</span>. That object is
fully contained within the Renter object, but that object itself holds a shared
count, initially 0 and a pointer to a Movie, initially assigned to 0<a
href="#_ftn20" name="_ftnref20" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[20]</span></span></span></a>.
The return std::shared_ptr object is then copied (via the copy constructor)
into a local variable called <span class=Example>renter</span>, which is wholly
on the stack, but it holds a shared counter, 1 after the line completes (but
for a short time 2) and a pointer to dynamically allocated Renter object.
Remember, these are logical views. The actual implementation of the <span
class=Example>std::shared_ptr</span> is different. This representation is
analogous.</p>

<p class=BodyText>Next, the test calls rentAnyMoveTo. Internally this creates a
new Movie, stores that pointer (thereby resetting the Renter’s movie <span
class=Example>std::shared_ptr</span>) and then tells the Movie who the renter
is checking it out.</p>

<h4>After rentAnyMovieTo Completes</h4>

<p class=BodyText><img border=0 width=458 height=202 id="_x0000_i1039"
src="CppAndOOdTheLeastYouNeedToKnow_files/image018.gif">When all of this is
done, the renter’s shared pointer to a Movie has a count of 1 and it now refers
to a newly-created Movie. That Movie is wholly on the heap. It physically
contains an std::shared_ptr&lt;Renter&gt;, which has a shared count of 2 and
refers back to the first (and only) renter object created.</p>

<h4> After The Test Finishes</h4>

<p class=BodyText><img border=0 width=456 height=201 id="_x0000_i1040"
src="CppAndOOdTheLeastYouNeedToKnow_files/image019.gif">The test finishes and
its program stack is cleared. The renter variable goes out of scope, which
means its destructor is called. During destruction, it decrements the shared
count from 2 to 1. While you may have expected the Renter on the heap to be
released, its count is 1, so it is still around. It holds a reference to a
Movie, with a count of 1. These objects are forever pegged in memory.</p>

<h3><a name="_Toc202609142"><span>3.20.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Options</a></h3>

<p class=BodyText>There are several ways to fix this.</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Change your design to remove the circular reference</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use a std::weak_ptr</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use a raw pointer</span></p>

<h4>Changing you design</h4>

<p class=BodyText>Circular references are real problems. They are certainly a
code smell, meaning they are worth reviewing. If it happens to be possible to
simply break the circular reference then that is your best option. This may not
be a viable option for any number of reasons, so what can you do if that is not
an option?</p>

<h4>Fixing With weak_ptr</h4>

<p class=BodyText>One option is to use an std::weak_ptr on one side of the
relationship. Make a decision about which side is the primary side. This is the
side that tends to be the primary or most common path of access. If there’s not
a clear winner, then go back and review your design. In this example, assume
that Renter is the primary side of the relationship:</p>

<p class=BodyText><img border=0 width=357 height=149 id="_x0000_i1041"
src="CppAndOOdTheLeastYouNeedToKnow_files/image020.gif"></p>

<p class=BodyText>One issue with this is that to create a weak_ptr requires the
original shared_ptr. We have this handy, in the rentAnyMovieTo method, so here
are a few changes to fix the circular reference:</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span> Movie {</p>

<p class=CodeExample>  std::weak_ptr&lt;Renter&gt; <span style='color:#0000C0'>checkedOutBy</span>;</p>

<p class=CodeExample>};</p>

<p class=BodyText>So long as you have the original shared_ptr available, simply
changing from the type of checkedOutBy from a shared_ptr to a weak_ptr fixes
the problem. However, this solution happens to have the correct shared_ptr
around. If it did not, then you’d need to find it first. So using a weak_ptr
can be easy if your program makes it easy.</p>

<p class=BodyText>If for some reason getting access to the original shared_ptr
of Renter is difficult or impractical, then use a raw pointer.</p>

<h4>Fixing with raw pointer</h4>

<p class=BodyText>The diagram is even easier with a raw pointer:</p>

<p class=BodyText><img border=0 width=267 height=153 id="_x0000_i1042"
src="CppAndOOdTheLeastYouNeedToKnow_files/image021.gif"></p>

<p class=BodyText>And the code is nearly the same:</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span> Movie {</p>

<p class=CodeExample>  Movie() : <span style='color:#0000C0'>checkedOutBy</span>(0)
{}</p>

<p class=CodeExample>  Renter *<span style='color:#0000C0'>checkedOutBy</span>;</p>

<p class=CodeExample>};</p>

<p class=BodyText>And:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
rentAnyMovieTo(std::shared_ptr&lt;Renter&gt; &amp;renter) {</p>

<p class=CodeExample>  ...</p>

<p class=CodeExample>  someMovie-&gt;<span style='color:#0000C0'>checkedOutBy</span>
= renter.get();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Even though these two solutions are not too bad, removing
circular references will make your code age better over time.</p>

<h2><a name="_Toc202609143"><span style='font-weight:normal'>3.21<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Recap</a></h2>

<p class=BodyText>The standard library offers a shared pointer to automatically
release memory at the right time. It does this by keeping a reference count.
When the reference count goes to 0, the memory is released.</p>

<p class=BodyText>However, you need to be careful:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Do not give an address to a shared pointer that was not
created using new (not malloc, or address-of, just new)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Do not give the same address to two different shared
pointers you create yourself. They will copy correctly if passed around, but do
not create two different shared pointers that both point to the same address. </span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Do not have circular references between shared
pointers. Either remove the circularity or break the shared pointer chain with
a weak pointer or a raw pointer.</span></p>

<p class=BodyText>If you use shared pointers and follow these rules, you can
remove quite a bit of manual memory releasing and you’re more likely to have a
well behaved system.</p>

<h2><a name="_Toc202609144"><span style='font-weight:normal'>3.22<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What’s
Coming Up?</a></h2>

<p class=BodyText>Now we’ll have a look at refactoring by using built-in
features of the standard library to improve the implementation of the Cup
class. Specifically, we’ll look at:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::for_each</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::accumulate</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::bind to call member functions</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Pointers to member functions</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::tr1::placeholders and _1</span></p>

<p class=BodyText>This section introduces a few of the build-in algorithms in
the standard library.</p>

<h2><a name="_Toc202609145"><a name="_Ref299656243"><a name="_Ref299656231"><span
style='font-weight:normal'>3.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A Few Built-In Algorithms</a></a></a></h2>

<h3><a name="_Toc202609146"><span>3.23.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Updated roll()</a></h3>

<p class=BodyText>Here is Cup::roll() in its current form:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> Cup::roll() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>for</span>(iterator i = <span
style='color:#0000C0'>dice</span>.begin(); i != <span style='color:#0000C0'>dice</span>.end();
++i)</p>

<p class=CodeExample>      (*i)-&gt;roll();</p>

<p class=CodeExample>}</p>

<p class=BodyText>There is a method in the standard library called for_each
that accomplishes something like this. It takes two iterators, dice.begin()
&amp; dice.end() and a function or function object that should be applied to
each element in the collection.</p>

<p class=BodyText>Here is an example of just that:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span> &lt;algorithm&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> static</span> <span style='color:#7F0055'>void</span>
rollADie(Cup::spDie &amp;die) {</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>    die-&gt;roll();</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:#7F0055'> void</span> Cup::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>    std::for_each(<span
style='color:#0000C0'>dice</span>.begin(), <span style='color:#0000C0'>dice</span>.end(),
rollADie);</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the header file that contains,
  among other things, std::for_each</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03 – 05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a function that will be used by
  std::for_each on each element in its collection. This method is declared
  static, meaning it is only available in this compilation unit. It takes a
  reference to an element of the vector containing shared_ptr to dice. Luckily,
  there’s already a nested typedef, so use it.</span></p>
  <p class=TableText><span lang=EN-GB>This is a place where you can use a
  reference to avoid making an unnecessary copy of an std::shared_ptr. If you
  do not use a reference, then when rollA</span><span class=Example><span
  lang=EN-GB>Die</span></span><span lang=EN-GB> is called from the for_each
  method, it will pass a copy. This will increase the reference count and copy
  the pointer. Then the function ultimately calls roll via a pointer to a die
  and returns. Upon return, the copy of the std::shared_ptr is removed, its
  destructor is called, it decrements the reference count by one.</span></p>
  <p class=TableText><span lang=EN-GB>So while not using a reference will work
  because the thing being copied is a handle to a pointer to a </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB> object, it
  required unnecessary work.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>04</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Actually roll a die. Remember, die is an
  std::shared_ptr to </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>. This uses the overloaded </span><span class=Example><span
  lang=EN-GB>operator-&gt;</span></span><span lang=EN-GB> method, which returns
  a </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> *, to which the built-in </span><span class=Example><span
  lang=EN-GB>-&gt;</span></span><span lang=EN-GB> operator applies to the </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>* and
  invokes the roll method. </span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>08</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call a template function called </span><span
  class=Example><span lang=EN-GB>std::for_each</span></span><span lang=EN-GB>.
  This function starts at the first parameter (</span><span class=Example><span
  lang=EN-GB>dice.begin()</span></span><span lang=EN-GB>), an iterator, and continues
  while its internal copy of the iterator does not equal the second parameter (</span><span
  class=Example><span lang=EN-GB>dice.end()</span></span><span lang=EN-GB>).
  For each element in the collection, call the function rollA</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
</table>

<h4>Make this change</h4>

<p class=BodyText>This change is relatively self-contained. Make this change
and get to green.</p>

<h4>Removing the rollADie method</h4>

<p class=BodyText>The third parameter to <span class=Example>std::for_each</span>
is either a pointer to a function or an object that has an operator() method
defined on it. You have seen such a beast in the engine class<a href="#_ftn21"
name="_ftnref21" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[21]</span></span></span></a>.
Here is a hand-rolled version of that, which we’ll migrate into the final form
using more built-in standard library features.</p>

<p class=BodyText>Here is the same code, with the function written as a
function object, or a functor:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span> &lt;algorithm&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> struct</span> RollFunctor {</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>    <span
style='color:#7F0055'>void</span> operator()(Cup::spDie &amp;die) {</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>      
die-&gt;roll();</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>    }</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:#7F0055'> void</span> Cup::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>    std::for_each(<span
style='color:#0000C0'>dice</span>.begin(), <span style='color:#0000C0'>dice</span>.end(),
RollFunctor());</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Define a struct called RollFunctor. It
  has a single method, operator() taking the same parameter type as the
  previous function. This example uses struct since I want everything to be
  public by default.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is the same code as the previous
  function. It’s just represented as a member function instead of a stand-alone
  function.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>For the third parameter, do not pass in a
  pointer to a function, instead pass in an instance of the class RollFunctor.
  The expression </span><span class=Example><span lang=EN-GB>RollFunctor()</span></span><span
  lang=EN-GB> creates a temporary instance, which the compiler passes into the </span><span
  class=Example><span lang=EN-GB>std::for_each</span></span><span lang=EN-GB>
  method. This works because the </span><span class=Example><span lang=EN-GB>std::for_each</span></span><span
  lang=EN-GB> method requires something that can respond to </span><span
  class=Example><span lang=EN-GB>()</span></span><span lang=EN-GB> in its third
  parameter. A pointer to a function does, but so does an object with an
  overloaded </span><span class=Example><span lang=EN-GB>operator()</span></span><span
  lang=EN-GB> method. The input parameter type must match the type stored in
  the underlying vector.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>Try this version. Make the change and confirm you solution is
green</p>

<h4>Removing even the functor</h4>

<p class=BodyText>The boost library introduced the bind library to make this
kind of thing a bit more automatic. The standard library had some built-in
support for this that was seldom used. Those classes still exist, but tr1
recommended the inclusion of the boost::bind functionality, which is a bit
clearer, having the advantage of being second instead of first.</p>

<p class=BodyText>Here’s the same thing using bind:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span> &lt;algorithm&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='color:#7F0055'> #include</span> &lt;tr1/functional&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> using namespace
std::tr1;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:#7F0055'> using</span> <span style='color:#7F0055'>namespace</span>
std::tr1::placeholders;</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:#7F0055'> void</span> Cup::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>    std::for_each(</p>

<p class=CodeExample><span class=CodeLineNumber>         </span><span
style='color:#0000C0'>dice</span>.begin(), <span style='color:#0000C0'>dice</span>.end(),
bind(&amp;Die::roll, _1));</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is the header file that provides
  std::tr1::bind and std::tr1::placeholders.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use the bind function to build a function
  object that calls the method </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB>::roll. _1 represents the parameter passed from the std::for_each
  function into the operator() method.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>Give this a try, verify that it also works. Make sure your
solution is green before trying the final version.</p>

<h4>Using lambdas</h4>

<p class=BodyText>All of this leads up to something that many compliers do not
yet support, and even the ones that do support it are not quite “there” yet.
Even so, this gives you an idea of what this will look like with modern
compilers maybe by 2012<a href="#_ftn22" name="_ftnref22" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[22]</span></span></span></a>:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> void</span> Cup::roll() {</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>  std::for_each(</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>       dice.begin(), </p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>       dice.end(), </p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>       [](spDie
&amp;die){ die-&gt;roll(); });</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>05</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Pass in a lambda expression. There are
  three parts to this expression (there can be more):</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>[] – this is a way to
  refer to local variables; there’s no need in this example use, so it is empty.
  It’s required.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>(sp<span class=Example>Die</span>
  &amp;die) – this is the signature of the method, like its predecessors, it
  takes a reference to an sp<span class=Example>Die</span>.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>{ ... } – the body of the
  code, which has been constant throughout </p>
  </td>
 </tr>
</table>

<p class=BodyText>This is one place where you might not be able to make this example
work in your system. If you are using gcc 4.5 or later, it will work<a
href="#_ftn23" name="_ftnref23" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[23]</span></span></span></a>.</p>

<h3><a name="_Toc202609147"><span>3.23.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Updated total()</a></h3>

<p class=BodyText>The total method can also be improved a bit. Like roll(),
there’s an appropriate template function for accumulating (summing values):</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span> &lt;numeric&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='color:#7F0055'> int</span> sumIt(<span style='color:#7F0055'>int</span>
currentSum, <span style='color:#7F0055'>const</span> Cup::spDie &amp;die) {</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>    <span
style='color:#7F0055'>return</span> currentSum + die-&gt;faceValue();</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span> }</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:#7F0055'> int</span> Cup::total() <span style='color:#7F0055'>const</span>
{</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>  <span
style='color:#7F0055'>return</span> std::accumulate(<span style='color:#0000C0'>dice</span>.begin(),
<span style='color:#0000C0'>dice</span>.end(), 0, sumIt);</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> }</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Include the header file that includes,
  among other template functions, std::accumulate.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>02</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The accumulate method takes a function
  with two parameters. The first parameter is the kind of value we are
  accumulating into, an int. The second parameter is an element type of the
  underlying collection type, a vector. Since this method is called from total,
  which is a </span><span class=Example><span lang=EN-GB>const</span></span><span
  lang=EN-GB> method, the value type is actually a </span><span class=Example><span
  lang=EN-GB>const</span></span><span lang=EN-GB> Cup::sp</span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>03</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Take whatever the current total is (it
  starts at 0 as we’ll see), add to that value the current die’s </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB> and
  return that value. The value returned is passed in the next time through the
  loop.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>07</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use std::accumulate to sum up the </span><span
  class=Example><span lang=EN-GB>faceValue</span></span><span lang=EN-GB>’s of
  all of the die objects. This method takes 4 parameters:</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The beginning of the
  collection</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The end of the collection</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>A seed value, sums start
  at 0, so 0 is the seed value.</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>A function taking two
  parameters, as described above.</p>
  </td>
 </tr>
</table>

<p class=BodyText>For the first element in the collection, std::accumulate
calls sumIt with two parameters:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>0 – the seed value</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>dice[0]</span></p>

<p class=BodyText>The sumIt method returns - + dice[0]-&gt;<span class=Example>faceValue</span>.
Let’s say for argument the first die has a face value of 6 and the second has a
face value of 3. At the second element in the collection, std::accumulate
passes in the value returned from the first time through the loop and dice[1]:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>6 – the value of the seed and dice[0]-&gt;</span><span
class=Example><span lang=EN-GB>faceValue</span></span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>dice[1]</span></p>

<p class=BodyText>The result of that addition is 9, which is returned by sumIt.
Since this is the last time through the loop (there are only 2 sp<span
class=Example>Die</span> in the vector), the current sum, 9, is returned. That
value is then immediately returned from Cup::total().</p>

<h4>The bind version</h4>

<p class=BodyText>The version of this using bind is nearly universally shunned.
So I’ll provide it for your review and then point you to a discussion of how to
derive at it:</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:16.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=CodeExample><span style='color:#7F0055'>int</span> Cup::total() <span
style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> std::accumulate(</p>

<p class=CodeExample>      <span style='color:#0000C0'>dice</span>.begin(),</p>

<p class=CodeExample>      <span style='color:#0000C0'>dice</span>.end(),</p>

<p class=CodeExample>      0,</p>

<p class=CodeExample>      std::tr1::bind(</p>

<p class=CodeExample>         std::plus&lt;<span style='color:#7F0055'>int</span>&gt;(),</p>

<p class=CodeExample>         _1,</p>

<p class=CodeExample>         bind(&amp;Die::faceValue, _2)</p>

<p class=CodeExample>      )</p>

<p class=CodeExample>   );</p>

<p class=CodeExample>}</p>

<p class=BodyText>For a detailed description of this, please review: <a
href="http://schuchert.wikispaces.com/cpptraining.SummingAVector">http://schuchert.wikispaces.com/cpptraining.SummingAVector</a>
</p>

<h4>The lambda version<a href="#_ftn24" name="_ftnref24" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><b><span
style='font-size:10.5pt;font-family:Arial'>[24]</span></b></span></span></a></h4>

<p class=BodyText>The lambda version fairs much better:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> int</span> Dice::total() <span style='color:#7F0055'>const</span>
{</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>  <u><span
style='color:#7F0055'>r</span></u><span style='color:#7F0055'>eturn</span>
std::accumulate(</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>     dice.begin(), </p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>     dice.end(), </p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>     0, </p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>     [](<span
style='color:#7F0055'>int</span> v, <span style='color:#7F0055'>const</span>
spDie &amp;d){ <span style='color:#7F0055'>return</span> v + d-&gt;faceValue();
}</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>  );</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> }</p>

<p class=BodyText>In this case, the lambda takes two parameters, just as the
original sumIt function. The body of the code is the same. This may seem a bit
obscure. Here is a version similar to the original method using std::for_each
instead:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> int</span> Dice::total() <span style='color:#7F0055'>const</span>
{</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span>  <span
style='color:#7F0055'>int</span> sum = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span>  std::for_each(</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span>     dice.begin(),</p>

<p class=CodeExample><span class=CodeLineNumber>05:</span>     dice.end(),</p>

<p class=CodeExample><span class=CodeLineNumber>06:</span>     [&amp;sum](<span
style='color:#7F0055'>const</span> spDie &amp;die){ sum += die-&gt;faceValue();
}</p>

<p class=CodeExample><span class=CodeLineNumber>07:</span>  );</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span>  <span
style='color:#7F0055'>return</span> sum;</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> }</p>

<p class=BodyText>This version may seem more familiar. The only new syntax is
[&amp;sum], which makes the sum local variable by reference into the lambda.
This makes the lambda a so-called block closure because access data in its
containing scope.</p>

<h3><a name="_Toc202609148"><span>3.23.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Recap</a></h3>

<p class=BodyText>This section introduces two template functions from the
standard library. Both of these functions operate over some range of elements
in a collection. You define the range by passing in the starting element and
the ending element. The range is closed on the left side and open on the right
side, meaning it includes the first element, but it excludes the right element.
It goes just up to but does not include the end element.</p>

<p class=BodyText>The first template method is std::for_each. Use it to iterate
over a collection and do something to or with each element. We looked at
several forms:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the first form, you provided the name of a function
(rollA</span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB>) that the template function calls on each element in the
collection.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In the second form, you accomplished the same thing
using a so-called function object, or functor, which is a class that declares
an operator() method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The third form uses the std::bind method to call a
member function directly. This was taken from the boost library. The standard
implementation is a bit more long-winded than the original boost version, but
it’s certainly usable for simple examples.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The final form uses a lambda expression, which is new
to C++0x. You may not have access to a compiler that supports this syntax, so
treat this as what’s ahead in the near future for C++.</span></p>

<p class=BodyText>In all cases, the final parameter was:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Something that can respond to (), either a function or
an instance of a class with an operator() method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The parameter passed into either the function or
functor you provided is a reference to the element type in the vector.</span></p>

<p class=BodyText>Next, you worked with std::accumulate. This template method
takes an additional parameter, a seed, to start the accumulation. This
additional parameter means that the function passed in (or function object)
needs to take two parameters, the seed value, and a reference to the element
type in the vector.</p>

<p class=BodyText>For std::accumulate, you saw three forms:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The first form took a function called sumIt, which
calculates the current total and returns it.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The second form went directly to the bind version. Like
std::for_each, you can hand-write a function object taking the same signature
as the sumIt function.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The third form uses a lambda expression.</span></p>

<p class=BodyText>There are many more functions in the standard library; a good
place to start is Effective STL by Scott Meyers.</p>

<h2><a name="_Toc202609149"><span style='font-weight:normal'>3.24<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Improved
Test Writing?</a></h2>

<p class=BodyText>Review the <span class=Example>DiceGame</span>’s constructor,
here’s what you have right now:</p>

<p class=CodeExample>DiceGame(Die *d1, Die *d2);</p>

<p class=BodyText>Looking at this constructor, there is no way to tell that
those die objects must be dynamically allocated. You have tests that
demonstrate that. This one signature exposes a few issues with the design of
the class:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Strongly suggests the number of die objects used, which
is a weak DRY violation because of the implied rules for win, lose, push.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There’s no clear way to guarantee that the actual
arguments are dynamically allocated, exposing the class to a failure at
destruction time. This fails another design principle: fail fast – it doesn’t
fail until long after the defect is introduced.</span></p>

<p class=BodyText>How can you improve upon this?</p>

<p class=BodyText>One way to improve at least part of this is to simply change
the signature of the constructor to take shared pointers:</p>

<p class=CodeExample>DiceGame(std::shared_ptr&lt;Die&gt; d1,
std::shared_ptr&lt;Die&gt; d2);</p>

<p class=BodyText>This addresses the ambiguity of memory allocation as that the
std::shared_ptr class is not only well defined, but specified as part of a
standard. Rather than take that approach, however, we’ll instead use a factory.
</p>

<h3><a name="_Toc202609150"><span>3.24.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Pass a factory into DiceGame</a></h3>

<p class=BodyText>For better or worse, the implementation requires dynamic
allocation. Rather than force that requirement out to the calling class, we can
instead force the client to provide an object that does that work instead. Of
course, the current design supports testability in the form of providing test
doubles, so we don’t want to lose that ability in a redesign. Here is one such
design using an object called a factory:</p>

<p class=BodyText><img border=0 width=429 height=168 id="_x0000_i1043"
src="CppAndOOdTheLeastYouNeedToKnow_files/image022.gif"></p>

<h3><a name="_Toc202609151"><span>3.24.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Oh Wait, testability</a></h3>

<p class=BodyText>The existing solution allows <span class=Example>LoadedDie</span>
or <span class=Example>Die</span> objects during construction. To mimic this,
we either need to construct both kinds of <span class=Example>Die </span>Objects
in a single factory, or, better yet, have two different kinds of factories:</p>

<p class=BodyText><img border=0 width=266 height=116 id="_x0000_i1044"
src="CppAndOOdTheLeastYouNeedToKnow_files/image023.gif"></p>

<p class=BodyText><span class=Example>Die</span> is a base class, <span
class=Example>LoadedDie</span> is a derived class. The <span class=Example>LoadedDie</span>
class is really part of the test solution. When you created this relationship,
it was an example of inheriting from a concrete class, which has its issues.
The other option is to inherit from an abstract class, or a class that cannot
be instantiated. Generally, inheriting from a concrete class is more fragile
than inheriting from an abstract class. Why?</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Concrete things, by their very nature, have more
details. So more things can change, increasing the likelihood of something
breaking down the road.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Abstract classes tend to be stable both because they
have fewer details to change but also by their very nature. Since they are
abstract, other classes depend on them. Since other classes depend on them,
they are stable, a self-fulfilling prophecy. Since classes depend on them, they
have a certain amount of inertia to resist change; changing them might break dependent
classes. This is called the stable dependencies principles. Things are stable
because they are depended upon.</span></p>

<p class=BodyText>As this diagram shows, there will be an interface called I<span
class=Example>Die</span>Factory. It will serve as an API only. It contains the
stereo type &lt;&lt;interface&gt;&gt; which says that this class will not have
any concrete methods. How can we accomplish that? Also, this is going to
require quite a bit of change. How can we manage to migrate to this new
solution while still living in our production house?</p>

<p class=BodyText>Before we get into all of that, let’s digress into why re
refactor code as we do.</p>

<h2><a name="_Toc202609152"><span style='font-weight:normal'>3.25<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>The
4-contact points of software development</a></h2>

<p class=BodyText>The three laws of TDD are:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Write no production code without a failing test</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Write just enough of a test to fail</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Write just enough production code to get the test to
pass</span></p>

<p class=BodyText>This list doesn’t include refactoring, which is typically an
assumed activity. In fact, some people refer to these rules as “red, green,
refactor”. An even older version of this, from the Smalltalk community, is Red,
Green, Blue. (Why Blue for refactor? I think someone was thinking RBG for a
color space, luckily they didn’t try to use CMYK or LAB!)</p>

<p class=BodyText>In this simple model, there two kinds of code: test &amp;
production. There are two kinds of activity: writing &amp; refactoring.
Interestingly, at one level it is all code. The thing that distinguishes both
sets is intent.</p>

<p class=BodyText>The intent of a test is to demonstrate or maybe specify
behavior. The intent of production code is to implement (hopefully)
business-relevant functionality.</p>

<p class=BodyText>The intent of writing code is creation. The intent of
refactoring code is to change (hopefully improve) its structure without
changing its behavior (this is oversimplified but essentially correct).</p>

<p class=BodyText>If you mix those combinations you have the 4-limbs of development:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Writing a test</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Writing production code</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refactoring a test</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refactoring production code</span></p>

<p class=BodyText>An important behavior to practice is doing only one of these
at a time. That is, when you are writing tests, don’t also write production
code. Sure, you might use tools to stub out missing methods and classes, but
the heart of what you are doing is writing a test. Finish that train of thought
before focusing on writing production code.</p>

<p class=BodyText>On the other hand, if you are refactoring production code, do
just that. Don’t change tests at the same time; try to only do one refactoring
at a time, etc.</p>

<h3><a name="_Toc202609153"><span>3.25.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Why?</a></h3>

<p class=BodyText>First an analogy that almost always misses since most
developers don’t additionally rock climb.</p>

<p class=BodyText>When rock climbing, a good general bit of advice is to only
move one contact point at a time. For this discussion, consider your two hands
and two feet as your four contact points. Sure, you can use your face or knee,
but neither are much fun. So just considering two hands and two feet, that
suggests that if, for example, you move your right hand, then leave your left
hand and both feet in place.</p>

<p class=BodyText>This gives you stability, a chance to easily recover by
simply moving the most recent appendage back in place and, when the inevitable
happens, another appendage slips, you have a better chance of not eating rock
face. If you move more than one thing at a time, you are in more danger because
you’ve taken a risky action and reduced the number of points of contact, or
stability.</p>

<p class=BodyText>Will you sometimes move multiple appendages? Sure. But not as
a habit. Sometimes you need to take risks. The rock face may not always offer
up movement patterns that make applying this recommendation possible. Since you
know the environment will occasionally work against you, you need to maintain
some slack for the inevitable.</p>

<p class=BodyText>Practicing Test Driven Development is similar. If you change
production code and tests at the same time, what happens if a test fails? What
is wrong? The production code, the test, both, neither? An even more subtle
problem is that tests pass but the test is fragile or heavily
implementation-dependent. While not necessarily an immediate threat, it
represents design debt that will eventually cause problems. (This also happens
frequently when tests are written after the production code as it’s seductively
easy to write tests that exercise code, expressing the production’s code
implementation but fundamentally hiding the intent.)</p>

<p class=BodyText>Notice, if you had only refactored code, then you know the
problem is in one place. When you change both, the problem space actually goes
from 1 to 3 (4 if you allow for neither). Furthermore, if you are changing both
production and test code at the same time and you get to a point where you’ve
entered a bottomless pit, you’ll end up throwing away more work if you choose to
restore from the repository.</p>

<p class=BodyText>Are there going to be times when you change both? Sure.
Sometimes you may not see a clear path that gives you the option to do only one
thing at a given time. Sometimes the tests and code will work against you.
Often, you’ll be working in a legacy code base where there are no tests. Given
that the environment will occasionally (or frequently) work against you, you
need to maintain some slack.</p>

<p class=BodyText>Essentially, be focused on a single goal at any given time:
write a test. then get it to pass. clean up production code &amp; keep the
tests first unchanging and then passing.</p>

<p class=BodyText>I find that this is a hard thing both to learn and to apply.
I frequently jump ahead of myself. Unfortunately I’m “lucky” enough when I do
jump ahead that when I fail, I thoroughly fall flat on my face.</p>

<p class=BodyText>This approach is contextual (aren’t they all?). Every time
you start working on code, you’ll be faced with these four possibilities. Each
time you are, you need to figure out what is the most important thing in the
moment, and do that one thing. Once you’ve taken care of the most important
thing, you may have just promoted the second most important thing to first
place. Even so, reassess. What is the most important thing now? Do that.</p>

<h2><a name="_Toc202609154"><span style='font-weight:normal'>3.26<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Create
a concrete Factory</a></h2>

<p class=BodyText>We have existing tests and the solution is green. So we’ll
start by writing a new test to create a concrete factory. Which one, the <span
class=Example>Die</span>Factory or Loaded<span class=Example>Die</span>Factory?
We have automated tests that require the creation of <span class=Example>LoadedDie</span>,
so that’s where we will start.</p>

<h3><a name="_Toc202609155"><span>3.26.1<span style='font:7.0pt "Times New Roman"'>
</span></span>First Test against the Factory</a></h3>

<p class=BodyText>Here’s a test that confirms we can build <span class=Example>LoadedDie</span>
out of a factory. This uses several things you’ve already seen:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;Die.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> &lt;memory&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(LoadedDieFactoryShould) {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(LoadedDieFactoryShould, ReturnLoadedDie) {</p>

<p class=CodeExample>   LoadedDieFactory factory(5);</p>

<p class=CodeExample>   spDie d = factory.build();</p>

<p class=CodeExample>   LONGS_EQUAL(5, d-&gt;faceValue());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This shows the creation of a Loaded<span class=Example>Die</span>Factory
that returns Loade<span class=Example>dDie</span> objects always rolling 5.
This is a good start, what of its implementation?</p>

<h3><a name="_Toc202609156"><span>3.26.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Define the class: LoadedDieFactory</a></h3>

<p class=BodyText>The header file has nothing you’ve not already seen in other
examples at this point:</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample>#ifndef LOADEDDIEFACTORY_H_</p>

<p class=CodeExample>#define LOADEDDIEFACTORY_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class Die;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample>typedef std::shared_ptr&lt;Die&gt; spDie;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class LoadedDieFactory {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   LoadedDieFactory(int value);</p>

<p class=CodeExample>   virtual ~LoadedDieFactory();</p>

<p class=CodeExample>   spDie build();</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>   int <span style='color:#0000C0'>faceValue</span>;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h3><a name="_Toc202609157"><span>3.26.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Define the methods: LoadedDieFactory</a></h3>

<p class=BodyText>The implementation offers no surprises either:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDie.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDieFactory::LoadedDieFactory(<span style='color:
#7F0055'>int</span> value) :</p>

<p class=CodeExample>   <span style='color:#0000C0'>faceValue</span>(value) {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDieFactory::~LoadedDieFactory() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>spDie LoadedDieFactory::build() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> spDie(<span
style='color:#7F0055'>new</span> LoadedDie(<span style='color:#0000C0'>faceValue</span>));</p>

<p class=CodeExample>}</p>

<p class=BodyText>Create the new test, header and source file. Get your
solution to green.</p>

<h2><a name="_Toc202609158"><span style='font-weight:normal'>3.27<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Update
the cup</a></h2>

<p class=BodyText>The Cup needs to be created using shared pointer to die
objects, so it’s time for a new test.</p>

<h3><a name="_Toc202609159"><span>3.27.1<span style='font:7.0pt "Times New Roman"'>
</span></span>The Test</a></h3>

<p class=BodyText>Here’s a simple test that grows the Cup by requiring an
overloaded constructor:</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&quot;Cup.h&quot;</span></p>

<p class=CodeExample>#include &quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include &lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(CupShould) {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(CupShould, BeConstructableWithSharedPointers) {</p>

<p class=CodeExample>  LoadedDieFactory factory(3);</p>

<p class=CodeExample>  Cup cup(factory.build(), factory.build());</p>

<p class=CodeExample>  LONGS_EQUAL(6, cup.total());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice that this is a new test file. The Cup came into
existence as a refactoring exercise. Now there’s a simple test file for it.
This class is tested, just not in a classical unit test style. If this class
becomes more heavily used, it might be a good idea to remediate the missing
tests. For now, all we’ll do is test the new code for this class.</p>

<h3><a name="_Toc202609160"><span>3.27.2<span style='font:7.0pt "Times New Roman"'>
</span></span>A new constructor</a></h3>

<p class=BodyText>The constructor looks almost the same as the last one (and in
fact, it could be written using the same code):</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Cup {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>  ...</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  Cup(spDie d1, spDie d2);</p>

<p class=BodyText>The constructor declaration uses the existing nested <span
class=Example>typedef</span>. The constructor definition is just a few lines:</p>

<p class=CodeExample>Cup::Cup(spDie d1, spDie d2) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>dice</span>.push_back(d1);</p>

<p class=CodeExample>   <span style='color:#0000C0'>dice</span>.push_back(d2);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Create the new test and missing constructor. Get back to
green before moving on.</p>

<h2><a name="_Toc202609161"><span style='font-weight:normal'>3.28<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Dice
Game Instantiation</a></h2>

<p class=BodyText>Now is where we need to move slowly, choosing to make one
change at a time before moving to another change. There are three tests to
verify the game’s rules when rolling greater than, less than and equal to 7.
Rather than try to fix all of those at once, we’ll change one. This will force
us to add a constructor, but it will allow the old and new approach to
co-exist, keeping code compiling and tests passing more often.</p>

<h3><a name="_Toc202609162"><span>3.28.1<span style='font:7.0pt "Times New Roman"'>
</span></span>First a test</a></h3>

<p class=BodyText>Update the first test in <span class=Example>DiceGame</span>Test.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDie.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(DiceGame) {};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(DiceGame, BalanceDecreasesForLoss) {</p>

<p class=CodeExample>   LoadedDieFactory factory(3);</p>

<p class=CodeExample>   DiceGame game (factory);</p>

<p class=CodeExample>   game.play();</p>

<p class=CodeExample>   LONGS_EQUAL(-1, game.getBalance());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This test refers to a to-be-defined constructor.</p>

<h3><a name="_Toc202609163"><span>3.28.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Notice a pattern? New Constructor</a></h3>

<p class=BodyText>We’re adding a lot of constructors all over the place. This
is pretty standard since we are dealing with object creation. Here’s the
updated constructor:</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Die;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> LoadedDieFactory;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> DiceGame {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   DiceGame(LoadedDieFactory &amp;factory);</p>

<p class=BodyText>The new constructor takes in a reference to a Loaded<span
class=Example>Die</span>Factory. References are primitive, so the header file
only needs to forward declare Loaded<span class=Example>Die</span>Factory rather
than include the header file.</p>

<p class=BodyText>Of course, that defers the including the header file to the
source file:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;Cup.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>DiceGame::DiceGame(LoadedDieFactory &amp;factory) : <span
style='color:#0000C0'>balance</span>(0) {</p>

<p class=CodeExample>   spDie d1 = factory.build();</p>

<p class=CodeExample>   spDie d2 = factory.build();</p>

<p class=CodeExample>   <span style='color:#0000C0'>cup</span>.reset(<span
style='color:#7F0055'>new</span> Cup(d1, d2));</p>

<p class=CodeExample>}</p>

<p class=BodyText>The last line of the constructor uses the reset method to
replace the existing pointer stored by the shared pointer with a new pointer.
The existing pointer is 0.</p>

<p class=BodyText>Update the test, add the constructor declaration and
definition and get back to green.</p>

<h3><a name="_Toc202609164"><span>3.28.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Update the second test</a></h3>

<p class=BodyText>With the work form the first test, the second test should
smoothly translate:</p>

<p class=CodeExample>TEST(DiceGame, BalanceIncreasesForWin) {</p>

<p class=CodeExample>   LoadedDieFactory factory(5);</p>

<p class=CodeExample>   DiceGame game (factory);</p>

<p class=CodeExample>   game.play();</p>

<p class=CodeExample>   LONGS_EQUAL(1, game.getBalance());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Get your solution to green.</p>

<p class=BodyText>You might have noticed that this test is actually checking
for a different value. The original test used 4 and 5, for a total of 9. This
test uses 5 and 5. That’s OK since those values are in the same range of values
for the rules of the game; they are in the same equivalence-class. Even so, it
suggests a problem for the next test.</p>

<h3><a name="_Toc202609165"><span>3.28.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Oops, not there yet</a></h3>

<p class=BodyText>The next logical thing to try is conversion of the third and
final test, but we hit a brick wall. The current test uses 7 for a total. The
current Loaded<span class=Example>Die</span>Factory class doesn’t support that,
so before we change that test, we need to extend the definition of the Loaded<span
class=Example>Die</span>Factory to support this.</p>

<h2><a name="_Toc202609166"><span style='font-weight:normal'>3.29<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Extending
Loaded Die Factory</a></h2>

<p class=BodyText>This class is a test double. This doesn’t mean we just write
bad code and get it over with, but it does suggest that we only have to make it
as flexible as the tests require. That is, you already have a good idea of what
you need:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Creating a factory with one value is convenient.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Creating a factory that can produce two different
loaded die, one for 3 and one for 4, is all the flexibility we need.</span></p>

<p class=BodyText>You could create an entirely different Loaded<span
class=Example>Die</span>Factory, or just update the current one in place.
Assuming you want to update in place, the next thing is a test.</p>

<h3><a name="_Toc202609167"><span>3.29.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Here’s a test</a></h3>

<p class=CodeExample>TEST(LoadedDieFactoryShould, BeAbleToTakeTwoValues) {</p>

<p class=CodeExample>  LoadedDieFactory factory(3, 4);</p>

<p class=CodeExample>  spDie d1 = factory.build();</p>

<p class=CodeExample>  spDie d2 = factory.build();</p>

<p class=CodeExample>  LONGS_EQUAL(3, d1-&gt;faceValue());</p>

<p class=CodeExample>  LONGS_EQUAL(4, d2-&gt;faceValue());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This test expresses one way that will give us what we need.
Notice that it introduces (adds) a constructor rather than changing the
existing constructor. Why? Fewer moving parts; change a test, get it to work.
Then consider if removing the old constructor makes sense or not (we’re not
going to).</p>

<h3><a name="_Toc202609168"><span>3.29.2<span style='font:7.0pt "Times New Roman"'>
</span></span>The Updated Class</a></h3>

<p class=BodyText>This was the first solution I came up with:</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span>
LOADEDDIEFACTORY_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span>
LOADEDDIEFACTORY_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Die;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span style='color:#7F0055'>typedef</span>
std::shared_ptr&lt;Die&gt; spDie;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> LoadedDieFactory
{</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>  LoadedDieFactory(<span style='color:#7F0055'>int</span>
firstValue, <span style='color:#7F0055'>int</span> secondValue);</p>

<p class=CodeExample>  LoadedDieFactory(<span style='color:#7F0055'>int</span>
value);</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span>
~LoadedDieFactory();</p>

<p class=CodeExample>  spDie build();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private:</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> <span
style='color:#0000C0'>values</span>[2];</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> lastIndex;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>The class will hold an array of two values and an index
indicating the last one returned. The idea is that it will toggle between the
first and second values. The original constructor will still work; it will just
populate the two values with the same value.</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;LoadedDie.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDieFactory::LoadedDieFactory(<span style='color:
#7F0055'>int</span> value) : <span style='color:#0000C0'>lastIndex</span>(-1) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>[0] = value;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>[1] = value;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDieFactory::LoadedDieFactory(<span style='color:
#7F0055'>int</span> firstValue, <span style='color:#7F0055'>int</span>
secondValue)</p>

<p class=CodeExample>  : <span style='color:#0000C0'>lastIndex</span>(-1) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>[0] =
firstValue;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>[1] =
secondValue;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>LoadedDieFactory::~LoadedDieFactory() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>spDie LoadedDieFactory::build() {</p>

<p class=CodeExample>  lastIndex = (lastIndex + 1) % 2;</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> spDie(<span
style='color:#7F0055'>new</span> LoadedDie(<span style='color:#0000C0'>values</span>[<span
style='color:#0000C0'>lastIndex</span>]));</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609169"><span>3.29.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Return to green</a></h3>

<p class=BodyText>This is a bit of a jump from the previous version; however
the recommendation of doing the simplest thing that could possibly work is for
situations where you don’t know how to proceed. I’ve used this kind of thing
before, so it’s really not complex to me.</p>

<p class=BodyText>Get your solution back to green.</p>

<h3><a name="_Toc202609170"><span>3.29.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Back to that final test</a></h3>

<p class=BodyText>Now you can update the final test in <span class=Example>DiceGame</span>Test.cpp:</p>

<p class=CodeExample>TEST(DiceGame, BalanceRemainsSameForPush) {</p>

<p class=CodeExample>   LoadedDieFactory factory(4, 3);</p>

<p class=CodeExample>   DiceGame game (factory);</p>

<p class=CodeExample>   game.play();</p>

<p class=CodeExample>   LONGS_EQUAL(0, game.getBalance());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Since the factory works, this test should work. Make the
change, get to green.</p>

<h3><a name="_Toc202609171"><span>3.29.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Why modify this final test at all?</a></h3>

<p class=BodyText>The goal is to migrate the design to a new approach, to do
that all existing code depending on the old constructor needs to be updated.
Now that it is, you can remove the old constructor can generally clean up the
code before moving to the next section.</p>

<h2><a name="_Toc202609172"><span style='font-weight:normal'>3.30<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Final
Cleanup</a></h2>

<p class=BodyText>The current implementation requires a little housekeeping. It
might seem that more methods make a class more flexible but the exact opposite
can be true depending on what you’re trying to manage. If you want to build
systems that are easier to maintain over time, smaller classes with minimal
interfaces age better than large classes. Generally, the vast majority of time
and money over the life of a project is spent in so-called maintenance, so
anything you can do to help maintenance will be a big win. Keeping things clean
is certainly a big help. Bigger still is a trail of automated tests as you
work.</p>

<p class=BodyText>With that in mind, it’s time to clean up unnecessary code.</p>

<h3><a name="_Toc202609173"><span>3.30.1<span style='font:7.0pt "Times New Roman"'>
</span></span>DiceGame</a></h3>

<p class=BodyText>There are three unnecessary things in the class:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Forward declaration of </span><span class=Example><span
lang=EN-GB>Die</span></span><span lang=EN-GB>;</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Declaration of a constructor taking two die pointers</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Definition of that same constructor.</span></p>

<p class=BodyText>Make these changes and confirm your solution is green.</p>

<h3><a name="_Toc202609174"><span>3.30.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Cup</a></h3>

<p class=BodyText>Once you’ve cleaned up the <span class=Example>DiceGame</span>,
this enables cleaning up Cup:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Cup has an unused constructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Cup has a duplicated typedef for std::shared_ptr&lt;</span><span
class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>&gt;</span></p>

<p class=BodyText>For now, we can safely remove the constructor taking two <span
class=Example>Die</span> pointers.</p>

<p class=BodyText>Make these changes and confirm your solution is green,</p>

<h3><a name="_Toc202609175"><span>3.30.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Common typedef</a></h3>

<p class=BodyText>Now there’s the duplicate typedef. While it does not cause
problems, it is a DRY violation. So first introduce a new header file (sp<span
class=Example>Die</span>.h):</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> SPDIE_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> SPDIE_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include <span style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Die;</p>

<p class=CodeExample><span style='color:#7F0055'>typedef</span>
std::shared_ptr&lt;Die&gt; spDie;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>Now include that where that type is needed and remove the
duplicated typedef:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Cup.h</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Cup.cpp (replace Cup::sp</span><span class=Example><span
lang=EN-GB>Die</span></span><span lang=EN-GB> with sp</span><span
class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Loaded</span><span class=Example><span lang=EN-GB>Die</span></span><span
lang=EN-GB>Factory.h</span></p>

<p class=BodyText>Make these changes and get back to green.</p>

<h2><a name="_Toc202609176"><span style='font-weight:normal'>3.31<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Is
this better?</a></h2>

<p class=BodyText>So is this better? Constructing with a factory rather that
two <span class=Example>Die</span> objects? What about hiding the dynamic
memory allocation deeper in the system?</p>

<h3><a name="_Toc202609177"><span>3.31.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Can we even play a real game</a></h3>

<p class=BodyText>Right now there is a definitive answer, the current solution
is clearly worse in one key respect. It’s not possible to build a system with
real <span class=Example>Die</span> objects! By making the most recent changes,
it’s no longer possible to build a system without a factory and there’s only
one kind of factory, Loaded<span class=Example>Die</span>Factory.</p>

<h3><a name="_Toc202609178"><span>3.31.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Problem with Test Doubles</a></h3>

<p class=BodyText>This represents something you need to watch out for when
using test doubles; you can build a system with missing real code. That’s what
remains and along the way you’ll see an important feature of C++, pure virtual
member functions. </p>

<h2><a name="_Toc202609179"><span style='font-weight:normal'>3.32<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Refactor:
Extract Interface</a></h2>

<p class=BodyText>To get started, we need to build the <span class=Example>Die</span>Factory.
Before doing so, review the class diagram:</p>

<p class=BodyText><img border=0 width=266 height=116 id="_x0000_i1045"
src="CppAndOOdTheLeastYouNeedToKnow_files/image024.gif"></p>

<p class=BodyText>This shows a top-level interface as the base of the two
concrete factories. This is the common form of the abstract factory design
pattern; a common abstraction, which one or more concrete classes implement. We
have a leg up on this because we have a working class already in place, so we
can extract an interface.</p>

<h3><a name="_Toc202609180"><span>3.32.1<span style='font:7.0pt "Times New Roman"'>
</span></span>The Class Definition</a></h3>

<p class=BodyText>First, create a new class, I<span class=Example>Die</span>Factory
by extracting what needs to be common:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='color:#7F0055'> #ifndef</span> IDIEFACTORY_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> #define</span> IDIEFACTORY_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> #include <span
style='color:#2A00FF'>&quot;spDie.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:#7F0055'> class</span> IDieFactory {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span> public:</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   <span
style='color:#7F0055'>virtual</span> ~IDieFactory() = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>   <span
style='color:#7F0055'>virtual</span> spDie build() = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span> #endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>09</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a base class, so declare a
  virtual destructor. The </span><span class=Example><span lang=EN-GB>= 0</span></span><span
  lang=EN-GB> syntax at the end indicate this as a pure virtual function. This
  makes the method abstract and it also makes the class abstract; it is not
  possible to make an instance of this class. Normally, a subclass will have to
  provide a declaration and definition of all pure virtual methods or it too
  will be abstract. In the special case of destructors, this is not true. More
  on this with the source file.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The build method also pure virtual.
  Subclasses will have to provide a declaration and definition of this method
  or be abstract.</span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc202609181"><span>3.32.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Implementing the pure virtual destructor</a></h3>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;IDieFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>IDieFactory::~IDieFactory() {</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice the definition of the destructor? If you do not
include such a definition for a pure virtual destructor, the subclasses will be
forced to provide one. To be safe, a base class should declare a virtual
destructor. Why make it pure virtual?</p>

<p class=BodyText>In this particular case, the intention of this class is to
serve as a behavior-only abstraction – an interface. C++ does not have
interfaces, but it can have a class with all pure virtual methods, the next
best thing.</p>

<p class=BodyText>So a pure virtual destructor declaration suggests the intent
of the class. Providing a definition for the destructor minimizes the
requirements for a base class; they will not have to write a destructor, but if
they do, the correct one will get called. </p>

<h3><a name="_Toc202609182"><span>3.32.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Update LoadedDieFactory</a></h3>

<p class=BodyText>With an extracted interface, it’s quick to update Loaded<span
class=Example>Die</span>Factory to implement that interface:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;IDieFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> LoadedDieFactory
: <span style='color:#7F0055'>public</span> IDieFactory {</p>

<p class=BodyText>Make these changes and get your solution back to green.</p>

<h2><a name="_Toc202609183"><span style='font-weight:normal'>3.33<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Now
DieFactory</a></h2>

<p class=BodyText>Time to create the class we need to build a proper system,
the <span class=Example>Die</span>Factory. As with other examples, we’ll start
with a test. This will use new C++ syntax.</p>

<h3><a name="_Toc202609184"><span>3.33.1<span style='font:7.0pt "Times New Roman"'>
</span></span>First the test</a></h3>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;DieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;Die.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&lt;typeinfo&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST_GROUP(DieFactoryShould) {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(DieFactoryShould, ReturnOnlyDie) {</p>

<p class=CodeExample>  DieFactory factory;</p>

<p class=CodeExample>  spDie die = factory.build();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  CHECK(<span style='color:#7F0055'>typeid</span>(Die) == <span
style='color:#7F0055'>typeid</span>(*die.get()));</p>

<p class=CodeExample>}</p>

<p class=BodyText>There’s something new in this code, the use of <span
class=Example>typeid</span>. The typeid operator returns back a think called a
type_info object. This comparison verifies that the kind object held onto by
the shared pointer returned from the factory is actually a <span class=Example>Die</span>
and not a <span class=Example>LoadedDie</span>. </p>

<h3><a name="_Toc202609185"><span>3.33.2<span style='font:7.0pt "Times New Roman"'>
</span></span>The Implementation</a></h3>

<p class=BodyText>Here’s a minimal implementation of <span class=Example>Die</span>Factory.
First the header file:</p>

<p class=CodeExample>#pragma once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> DIEFACTORY_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> DIEFACTORY_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;IDieFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> DieFactory: <span
style='color:#7F0055'>public</span> IDieFactory {</p>

<p class=CodeExample>public:</p>

<p class=CodeExample>   spDie build();</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>Now for a source file:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span>
&quot;Die.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> &quot;DieFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>spDie DieFactory::build() {</p>

<p class=CodeExample>   <span style='color:#7F0055'>return</span> spDie(<span
style='color:#7F0055'>new</span> Die);</p>

<p class=CodeExample>}</p>

<p class=BodyText>That’s it. You can certainly add:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A no-argument constructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A destructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>A copy constructor</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>An assignment operator</span></p>

<p class=BodyText>This will give you a canonical form for the class.</p>

<h3><a name="_Toc202609186"><span>3.33.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Get to Green</a></h3>

<p class=BodyText>Create this next to final test and the <span class=Example>Die</span>Factory
class. Make sure your source is green before moving on.</p>

<h2><a name="_Toc202609187"><span style='font-weight:normal'>3.34<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>A
Smoke Test</a></h2>

<p class=BodyText>Can you build a real system? It’s time for a different kind
of test. Here’s a simple test to exercise a system as it is meant to be used:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;DieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;stdio.h&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(DiceGameSmokeTest) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DiceGameSmokeTest,
StandardUse) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>DieFactory<span
style='color:black'> factory;</span></p>

<p class=CodeExample><span style='color:black'>  </span>DiceGame<span
style='color:black'> game(factory);</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'>(</span><span style='color:#7F0055'>int</span><span
style='color:black'> i = 0; i &lt; 33; ++i)</span></p>

<p class=CodeExample><span style='color:black'>     game.play();</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>char</span><span style='color:black'> balance[32];</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#642880'>snprintf</span><span style='color:black'>(balance, 64, </span>&quot;Balance
= %d&quot;<span style='color:black'>, game.getBalance());</span></p>

<p class=CodeExample><span style='color:black'>  UT_PRINT(balance);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This test attempts to create a <span class=Example>DiceGame</span>
using a <span class=Example>Die</span>Factory. Try to create this test, you’ll
find that it’s a good idea you did so, because this won’t compile.</p>

<h3><a name="_Toc202609188"><span>3.34.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Make the required updates</a></h3>

<p class=BodyText>The signature of the constructor is incorrect; it needs to
refer to I<span class=Example>Die</span>Factory:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&lt;memory&gt;</span></p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Cup<span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>IDieFactory<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>DiceGame<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>   <u>DiceGame(</u></span><u>IDieFactory</u><u><span
style='color:black'> &amp;factory);</span></u></p>

<p class=BodyText>You’ll also need to update the definition:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;DiceGame.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IDieFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Cup.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>DiceGame::DiceGame(</span>IDieFactory<span
style='color:black'> &amp;factory) : </span><span style='color:#0000C0'>balance</span><span
style='color:black'>(0) {</span></p>

<h3><a name="_Toc202609189"><span>3.34.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Back to green</a></h3>

<p class=BodyText>Make these changes and confirm that your system is back to
green.</p>

<h3><a name="_Toc202609190"><span>3.34.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Where does this test belong?</a></h3>

<p class=BodyText>This test is different in a few ways.</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It uses a new macro, UT_PRINT, to output some
information.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It uses only production classes, no test doubles</span></p>

<p class=BodyText>This is a fully-wired system. You will need to write tests
like these to make sure anything about the configuration of your system that
might be broken is discovered automatically.</p>

<p class=BodyText>This particular test takes little time to run. Even so, it
might be a good idea to organize tests with different intentions into different
projects. As a developer, I want to be able to run all the various automatic
tests on my personal machine. I want to be able to do that and not have to
worry about shared resources like databases or message queues. This suggests
certain kinds of design considerations that lead to good test isolation.</p>

<p class=BodyText>In any case, if you decided to include this test in an
automated test suite meant to be run by developers often throughout the day,
remove the output. Why? In practice, output has a few negative consequences:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It slows test execution. Anything that unnecessarily
slows tests leads to tests getting run less frequently, which reduces their
value considerably. You won’t find failures fast.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It encourages manual checking of something that can
probably be automated.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It leads to weaker testing. If there’s output, then
people can check things just in case.</span></p>

<p class=BodyText>This does not suggest that a production system should not
have logging. I’m just saying that unit tests should produce no output in
general.</p>

<p class=BodyText>In any case, you’ve finished this project. Congratulations</p>

<h2><a name="_Toc202609191"><span style='font-weight:normal'>3.35<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Wrap-up</a></h2>

<p class=BodyText>This last section was primarily about experimenting with a
design pattern and the down-stream ramifications associated with that. It was
also about refactoring in small steps, keeping the code compiling and the tests
passing while changing the structure of your solution.</p>

<p class=BodyText>There were a few new things as a result:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Term</span></p>
   </td>
   <td width=334 valign=top style='width:333.9pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Abstract Factory</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Designate a class whose primary
  responsibility is to build one or a family of objects. Create an abstract
  class that captures the interface and then have multiple implementations for
  different situations.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Pure Virtual</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A virtual method can be pure virtual.
  This has several effects</span></p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The method is abstract</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The class is abstract</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>The class cannot be
  instantiated</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>Subclasses must implement
  the pure virtual method or themselves be abstract</p>
  <p class=TableBullet><span style='font-size:11.0pt;font-family:Wingdings'>§<span
  style='font:7.0pt "Times New Roman"'> </span></span>If you have a pure
  virtual destructor, it can be defined in the base class and subclasses will
  not have to implement it.</p>
  <p class=TableText><span lang=EN-GB>We made all methods in one class pure
  virtual, the intent of which is to suggest that a class is not just abstract
  but is in fact an interface.</span></p>
  </td>
 </tr>
 <tr>
  <td width=104 valign=top style='width:103.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>typeid</span></p>
  </td>
  <td width=334 valign=top style='width:333.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>An operator used to determine the type of
  an object. You can only use typeid on classes with at least one virtual
  method. We used this to confirm that the kind of object retrieved from a </span><span
  class=Example><span lang=EN-GB>Die</span></span><span lang=EN-GB>Factory was
  in fact an actual </span><span class=Example><span lang=EN-GB>Die</span></span><span
  lang=EN-GB> and not a subclass.</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609192"><span style='font-weight:normal'>3.36<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Final
Recommendations</a></h2>

<p class=BodyText>C++ is a huge language and if you’re just starting out or
even if you’ve been using it for a few years, consider it an ever expanding
project to really learn the language. We have skipped most of the language in
this project, yet you know enough to get starting writing decent Object
Oriented solutions using the language. The rest of this section is a collection
of next steps and recommendations.</p>

<h3><a name="_Toc202609193"><span>3.36.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Books</a></h3>

<p class=BodyText>There are many books you might consider reading over the next
several months and years. Here’s a short list of some you might want to
consider:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Exceptional C++: 47 Engineering Puzzles, Programming
Problems, and Solutions</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>More Exceptional C++: 40 New Engineering Puzzles,
Programming Problems, and Solutions</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Accelerated C++: Practical Programming by Example</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Effective C++: 55 Specific Ways to Improve Your
Programs and Designs (3rd Edition) </span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Effective STL: 50 Specific Ways to Improve Your Use of
the Standard Template Library</span></p>

<p class=BodyText>Here are a few more books you might want to consider as you
dig a bit deeper, or to give you some context:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Advanced C++ Programming Styles and Idioms</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Ruminations on C++: A Decade of Programming Insight and
Experience</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>C Traps and Pitfalls</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The Design and Evolution of C++</span></p>

<h3><a name="_Toc202609194"><span>3.36.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Katas</a></h3>

<p class=BodyText>A common practice is to take a simple problem and practice it
over and over. I’ve collected a number of katas from other people and a few
I’ve developed myself. Have a look at: http://schuchert.wikispaces.com/Katas</p>

<h3><a name="_Toc202609195"><span>3.36.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Practice</a></h3>

<p class=BodyText>That goes without saying; you need to practice with the
language. Learning the language only while on the job, while useful, might
actually limit your learning. I started using the language August if 1989 and I
used it nearly daily until around June of 1990. I then took the summer off and
did not do any programming for about 2 months. In that 2-month interval, I was
able to figure out many things I only knew by rote. Because I was buried in the
problem and worried about deadlines, it limited what I was learning about the
language.</p>

<p class=BodyText>A way to mitigate that is to practice with katas. An even
better way is to pick one substantial problem and practice it over and over,
making slight variations on your approach each time. The idea is to become
familiar with the domain to the point where you are able to take individual
variables and change them. For example, there’s a design recommendation called
“tell don’t ask.” You might simply do a problem and universally apply this one
design idea. You’ll find doing this kind of active experimentation will give
you a deeper appreciation of the language. It will also translate to other
languages as well, so you’re not really just learning C++.</p>

<h2><a name="_Toc202609196"><span style='font-weight:normal'>3.37<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>What’s
coming up?</a></h2>

<p class=BodyText>It’s time to start a new problem. The approach will be
similar, but the design forces will be a bit more important. In this next
problem, you’ll won’t encounter much new C++, instead you’ll be reapplying what
you’ve already seen in the dice game to a problem with richer design issues.</p>

<h1><a name="_Toc202609197"><span style='font-weight:normal'>4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>RPN Calculator</a></h1>

<p class=BodyText>According to Wikipedia (<span class=MsoHyperlink>http://en.wikipedia.org/wiki/Reverse_Polish_notation</span>)
Reverse Polish Notation was created in 1954 by Burks, Warren, and Wright. In
reverse polish notation, also known as postfix notation, operands appear before
an operator. Here are a few examples of such notation:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:45.9pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Expression</span></p>
  </td>
  <td width=50 valign=top style='width:49.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Result</span></p>
  </td>
 </tr>
 <tr>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30 4 +</span></p>
  </td>
  <td width=50 valign=top style='width:49.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>34</span></p>
  </td>
 </tr>
 <tr>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30 4 -</span></p>
  </td>
  <td width=50 valign=top style='width:49.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>26</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>At the beginning of this century I was taking an internal
class on Test Driven Development where the instructor used a “regular”
calculator as the main example. For some reason, I chose to implement an RPN
calculator instead. While working in the class, it occurred to me that my pairing
partner and I were having an easier time at it than the other students. In
fact, this is because it easier to write an RPN calculator than a “regular”
calculator. An RPN calculator:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Does not require as much “memory” – when the user
selects an operator, you can immediately perform a calculation. Contrast this
with a regular calculator where upon entering a number and an operator, the
calculator has to remember both and wait for the next number before doing any
work.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Does not require () – operators happen immediately</span></p>

<p class=BodyText>In fact, according to HP Museum (<a
href="http://www.hpmuseum.org/hp9100.htm">http://www.hpmuseum.org/hp9100.htm</a>)
this is what made it possible for HP to build the first electronic RPN
calculator in 1968. The first HP calculator:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Weighted about 40 pounds</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Cost around $5,000 USD</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>And was considered a modern miracle</span></p>

<p class=BodyText>We are going to use a problem similar to an HP calculator as
the basis for our second problem. Whereas in the first problem we were looking
primarily at C++, the purpose of this problem is to look at:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Object Oriented Design</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Design Principles</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Design Patterns</span></p>

<p class=BodyText>Also, unlike the first problem where we tended to worked
bottom up, in this problem we will begin work top down, or out to in. We will
start with a series of examples for a first iteration. We’ll create automated
checks for those examples and clean up the code as we work our way through the
problem.</p>

<p class=BodyText>Side Note: I’ve used the problem many times. I’ve worked it
with “raw” TDD – no design up front, see where students take the problem. I’ve
also used it as a design problem where I have students work on up-front, doing
high-level and detailed design. For this book I decided to pick one path through
the problem and I somewhat arbitrarily decided on tending towards TDD versus
design up front. We will go from examples to tests. As we develop tests, I’ll
mention design decisions you need to make or consider.</p>

<h2><a name="_Toc202609198"><span style='font-weight:normal'>4.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Project Description</a></h2>

<p class=BodyText>For this problem you will create a programmable RPN
calculator. Your calculator will have:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Several functions, </span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Basic
functions such as add, subtract, multiply, divide, less than, greater than</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Bigger
functions such as sum, factorial, prime factors</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Stack
operations such as duplicate, drop</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It should be easy to add new operations to the
calculator</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The calculator should be “programmable”, meaning you
can create a new operation that is a combination of any existing operations</span></p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Those
new operations should execute in the same way as the built-in operations</p>

<p class=BulletList2><span style='font-size:11.0pt;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>It
should be possible to have one program refer to another program as well</p>

<p class=BodyText>The calculator will deviate from a standard HP calculator in
at least the following ways:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Our calculator will allow more than 4 numeric entries
on its stack</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We will use integer math for simplicity</span></p>

<h2><a name="_Toc202609199"><span style='font-weight:normal'>4.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>What’s Coming Up?</a></h2>

<p class=BodyText>Given this preliminary problem description, it’s time to get
started on the problem Here’s what to expect:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Story selection</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Example development</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Automated check writing</span></p>

<p class=BodyText>To do this well, we’ll also consider</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>GRASP patterns to help with developing automated checks</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Actor-system interaction and its impact on top-level
API design</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The lost-art of system events</span></p>

<h2><a name="_Toc202609200"><span style='font-weight:normal'>4.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Biting off just enough</a></h2>

<p class=BodyText>This problem already has a number of potential stories
including:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Operators: Adding numbers, calculating factorials,
division</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Stack Manipulation: dropping values, duplicating part
of the stack</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Programming</span></p>

<p class=BodyText>This is too much to attempt all at once so we should pick a
small set of stories for a first demonstration. Story writing and selection is
beyond the scope of this book. However, here are thoughts on a first cut:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add, Subtract – these are easy to understand and a
calculator without these features would be too surprising. If we were to only
pick one, I’d choose subtract. Why? Because unlike add, the order of the
numbers is important. However, these are close enough that we’ll do both of
them.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Multiply, Divide – these two finish off the set of
operations that even the most basic calculators include.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Factorial, Drop – these may seem like odd choices,
however, they have a fundamental difference from the previous four operations; like
add, subtract, etc., factorial produces a single result, however, unlike those
operations, factorial only needs one operand. Drop is similar to factorial in
that it only needs one value, but it produces no new numbers.</span></p>

<p class=BodyText>If we were to pick a theme or design force for this first
sprint, it appears as if we’re looking into math operations with a varying
number of input values and output values. With this in mind, a good next step is
to develop some concrete examples for each of these stories.</p>

<h2><a name="_Toc202609201"><span style='font-weight:normal'>4.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Develop Examples</a></h2>

<p class=BodyText>What is the difference between a story and an example? A
story describes a use of the system. An example fills in that story with
specific values. Often, we write these examples using a standard language, or
set of keywords. Here are some examples for each of our chosen stories:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=293
 style='width:292.5pt;margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Given the user enters</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>And </span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>And </span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>When the user selects</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Expect the result to be</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30 </span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>34</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>-</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>26</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>6</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>*</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>24</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>8</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>/</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>!</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>120</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3</span></p>
  </td>
  <td width=32 valign=top style='width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
  <td width=86 valign=top style='width:85.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>drop</span></p>
  </td>
  <td width=68 valign=top style='width:67.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5  3</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>These are all “happy-path” examples. They are simple,
complete and represent successful scenarios. What are some examples that represent
potential failures? One example might be overflow, another underflow. In a more
complete example we would not use integers but some numeric library to provide
better precision. Since we are using integers, we’ll disregard these valid
negative scenarios; what we’d write is an artifact of a simplifying decision,
so these checks while valid reflect incidental versus essential system
characteristics.</p>

<p class=BodyText>What about the following situations:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Using any of these with “too few” parameters</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Divide by zero with division</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Factorial of a value less than 1</span></p>

<p class=BodyText>An artifact of a real HP calculator is that there are always
4 numbers available. When you turn on the calculator, you have 4 values. Those
values could be all 0 or they might be values from the last time you used the
calculator. In either case, there’s no such thing as “too few parameters”. This
can be assumed knowledge, or we can capture a few examples to demonstrate this
idea:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=288
 style='width:4.0in;margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Given the user enters</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>When the user selects</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Expect the result to be</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>-</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>-4</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>*</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>/</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+ &lt;or&gt; - &lt;or&gt; *</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>/</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&lt;error: divide by 0&gt;</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>drop</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>!</span></p>
  </td>
  <td width=122 valign=top style='width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>These examples are still incomplete (they always will be).
There’s only one example that shows what happens where there are more than the
“perfect” number of values available. What happens when you attempt to add
values and there are extra values?</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Given the user enters</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>When the user selects</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Then the result is</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3  2  6  7  2     </span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>+</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3  2  6  9</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3  2  6  7  2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>-</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3  2  6  5</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>Given these examples, it seems that a user can enter several
values. Using add or subtract works with the two most recent values. Also, when
the order matters, the most recent value is on the right side of the operator
and the previous value is on the left.</p>

<p class=BodyText>This seems like a good start. We will probably end up with
more examples, but we’ll consider this first release done when all of these
examples work in automated checks.</p>

<h2><a name="_Toc202609202"><span style='font-weight:normal'>4.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Project Setup</a></h2>

<p class=BodyText>This is a new project so it’s time to create a new project
setup from scratch. If you need assistance, please refer to section 2.2.1
starting on page <span>20</span>.</p>

<h2><a name="_Toc202609203"><span style='font-weight:normal'>4.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The first automated check</a></h2>

<p class=BodyText>It’s time to start writing our first automated check. To
start writing it, we need to make a few decisions. This may seem like doing
design up front. The questions coming up are ones you’d need to answer as you
write an automated check. Answering them as you write the code for an automated
check versus thinking a touch and then writing the code for an automated check
accomplishes the same thing. In fact, either approach is a design effort. With
that in mind, here are some questions and answers:</p>

<p class=BodyText><span class=Standout>Question: What are we writing this first
automated check against?</span></p>

<p class=BodyText>Answer: Since this is an RPN calculator problem, and we are
working out to in, we will target the RPN calculator class with our first automated
check. This is an example of using the Controller GRASP pattern (<span
class=MsoHyperlink>http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Controller</span>).
The controller pattern is unfortunately named; it would have better been called
facilitator or coordinator. We have messages coming in from the outside via
some actor. The actor could be a human or another system. In our case, the
actor will be the automated check itself.</p>

<p class=BodyText><span class=Standout>Question: What are the logical steps of
this unit check?</span></p>

<p class=BodyText>Answer: Enter a number, enter a second number, perform some
operation, and verify the results.</p>

<p class=BodyText><span class=Standout>Question: Does “enter a number” mean a
full number, e.g. 30, or just one digit of a number?</span></p>

<p class=BodyText><img border=0 width=263 height=139 id="_x0000_i1046"
src="CppAndOOdTheLeastYouNeedToKnow_files/image025.gif"></p>

<p class=BodyText>Answer: This is a somewhat arbitrary decision. Rather, the
answer is somewhat arbitrary, making the decision is necessary. We could:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Enter individual digits like pressing buttons on a
calculator</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Enter full numbers, like collecting digits in a text
box in the UI and only presenting the final number to the calculator</span></p>

<p class=BodyText>I have done this problem both ways and for how far we are
going to take the problem, there won’t be much of a difference. From personal
experience, collecting individual digits leads to making it easier to maintain
the state of the system in a single location. This becomes important when you
start using a numeric library as opposed to using built-in (primitive) numbers.
It makes more work for us if we take in individual digits but that initial work
isn’t really too much.</p>

<p class=BodyText>Notice, as with most questions, experience can be a good
guide. When I use this problem in a class setting, I let the students decide.
Since I don’t have someone to make the decision, I flipped a coin and it came
up “numbers” so for this example (yes, really), we’ll be taking in full
numbers.</p>

<p class=BodyText>Here’s another problem to consider. If we built a complete
system with some kind of user interface, the values coming into system would
probably not be numbers but instead be strings of digits. In fact, one of the
things a controller does is translate requests from the outside world into
something the system can understand. It then decides where to send the request
and delegates the rest of the work to some kind of plain old C++ object (a
POCO). This is another decision I let the students make. This is another thing
that comes from writing many systems and having to design the system-level
interaction. Making a decision is essential; the actual decision for this
problem is somewhat arbitrary. So in addition to taking in numbers as opposed
to digits, the representation of those numbers will be integers and not
strings.</p>

<p class=BodyText><span class=Standout>Question: How will we select add, versus
subtract, etc.?</span></p>

<p class=BodyText>&nbsp;</p>

<p class=BodyText>Answer: There are a few options: Name, Parameterized. In a
“named” approach, there is a unique system event (or method) per math
operation. In a parameterized scheme, there is a single system event (method)
that takes a parameter, which names the operation:</p>

<p class=BodyText><img border=0 width=263 height=175 id="_x0000_i1047"
src="CppAndOOdTheLeastYouNeedToKnow_files/image026.gif"></p>

<p class=BodyText>The Named approach may seem like the obvious choice. This
approach has a few characteristics:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It leads to an API that is open-ended. As you grow the
system, the API will continue to expand.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Additionally, the client has to know which method to
call. If the user types “+” or clicks the “+” button, both of these actions
must be mapped to the “Add()” method. As the API grows, this mapping also
grows. </span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>If the code compiles, you know you’ll be calling a
particular method, which in a sense is like static (compile-time) checking.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It is easy to understand.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>This kind of interface will not work very well when we
consider programming the calculator.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In C++, there’s no language-defined way to add methods
to a class at runtime. Why is this important? There’s a desire to have the same
mechanism used for executing the build-in operations versus the macros created
by the user.</span></p>

<p class=BodyText>While this is typical, familiar even, that doesn’t mean it’s
a good idea nor does it necessarily mean it’s a bad idea.</p>

<p class=BodyText>Using the parameterized approach:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The API is locked down – this is an example of
protected variation (<span class=Standout>http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Protected_Variations</span>)and
it also is an example of applying the open-closed principle(<a
href="http://en.wikipedia.org/wiki/Open/closed_principle">http://en.wikipedia.org/wiki/Open/closed_principle</a>)
to the problem.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The client can allow the user to type “+” or press a
button with “+” as the label. The mapping is now done deeper in the system.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Even if the code compiles, you don’t know until you run
it if a particular operation will happen.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>This approach maps better to the requirement that
programs run the same as other operations.</span></p>

<p class=BodyText>We could choose either solution, but we must choose one. This
is probably one of the most important lessons: Picking a “wrong” solution is
often better than waiting to pick the “right” solution. To have a chance seeing
how a design can move from one API design to another, we’ll choose the named
method approach. We will eventually migrate to the parameterized approach.</p>

<p class=BodyText><span class=Standout>Question: How do we know the most recent
result?</span></p>

<p class=BodyText>Answer: An HP calculator has 4 registers: x, y, z, and t. The
x register is the “top” or most recent value. This register is also known as
the accumulator. To keep things simple, we could simply ask for either the x
register or the accumulator. Both terms are mentioned in an HP calculator
manual, so they come right from the domain. For simplicity, we’ll use getX(); it
comes right from the domain.</p>

<h3><a name="_Toc202609204"><span>4.6.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Was all of this necessary?</a></h3>

<p class=BodyText>The short answer is yes. If you agree, skip to the next
section. </p>

<p class=BodyText>If you are still here, then ask yourself the question, “What
is our goal?” We are trying to write an executing piece of code that will show
we can add two numbers. For this to work, it will have to compile. That means
we needed to make all of those decisions. We could just write the first automated
check and see what happens. In practice, you’ll be doing that. However, as you
get more experience, the first automated check will take more and more into
consideration (or for granted). Even when we practice “raw” TDD, our previous
experience feeds into the overall approach. So when I’m working on problems,
these kinds of things are going through my head either consciously or
subconsciously. You really do need to make these decisions; you can do so as
you write an automated check or up front. Since I’ll be writing the test for
you, you’d miss some of this if I don’t take the time to walk through it.</p>

<h3><a name="_Toc202609205"><span>4.6.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Checking Add</a></h3>

<p class=BodyText>Having setup your project, it’s finally time to create a
first test. Here is one such test that takes the previous section into
consideration:</p>

<h4>RpnCalculatorShould.cpp</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:black'> TEST_GROUP(RpnCalculatorShould) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:black'>  RpnCalculator *</span><span style='color:#0000C0'>calculator</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span><span
style='color:black'>  </span><span style='color:#7F0055'>void</span><span
style='color:black'> setup() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:black'>     </span><span style='color:#0000C0'>calculator</span><span
style='color:black'> = </span><span style='color:#7F0055'>new</span><span
style='color:black'> RpnCalculator;</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:black'>  }</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='color:black'>  </span><span style='color:#7F0055'>void</span><span
style='color:black'> teardown() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:black'>     </span><span style='color:#7F0055'>delete</span><span
style='color:black'> </span><span style='color:#0000C0'>calculator</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>  }</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'> };</span></p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:black'> TEST(RpnCalculatorShould, AddTwoNumbers) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='color:black'>  </span><span style='color:#0000C0'>calculator</span><span
style='color:black'>-&gt;enter(30);</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span><span
style='color:black'>  </span><span style='color:#0000C0'>calculator</span><span
style='color:black'>-&gt;enter(4);</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span><span
style='color:black'>  </span><span style='color:#0000C0'>calculator</span><span
style='color:black'>-&gt;add();</span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span><span
style='color:black'>  LONGS_EQUAL(34, </span><span style='color:#0000C0'>calculator</span><span
style='color:black'>.getX());</span></p>

<p class=CodeExample><span class=CodeLineNumber>18:</span><span
style='color:black'> }</span></p>

<p class=BodyText>A quick recap from the previous project may be in order:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>To use CppUTest you need a TEST_GROUP for a set of
related tests and a TEST for an individual test. You get access to that from
line 1, line 3 introduces the TEST_GROUP, line 13 the TEST.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The TEST_GROUP is more commonly known as a test
fixture. We put things in the test fixture that are common for all tests.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>In a language with refactoring tools, I’d normally
start with just a test method and refactor my way into a common test fixture.
Since we don’t have that and since CppUTest can report false positives if you
put objects in your test fixture, I choose to instead use a pointer to a
calculator on line 4. Then the setup(5) and teardown(8) methods, which CppUTest
calls before and after each TEST method, allocate and the deallocate the
calculator. C++ uses a different symbol for calling a method through a pointer
“</span><span class=CodeExampleChar><span lang=EN-GB>-&gt;</span></span><span
lang=EN-GB>” versus an object “</span><span class=CodeExampleChar><span
lang=EN-GB>.</span></span><span lang=EN-GB>” so I start with a pointer since I
will probably need it later anyway.</span></p>

<p class=BodyText>The body of the TEST macro (the automated check) is a direct
interpretation of the previous few pages of discussion. To make this work we’ll
need to create the missing class, RpnCalculator. To do that, we’ll probably
want to follow some basic C++ guidelines. With that in mind, here’s a header
file for RpnCalculator:</p>

<h4>RpnCalculator.h</h4>

<p class=CodeExample><span class=CodeLineNumber>01: </span>#pragma<span
style='color:black'> once</span></p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>#ifndef<span
style='color:black'> RPNCALCULATOR_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>#define<span
style='color:black'> RPNCALCULATOR_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>04:</span></p>

<p class=CodeExample><span class=CodeLineNumber>05: </span><span
style='color:#7F0055'>#include</span><span style='color:black'> </span><span
style='color:#2A00FF'>&quot;RpnCalculator.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span></p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>class<span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>public<span
style='color:black'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:black'>   RpnCalculator();</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>   </span>virtual<span style='color:black'>
~RpnCalculator();</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'>   </span>void<span style='color:black'> enter(</span>int<span
style='color:black'> value);</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span><span
style='color:black'>   </span>void<span style='color:black'> add();</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:black'>   </span>int<span style='color:black'> getX() </span>const<span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='color:black'>  </span></p>

<p class=CodeExample><span class=CodeLineNumber>15: </span>private<span
style='color:black'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span><span
style='color:black'>   RpnCalculator(</span>const<span style='color:black'> </span>RpnCalculator<span
style='color:black'>&amp;);</span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span><span
style='color:black'>   </span>RpnCalculator<span style='color:black'>
&amp;operator=(</span>const<span style='color:black'> </span>RpnCalculator<span
style='color:black'>&amp;);</span></p>

<p class=CodeExample><span class=CodeLineNumber>18: </span><span
style='color:black'>};</span></p>

<p class=CodeExample><span class=CodeLineNumber>19:</span></p>

<p class=CodeExample><span class=CodeLineNumber>20: </span>#endif</p>

<p class=BodyText>There is nothing new in this header file if you’ve worked
through theDice Game at the beginning of this book. There’s no good reason to
copy objects of this class so lines 16, and 17 make that unlikely. The
destructor, line10, is virtual because I used Eclipse to create the class and
that’s its default setting. It is unlikely we’ll create a subclass of this
class, so the virtual on the destructor is not necessary. I left it as is
because I have no compelling reason to do otherwise.</p>

<p class=BodyText>The test required enter(), add() and getX(), lines11 – 13.
This header file with no source file will allow the test to compile (but not
link).</p>

<p class=BodyText>To get the code to link – and the automated check to pass,
here’s a first cut at an implementation:</p>

<h4>RpnCalculator.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::RpnCalculator()
{}</span></p>

<p class=CodeExample><span style='color:black'>RpnCalculator::~RpnCalculator()
{}</span></p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::enter(</span><span style='color:#7F0055'>int</span><span
style='color:black'> value) {}</span></p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::add() {}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> RpnCalculator::getX() </span><span style='color:#7F0055'>const</span><span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> 34;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Sure enough, this gets passing results:</p>

<p class=CodeExample>.</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (1 tests, 1 ran, 1 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<p class=BodyText>Before moving on, we need to check if there are any places
where we might refactor the code. There’s not much right now. Sometimes we need
to allow code to fester a bit before there’s enough to know how to generalize
it. So we’ll move on to the next example.</p>

<h2><a name="_Toc202609206"><span style='font-weight:normal'>4.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Checking Subtract</a></h2>

<p class=BodyText>The second example is subtraction. We can take the first
automated check as a baseline and create our second one:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SubtractTwoNumbers) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(30);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;subtract();</p>

<p class=CodeExample>   LONGS_EQUAL(26, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>For this to compile, we need to update the header file. To
get the code to link we’ll need to update the source file:</p>

<h4>Added to RpnCalculator.h  </h4>

<p class=CodeExample><span style='color:#7F0055'>void</span> subtract();</p>

<h4>Added to RpnCalculator.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>}</p>

<p class=BodyText>This gets us to the new test failing while the original test
passes. Now the challenge, we want to the production code to keep the original check
passing and get the new check passing as well.</p>

<p class=BodyText>One thing we can do is covert the hard-coded value returned
by getX() into a variable. A variable will allow us to generate different
results. Those different results can be performed by the add() and subtract()
methods. Moving from a hard-coded value to either a calculated value or
introducing a variable is a good second step as you build solutions. In fact,
you might consider reviewing a recommendation by Robert Martin he calls the
transform priority premise (<a
href="http://cleancoder.posterous.com/the-transformation-priority-premise">http://cleancoder.posterous.com/the-transformation-priority-premise</a>).</p>

<p class=BodyText>In our case, we need to make four changes:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add a variable</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Set the result in add()</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Set the result in subtract()</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Return the result in getX()</span></p>

<p class=BodyText>While not strictly necessary, we should also initialize the
member data value in the constructor because C++ won’t do it for us. Here are
those updates:</p>

<h4>Added to RpnCalculator.h</h4>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>x</span><span
style='color:black'>;</span></p>

<h4>Updated Constructor</h4>

<p class=CodeExample>RpnCalculator::RpnCalculator() : <span style='color:#0000C0'>x</span>(0)
{</p>

<p class=CodeExample>}</p>

<h4>Updated add(), subtract(), getX()</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 34;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 26;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span>
RpnCalculator::getX() <span style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>x</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>These changes will return you to compiling, linking and all
automated checks passing.</p>

<h2><a name="_Toc202609207"><span style='font-weight:normal'>4.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>What about Actual Values?</a></h2>

<p class=BodyText>Right now the implementation does not use the actual values
provided when calling the enter() method. When you are working on a problem,
you will often come across these challenges. A quick review of the examples
shows that the first six each describe the use of a different operation.
Nothing in those examples will force use to actually store any values. The
first time that occurs is when we write a second automated check against an
operator that already has an implementation. This is an unsatisfying result to
many programmers. We could jump ahead in the list of examples, but the next
example that duplicates the use of an operation is add where there is only one
item provided. This would force us to tackle two problems at the same time:
really writing add(), dealing with the situation when there are less than two
provided values.</p>

<p class=BodyText>A danger at this point is speculative design. We could just
do something and see where it goes. However, if we start that, we’ll probably
end up writing code that has no automated checks for it.  Alternatively, we
could write another automated check for add() or subtract() that uses two
different values. A problem with that is that the second check is a duplicate
of the first test. Duplication is not a good thing. Duplicated checks represent
rework when things change. Too much duplication might lead to enough inertia to
make a change seem too costly.</p>

<p class=BodyText>Referring back to the transform priority premise (<a
href="http://cleancoder.posterous.com/the-transformation-priority-premise">http://cleancoder.posterous.com/the-transformation-priority-premise</a>),
the recommendation is to pick automated checks that will choose simple code
changes over more complex code changes. Based on that, we want to either
consider one of the provided examples or create another example that will help
us. We currently have an empty implementation of enter(), so something that
will force us to grow the implementation of enter() and that also makes sense
to for the other operators seems to be warranted.</p>

<p class=BodyText>In an earlier discussion we noted that the most recently
entered value was on the right side of the operator while the previously
entered value was on the left side. What if we simply check that? We will enter
two values and make sure we can get back those two values.</p>

<p class=BodyText>Here is one such automated check:</p>

<p class=CodeExample>TEST(RpnCalculatorShould,
ReturnValuesInReverseOrderOfEntry) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(30);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>   LONGS_EQUAL(4, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;drop();</p>

<p class=CodeExample>   LONGS_EQUAL(30, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This is OK, but notice that it also forces us to introduce
drop. That might be OK, let’s see what we can do to make this work:</p>

<h4>Add member function declaration to RpnCalculator.h</h4>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> drop();</p>

<h4>Update enter() and drop()</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::enter(<span style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = value;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::drop() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 30;</p>

<p class=CodeExample>}</p>

<p class=BodyText>After making these changes, you should see the following
execution results:</p>

<p class=CodeExample><span style='color:black'>...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>OK (3 tests, 3 ran, 4 checks, 0
ignored, 0 filtered out, 1 ms)</span></p>

<p class=BodyText>It did grow the system, but our implementation is still not
storing multiple results. Can we pick a transformation to the code that might
promote the variable x into a collection of values? What if we simply implement
the example for drop? Doing so will force drop to become more complicated;
maybe it will also force us to remember all the values entered as well.</p>

<h2><a name="_Toc202609208"><span style='font-weight:normal'>4.9<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Drop</a></h2>

<p class=BodyText>Here’s an automated example for drop:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SupportDroppingValues) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(5);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(3);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(1);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;drop();</p>

<p class=CodeExample>   LONGS_EQUAL(3, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This automated check fails. Also, it will be hard to make
this work without doing some “real” work. In fact the work we’ve been doing is
real. Once you’ve been practicing TDD for some time, you’ll probably agree.
Even so, this makes things more interesting.</p>

<p class=BodyText>Notice that we enter several values but we only store the
last. That’s a clue for what we could do next. Convert our single value, x,
into many values, some kind of collection. That seems like not too much of a
leap. We need to do that in such a way as to keep existing checks passing, get
the failing check to pass and we don’t want to spend too much time doing it.</p>

<p class=BodyText>Before we jump in and change it, what collection should we
use? The values need to come out in the reverse order entered. That suggests a
stack. Conveniently, C++ has a stack class, so we can use that.</p>

<p class=BodyText>Changing from a simple variable to a collection seems like
refactoring. We have a failing test. Refactoring with a failing test is frowned
upon as we discuss elsewhere. So before we start making that change, let’s
first “remove” this test by replacing TEST with IGNORE_TEST:</p>

<p class=CodeExample>IGNORE_TEST(RpnCalculatorShould, SupportDroppingValues) {</p>

<p class=BodyText>Now we have all passing tests and we are ready to change our
implementation.</p>

<h3><a name="_Toc202609209"><span>4.9.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First introduce the stack</a></h3>

<p class=BodyText>Here’s an updated RpnCalculator.h introducing the stack.
Notice that the x attribute is still there. When we are done, we’ll remove it.</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;stack&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>typedef</span><span style='color:black'> std::stack&lt;</span><span
style='color:#7F0055'>int</span><span style='color:black'>&gt; </span>RpnStack<span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> </span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>x</span><span
style='color:black'>;</span></p>

<p class=CodeExample>…</p>

<p class=BodyText>Now we can update all of the existing methods to use both the
stack and x:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::enter(<span style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = value;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(value);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 34;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(34);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 26;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(26);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::drop() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>x</span> = 30;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Run your automated checks; verify that everything is passing
with one ignored test:</p>

<p class=CodeExample>!...</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (4 tests, 3 ran, 4 checks, 1 ignored, 0 filtered out, 1
ms)</p>

<p class=BodyText>Now you can remove X from the header file and source file;
you’ll also need to update getX() to return the top of the stack:</p>

<h4>RpnCalculator.cpp minus x member data</h4>

<p class=CodeExample>RpnCalculator::RpnCalculator() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>RpnCalculator::~RpnCalculator() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::enter(<span style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(value);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(34);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(26);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::drop() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span>
RpnCalculator::getX() <span style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Interestingly, if you simply update the INGORE_TEST to be a
TEST again and execute your tests:</p>

<p class=CodeExample>....</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>OK (4 tests, 4 ran, 5 checks, 0 ignored, 0 filtered out, 0
ms)</p>

<p class=BodyText>That worked out pretty well.</p>

<h2><a name="_Toc202609210"><span style='font-weight:normal'>4.10<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Getting
Factorial Working</a></h2>

<p class=BodyText>We only have one example for factorial: 5 -&gt; 120. The
factorial of 0 is 1. For anything less than 1, we do not have any examples. For
the purposes of this example, we’ll say that anything less than 0, the result
is simply consumed. Here’s a sequence of tests for those examples:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, CalculateTheFactorialOf5As120) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(5);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;factorial();</p>

<p class=CodeExample>   LONGS_EQUAL(120, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>To get this to pass we’ll update the header file:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> factorial();</p>

<p class=BodyText>And add a member function definition to the source:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> RpnCalculator::factorial()
{</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(120);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Not to worry, the next text makes us do a little more work:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, CalculateTheFactorialOf0As1) {</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;enter(0);</p>

<p class=CodeExample>   <span style='color:#0000C0'>calculator</span>-&gt;factorial();</p>

<p class=CodeExample>   LONGS_EQUAL(1, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>At this point, we can simply write a simple factorial
implementation:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::factorial() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> operand = <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> result = 1;</p>

<p class=CodeExample>  <span style='color:#7F0055'>while</span>(operand &gt; 1)</p>

<p class=CodeExample>    result *= operand--;</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(result);</p>

<p class=CodeExample>}</p>

<p class=BodyText>And finally, what happens if the value is negative?</p>

<p class=CodeExample>TEST(RpnCalculatorShould,
ConsumeValueForFactorialOfNegative) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(-4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;factorial();</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Before looking at the implementation, why 0? Remember that
the calculator always has values. The real calculator has 4 hardware registers,
all initially 0 (or whatever value they had when you last used the calculator).
So there are always values. This calculator is brand new and only had ever had
a single value entered. Therefore, upon consuming that value, there should be
“no entered numbers”, which means the calculator will have only 0s available.</p>

<p class=BodyText>Here’s one way to do this:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::factorial() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> operand = <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (operand &gt;= 0)
{</p>

<p class=CodeExample>    <span style='color:#7F0055'>int</span> result = 1;</p>

<p class=CodeExample>    <span style='color:#7F0055'>while</span> (operand &gt;
1)</p>

<p class=CodeExample>      result *= operand--;</p>

<p class=CodeExample>    <span style='color:#0000C0'>values</span>.push(result);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span>
RpnCalculator::getX() <span style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(<span
style='color:#0000C0'>values</span>.size() &gt; 0)</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> 0;</p>

<p class=CodeExample>}</p>

<p class=BodyText>In the factorial() method, we actually consume the value
entered by calling values.pop(). However, this leaves the stack empty for our
most recent test. If you simply run the test, it will fail in some way that may
not be obvious. It turns out that if you call top() on an empty stack, the
method throws an exception.</p>

<h2><a name="_Toc202609211"><span style='font-weight:normal'>4.11<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Revisit
Add</a></h2>

<p class=BodyText>Now that we have finally written an actual implementation for
factorial, let’s revisit the other operators before adding new ones. First add.
We have another example for add, here’s an automated check for that example:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddWhenTheresASingleValue) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;add();</p>

<p class=CodeExample>  LONGS_EQUAL(4, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This test fails because the underlying add() hard-codes the
result to 34. It is time to fix this. However, to fix this we’ll have to
consider what factorial did: it called top() and pop() for one operand, so
we’ll need to do that for add as well:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 = <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 = <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(v1 + v2);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Whoops, this fails. Problem is, top() and pop() really need
to be guarded like in the getX() method. Rather than calling top(), we can call
getX() and then guard pop():</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 = getX();</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(!<span
style='color:#0000C0'>values</span>.empty())</p>

<p class=CodeExample>    <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 = getX();</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(!<span
style='color:#0000C0'>values</span>.empty())</p>

<p class=CodeExample>    <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(v1 + v2);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This works, which is a qualified success.</p>

<h3><a name="_Toc202609212"><span>4.11.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Feature Envy</a></h3>

<p class=BodyText>Looking at the add() method it makes 4 direct calls to
values, which is a stack. Furthermore, it makes two calls to getX(), which
makes 2 calls to the stack as well. All told, that’s 8 calls to a stack from
add(). You can assume that we’ll have to do the same thing in subtract(),
factorial(), etc., all operations that use the stack.</p>

<p class=BodyText>When one method makes heavy use of data or methods in another
object, this is called feature envy (<a
href="http://c2.com/cgi/wiki?FeatureEnvySmell">http://c2.com/cgi/wiki?FeatureEnvySmell</a>).
Martin Fowler describes feature envy as “…a method that seems more interested
in a class other than the one it is in.” This seems to fit that description
well. How can we fix it? Luckily, Martin Fowler has something to say about that
as well. His first recommendation is move method. That is, move the method into
the target class.</p>

<p class=BodyText>What does this mean for us? It means we want to move the
check for size into the stack. But the stack is not our class; we are using it
from the standard library. Fine, we will create our own stack class that is
built upon the standard stack class. That’s the next section.</p>

<h2><a name="_Toc202609213"><span style='font-weight:normal'>4.12<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Resolving
Feature Envy: Writing Our Own Stack</a></h2>

<p class=BodyText>This is not a surprising result to me. Collection classes are
handy and they are also a common source of duplicated code. Why? Collections
such as the stack class can only have general behavior. That behavior should be
simple and complete. The stack is a good example. You can push until it is
full, which takes a lot of values. You can pop values off it or look at its top
only when in has values on it; its size is not zero. That’s a typical stack
data type behavior, but we are using a stack to implement something that does
not behave exactly like a stack. In our case, the values are last in, first out
(LIFO) like a stack. Unlike a stack, however, we always have values. The idea
of empty() doesn’t really apply. When a user has not entered any values onto a
calculator, the calculator has 0s.</p>

<p class=BodyText>This discrepancy between our domain and what built-in classes
have for default behavior is actually the norm in my experience. I saw one
project where an effort to remove duplication just within individual source
files across a 15,000,000 million line source base of C++ resulted in a 30%
reduction of code side. Just over half of that reduction related to the use of
collections. Does that mean collections are bad? No, it just means that they
serve as a starting point only.</p>

<p class=BodyText>In our case, we want something that behaves like a stack but
one that is never empty. We can do this in a number of ways:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Roll our own implementation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use an existing one</span></p>

<p class=BodyText><img border=0 width=203 height=54 id="_x0000_i1048"
src="CppAndOOdTheLeastYouNeedToKnow_files/image027.gif"></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Inherit from an existing one</span></p>

<p class=BodyText><img border=0 width=86 height=126 id="_x0000_i1049"
src="CppAndOOdTheLeastYouNeedToKnow_files/image028.gif"></p>

<p class=BodyText>The first option is obvious, create the solution from
scratch. The next two options are more typical. The last option, inheritance,
is normally the one I’d choose last. Inheritance is the single highest form of
coupling in C++. If there are methods in the base class you do not want
exposed, you have other options such as protected or private inheritance, but I
do not use these language features. If, for some reason, you want to change
method signatures, you might find it hard to do so (depending on the change).
In this case, the base class does not expose any virtual methods, so even if we
do use inheritance, we won’t want to pass around a reference or pointer to the
base class when using the derived class. Inheriting from concrete class such as
this can cause problems such as calling the wrong method.</p>

<p class=BodyText>The middle option, an RpnStack holds onto an instance of an
std::stack, is an example of using delegation instead of inheritance has
mentioned in the book Design Patterns(<a
href="http://en.wikipedia.org/wiki/Design_Patterns">http://en.wikipedia.org/wiki/Design_Patterns</a>).
There’s no chance to confuse an RpnStack with an std::stack because the types
would not be compatible, whereas using inheritance, they would be. So with no
other reason, and in general, I’d pick the second option over the third option.</p>

<p class=BodyText>In this case, however, I’m going to demonstrate the third
option to show how to inherit from template classes and also how to invoke
base-class methods.</p>

<h3><a name="_Toc202609214"><span>4.12.1<span style='font:7.0pt "Times New Roman"'>
</span></span>First automated check: top works on an empty stack</a></h3>

<p class=BodyText>Before jumping in, we’ll use automated checks to verify our
implementation. Then we’ll go back and update the RpnCalculator to use our
custom RpnStack. Here’s a first check:</p>

<h4>RpnStackShould.cpp</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span><span
style='color:black'> TEST_GROUP(RpnStackShould) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:black'>   </span>RpnStack<span style='color:black'> *</span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:black'>   </span><span style='color:#7F0055'>void</span><span
style='color:black'> setup() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='color:black'>     </span><span style='color:#0000C0'>values</span><span
style='color:black'> = </span><span style='color:#7F0055'>new</span><span
style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>   </span><span style='color:#7F0055'>void</span><span
style='color:black'> teardown() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'>     </span><span style='color:#7F0055'>delete</span><span
style='color:black'> </span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:black'> };</span></p>

<p class=CodeExample><span class=CodeLineNumber>14: </span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span><span
style='color:black'> TEST(RpnStackShould, HaveATopAfterCreation) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span><span
style='color:black'>   LONGS_EQUAL(0, </span><span style='color:#0000C0'>values</span><span
style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span><span
style='color:black'> }</span></p>

<p class=BodyText>This is a standard automated check using CppUTest. Notice the
introduction on line 6 of a pointer to an object? CppUTest does memory
checking, our class is going to use a class that does dynamic allocation. If we
want a common setup across multiple automated checks, this is the place to put
it. However, because of the underlying auto-registration of automated checks,
CppUTest may report a false-positive memory leak. To avoid this problem from
the beginning, use a pointer, line 6, allocate it in a setup method, lines 7 –
8 and release it in a teardown method, lines 10 – 12.</p>

<p class=BodyText>To get this to compile, link and pass:</p>

<h4>RpnStack.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> RPNSTACK_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> RPNSTACK_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&lt;stack&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> RpnStack : <span
style='color:#7F0055'>public</span> std::stack&lt;<span style='color:#7F0055'>int</span>&gt;
{</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  RpnStack();</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span> ~RpnStack();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> top() <span
style='color:#7F0055'>const</span>;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span>:</p>

<p class=CodeExample>  RpnStack(<span style='color:#7F0055'>const</span>
RpnStack&amp;);</p>

<p class=CodeExample>  RpnStack&amp; operator=(RpnStack&amp;);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>RpnStack.cpp</h4>

<p class=CodeExample><span class=CodeLineNumber>01: </span><span
style='color:#7F0055'>#include</span><span style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span></p>

<p class=CodeExample><span class=CodeLineNumber>03: </span><span
style='color:black'>RpnStack::RpnStack() {}</span></p>

<p class=CodeExample><span class=CodeLineNumber>04: </span><span
style='color:black'>RpnStack::~RpnStack() {}</span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span><span
style='color:#7F0055'>int</span><span style='color:black'> RpnStack::top() </span><span
style='color:#7F0055'>const</span><span style='color:black'> {</span></p>

<p class=CodeExample><span class=CodeLineNumber>07: </span><span
style='color:black'>  </span><span style='color:#7F0055'>if</span><span
style='color:black'>(!empty())</span></p>

<p class=CodeExample><span class=CodeLineNumber>08: </span><span
style='color:black'>    </span><span style='color:#7F0055'>return</span><span
style='color:black'> std::</span>stack<span style='color:black'>&lt;</span><span
style='color:#7F0055'>int</span><span style='color:black'>&gt;::top();</span></p>

<p class=CodeExample><span class=CodeLineNumber>09: </span><span
style='color:black'>  </span><span style='color:#7F0055'>return</span><span
style='color:black'> 0;</span></p>

<p class=CodeExample><span class=CodeLineNumber>10: </span><span
style='color:black'>}</span></p>

<p class=BodyText>Line 8 demonstrates how to call a base-class method. Our
version of top() returns 0 if the stack is empty otherwise it returns whatever
the base-class top() method would have returned.</p>

<p class=BodyText>To get pop() well behaved is more of the same:</p>

<p class=CodeExample>TEST(RpnStackShould, HaveASizeOf0AfterPopWhenEmpty) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>-&gt;pop();</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>values</span>-&gt;size());</p>

<p class=CodeExample>}</p>

<p class=BodyText>If you run this test without updating RpnStack it fails:</p>

<p class=CodeExample>../RpnStackShould.cpp:21: error: Failure in
TEST(RpnStackShould, HaveASizeOf0AfterPopWhenEmpty)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   expected &lt; 0 0x0000000000000000&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   but was  &lt;-1 0xffffffffffffffff&gt;</p>

<p class=BodyText>Now update pop() as well, add a method declaration:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> pop();</p>

<p class=BodyText>And definition:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> RpnStack::pop() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(!empty())</p>

<p class=CodeExample>    std::stack&lt;<span style='color:#7F0055'>int</span>&gt;::pop();</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609215"><span>4.12.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Update RpnCalculator</a></h3>

<p class=BodyText>Now simply update the RpnCalculator header file to use
RpnStack:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> </span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=BodyText>It should no longer be necessary to check the size anywhere
in the source file:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(v1 + v2);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span> RpnCalculator::getX()
<span style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>values</span>.top();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Did you notice that factorial() called top() without checking
the size. There was a bug there, we just had not yet noticed it. This is just a
reminder that feature envy tends to lead to either code duplication or defects
when the same target object is treated differently because while there was some
duplication, there wasn’t enough duplication. Now that we’ve created a
domain-specific stack, we get the right behavior and reduce code duplication.</p>

<h2><a name="_Toc202609216"><span style='font-weight:normal'>4.13<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Finish
subtract</a></h2>

<p class=BodyText>Now we can write a test for subtract that starts with just
one value instead of two on the stack:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SubtractWhenTheresASingleValue)
{</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;subtract();</p>

<p class=CodeExample>  LONGS_EQUAL(-4, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This test fails when you run it because the implementation
for subtract is incomplete. Try just copying add() and replacing the + with -:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(v1 - v2);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Run the tests:</p>

<p class=CodeExample>../RpnCalculatorShould.cpp:72: error: Failure in
TEST(RpnCalculatorShould, SubtractWhenTheresASingleValue)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   expected &lt;-4 0xfffffffffffffffc&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   but was  &lt; 4 0x0000000000000004&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>../RpnCalculatorShould.cpp:26: error: Failure in
TEST(RpnCalculatorShould, SubtractTwoNumbers)</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   expected &lt; 26 0x000000000000001a&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>   but was  &lt;-26 0xffffffffffffffe6&gt;</p>

<p class=BodyText>Not only did that not work, it caused another test to fail!
In this case we need to reorder the operands:</p>

<p class=BodyText>  <span style='color:#0000C0'>values</span>.push(v2 - v1);</p>

<p class=BodyText>That fixes it. This makes sense. Subtract cares about the
order of operands whereas add does not. But this gives us something ugly: two
methods that are almost duplicates of each other:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {     <span style='color:#7F0055'>void</span>
RpnCalculator::subtract() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 =
getX();                <span style='color:#7F0055'>int</span> v1 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();                  
<span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 =
getX();                <span style='color:#7F0055'>int</span> v2 = getX();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();                  
<span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(v1 +
v2);           <span style='color:#0000C0'>values</span>.push(v2 – v1);</p>

<p class=CodeExample>}                               }</p>

<p class=BodyText>If this were the only duplication, then it might be ok. We
have multiply and divide as well for our first release. They will be the same
as well. Four copies of the same code is not a good idea. It leads to
duplicated maintenance. It is also error prone. For example, what happens if
someone forgets to pop the second value? The operation will appear to work but
the next operation will be left with the wrong values on the stack. This is a
problem with attributes in general. Every attribute is a means of one method
causing another method to fail. In this case, the methods are not exact
duplicates, which means we might miss it as well as tools that look for duplicated
code.</p>

<h2><a name="_Toc202609217"><span style='font-weight:normal'>4.14<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Dreaded
Duplication or DRY</a></h2>

<p class=BodyText>A fundamental principle of software development is Don’t
Repeat Yourself – DRY(<a
href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">http://en.wikipedia.org/wiki/Don't_repeat_yourself</a>).
We have duplication between add and subtract, but more generally we’ll have
this problem across all operations that consume two values and produce a single
value.</p>

<p class=BodyText>There are several ways to fix this problem, here are a few
ideas:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Ignore it, we’re paid by the number of lines so duplication
is a good thing</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Write a utility method that does everything but + or –
and pass in a pointer to a function which does just the + or –, e.g.:</span></p>

<p class=CodeExample>   void binaryOp(RpnStack &amp;values, int (*pf)(int,
int)) {</p>

<p class=CodeExample>     <span style='color:#7F0055'>int</span> v1 = values.top();</p>

<p class=CodeExample>     <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>     <span style='color:#7F0055'>int</span> v2 = values.top();</p>

<p class=CodeExample>     <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample><span style='color:#0000C0'>     int result = pf(</span>v2,
v1);</p>

<p class=CodeExample>     <span style='color:#0000C0'>values</span>.push(result);</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   int addIt(int lhs, int rhs) {</p>

<p class=CodeExample>     return lhs + rhs;</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   void RpnCalculator::add() {</p>

<p class=CodeExample>     binaryOp(values, addIt);</p>

<p class=CodeExample>   }</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create a class that does + or – instead of a pointer to
a member function:</span></p>

<p class=CodeExample>class BinaryOperator {</p>

<p class=CodeExample>  virtual int calculate(int lhs, int rhs) = 0;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>class Add : public BinaryOperator {</p>

<p class=CodeExample>  int calculate(int lhs, int rhs) { return lhs + rhs; }</p>

<p class=CodeExample>};</p>

<p class=CodeExample>class Subtract : public BinaryOperator {</p>

<p class=CodeExample>  int calculate(int lhs, int rhs) { return lhs - rhs; }</p>

<p class=CodeExample>};</p>

<p class=CodeExample>void binaryOp(RpnStack &amp;values, BinaryOperator
&amp;op) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 = values.top();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 = values.top();</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample><span style='color:#0000C0'>  int result = op.calculate(</span>v2,
v1);</p>

<p class=CodeExample>  <span style='color:#0000C0'>values</span>.push(result);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This last option has a name; it is called the Template Method
Pattern. Its name is unfortunate as it was named before template methods were
added to C++. Even so, this last option is moving in a good direction. However,
notice that we’ll have to do something special for each of the different kinds
of operators. The method binaryOp above does not belong to RpnCalculator. In
fact, it demonstrates feature envy. In this case, however, it does not make
sense to move the method into RpnStack as in the last case with top() and pop(),
but we can still look at feature envy for ideas. There are three suggestions to
resolve feature envy:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Move method, which is what we did with RpnStack</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Extract method, which is what binaryOp is an example of</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Extract class, which is what we are going to do</span></p>

<p class=BodyText>The calculator has a number of operations. Each operation:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Consumes a number of operands (0 or more)</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Optionally performs a calculation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Produces a number of operands (0 or more)</span></p>

<p class=BodyText>We need to put the responsibility where it belongs and it
best belongs with the operation. Feature envy suggests extracting a class, and
general assignment of responsibility suggests what that class should do. We can
also look to the GRASP patterns for inspiration. One of the GRASP patterns is
“information expert” (<a
href="http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Information_Expert">http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Information_Expert</a>)
– put the responsibility with the thing that has the data. This does not
exactly match because we are not talking about who has the data so much as the
thing that selects the variation – the operation. Another GRASP pattern might
match better: protected variation(<a
href="http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Protected_Variations">http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Protected_Variations</a>)
– put the responsibility where it varies. </p>

<p class=BodyText>Notice that we can do this for each of our operations. If
each of our operations becomes a class and we treat them as variations on a
general theme, then we are using a design pattern known as the Strategy Pattern(<a
href="http://en.wikipedia.org/wiki/Strategy_pattern">http://en.wikipedia.org/wiki/Strategy_pattern</a>).
This might look something like:</p>

<p class=BodyText><img border=0 width=214 height=90 id="_x0000_i1050"
src="CppAndOOdTheLeastYouNeedToKnow_files/image029.gif"></p>

<p class=BodyText>This is a good intermediate step. This alone does not solve
the duplication problem. If we combine this with the example of the binary
operator we get this:</p>

<p class=BodyText><img border=0 width=211 height=139 id="_x0000_i1051"
src="CppAndOOdTheLeastYouNeedToKnow_files/image030.gif"></p>

<p class=BodyText>Wow, that is a lot to do. How can we possibly do this while
keeping our tests passing?</p>

<h3><a name="_Toc202609218"><span>4.14.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Extract Classes</a></h3>

<p class=BodyText>We start by extracting classes; one for each existing
operation. Notice that we’ll be doing this by refactoring. When we are done, we
might consider moving automated checks around.</p>

<p class=BodyText>Since we are taking an existing member function and we want
to extract it to another class, a good first start is to simply extract a local
function and get it to compile:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> addIt(RpnStack
&amp;values) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v1 =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> v2 =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  values.push(v1 + v2);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::add() {</p>

<p class=CodeExample>  addIt(<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now that we’ve made this method have no direct dependency on
the RpnCalculator class, we can easily extract a class called Add right from
the add method:</p>

<h4>Add.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> ADD_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> ADD_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> RpnStack;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Add {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<p class=BodyText>Notice the name change from addIt to perform. The method name
makes more sense for all operations.</p>

<h4>Add.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Add::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> v1 = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> v2 = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  values.push(v1 + v2);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>And a final update to RpnCalculator:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::add() {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Add<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>All checks should pass.</p>

<h3><a name="_Toc202609219"><span>4.14.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Keeping it the same</a></h3>

<p class=BodyText>Now that we have one example of what all operations will look
like in the Add class, we can extract an interface and then use that as the
bases for the other operations. Here is such an interface extracted:</p>

<h4>MathOperation.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span>
MATHOPERATION_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span>
MATHOPERATION_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> RpnStack;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span>
~MathOperation() = 0;</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span> <span
style='color:#7F0055'>void</span> perform(RpnStack &amp;values) = 0;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<p class=BodyText>The destructor is a so-called special member function. We’ll
need to define it:</p>

<h4>MathOperation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>MathOperation::~MathOperation()
{</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Now that this interface exists, we can update add to use it:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Add<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>RpnStack<span
style='color:black'> &amp;values);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h3><a name="_Toc202609220"><span>4.14.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Updating Subtract</a></h3>

<p class=BodyText>Making the change for Subtract is nearly a copy of Add:</p>

<h4>Subtract.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> SUBTRACT_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> SUBTRACT_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Subtract : <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>Subtract.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Subtract::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> v1 = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> v2 = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  values.push(v2 - v1);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>RpnCalculator::subtract</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::subtract() {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Subtract<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609221"><span>4.14.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Drop</a></h3>

<p class=BodyText>The changes for drop follow the same pattern:</p>

<h4>Drop.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> DROP_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> DROP_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Drop : <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>Drop.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Drop::perform(RpnStack &amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>RpnCalculator::drop</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::drop() {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Drop<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609222"><span>4.14.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Factorial</a></h3>

<p class=BodyText>Practicing class extraction is a useful thing. You’ll often
do it in new development. It tends to be even more useful when working with
legacy code. You want to get to a point where doing it is second nature;
practice, practice, practice.</p>

<h4>Factorial.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> FACTORIAL_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> FACTORIAL_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Factorial : <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>Factorial.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Factorial.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Factorial::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> operand = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operand &gt;= 0) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>int</span><span style='color:black'> result = 1;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>while</span><span style='color:black'> (operand &gt; 1)</span></p>

<p class=CodeExample><span style='color:black'>      result *= operand--;</span></p>

<p class=CodeExample><span style='color:black'>    values.push(result);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h2><a name="_Toc202609223"><span style='font-weight:normal'>4.15<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Removing
Duplication</a></h2>

<p class=BodyText>Now we have enough in place to remove the duplication between
add and subtract. While this is overkill for 2 copies, we’re going to have many
more than 2, so this effort will be time well spent.</p>

<p class=BodyText>We need a class that:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Acquires two values from the stack</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Defers the actual calculation to a subclass</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Stores the result</span></p>

<p class=BodyText>There are at least a few paths we could take to getting this
done:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Refactor – Copy code from Add or Subtract and change
the inheritance structure in place. The existing tests will keep us on track.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Check First – Develop a number of automated checks, one
for each of the requirements of this base class.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Hybrid – Create the class using a copy of code and
write all of the tests we’ll need anyway.</span></p>

<p class=BodyText>Any of these ways will get us where we need to go. In class
people generally prefer the check first approach, so that’s what I’ll go with
here.</p>

<h3><a name="_Toc202609224"><span>4.15.1<span style='font:7.0pt "Times New Roman"'>
</span></span>It consumes two values</a></h3>

<p class=BodyText>Here’s a quick recap of an earlier suggestion:</p>

<p class=BodyText>First, the BinaryOperator class:</p>

<p class=CodeExample>class BinaryOperator {</p>

<p class=CodeExample>  virtual int calculate(int lhs, int rhs) = 0;</p>

<p class=CodeExample>};</p>

<p class=CodeExample>class Add : public BinaryOperator {</p>

<p class=CodeExample>  int calculate(int lhs, int rhs) { return lhs + rhs; }</p>

<p class=CodeExample>};</p>

<p class=BodyText>Notice that in this simple hierarchy, the base class is
abstract and the derived class has one method. The one method, calculate, has
two parameters. Here’s where we use it:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span>void
binaryOp(RpnStack &amp;values, BinaryOperator &amp;op) {</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span>  <span
style='color:#7F0055'>int</span> v1 = values.top();</p>

<p class=CodeExample><span class=CodeLineNumber>03: </span>  <span
style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span>  <span
style='color:#7F0055'>int</span> v2 = values.top();</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span>  <span
style='color:#0000C0'>values</span>.pop();</p>

<p class=CodeExample><span class=CodeLineNumber>06: </span><span
style='color:#0000C0'>  int result = op.calculate(</span>v2, v1);</p>

<p class=CodeExample><span class=CodeLineNumber>07: </span>  <span
style='color:#0000C0'>values</span>.push(result);</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span>}</p>

<p class=BodyText>The calculate() message is sent on line 6. Notice that the
object receiving the calculate() message does not have access to the RpnStack,
just two int parameters.</p>

<p class=BodyText>Here are our challenges:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We are going to create an abstract class, how can we
check an abstract class?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The real subclasses don’t yet exist – that is, the Add
and Subtract do exist, but they do not yet use the abstract base class.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Even if these classes did exist, they do not in general
have access to the RpnStack, but we want to check its size. Unfortunately, the
whole sequence both consumes and produces values, if we check the size, the
check is indirect.</span></p>

<p class=BodyText>This is a common problem. It is one of the costs of inheritance;
testing extensions of abstract classes can require more work. However, we can
create a testing subclass to fix the problem:</p>

<p class=BodyText><img border=0 width=313 height=186 id="_x0000_i1052"
src="CppAndOOdTheLeastYouNeedToKnow_files/image031.gif"><br>
What does this offer?</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We can create the testing subclass before changing Add
or Subtract; thereby isolating the work until we have what we think is a
finished product.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We can give our testing subclass access to things that
a normal production class would be able to access, opening up possibilities not
reasonably available to a production subclass.</span></p>

<p class=BodyText>However, it does have some cost:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It takes getting used to – this is resolved with time
and experience.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It might seem like we are testing test code as opposed
to production code. If that’s actually the case, then we’ve failed in our
efforts, so we must be vigilant to avoid doing so.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We have to create a test-only class, this might seem
like work. There are some tools for doing this in C++; some free, some
commercial. Rather that introduce more moving parts, we’ll just create them by
hand.</span></p>

<p class=BodyText>Even with these disadvantages, this is still a solid option.
More importantly, this is something you’ll use often in adding automated checks
to legacy code, so it’s good to practice this technique.</p>

<p class=BodyText>Here’s our first test for this new BinaryMathOperation class:</p>

<p class=CodeExample><span class=CodeLineNumber>01: </span><span
style='color:#7F0055'>#include</span><span style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;BinaryMathOperation.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:black'> TEST_GROUP(BinaryMathOperationShould) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:black'>   </span>RpnStack<span style='color:black'> *</span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='color:black'>   </span><span style='color:#7F0055'>void</span><span
style='color:black'> setup() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:black'>     </span><span style='color:#0000C0'>values</span><span
style='color:black'> = </span><span style='color:#7F0055'>new</span><span
style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>     </span><span style='color:#0000C0'>values</span><span
style='color:black'>-&gt;push(4);</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'>     </span><span style='color:#0000C0'>values</span><span
style='color:black'>-&gt;push(2);</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:black'>   </span><span style='color:#7F0055'>void</span><span
style='color:black'> teardown() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='color:black'>     </span><span style='color:#7F0055'>delete</span><span
style='color:black'> </span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>16:</span><span
style='color:black'> };</span></p>

<p class=CodeExample><span class=CodeLineNumber>17: </span></p>

<p class=CodeExample><span class=CodeLineNumber>18:</span><span
style='color:#7F0055'> struct</span><span style='color:black'> </span>BinaryMathOperationSpy<span
style='color:black'> : </span><span style='color:#7F0055'>public</span><span
style='color:black'> </span>BinaryMathOperation<span style='color:black'> {</span></p>

<p class=CodeExample><span class=CodeLineNumber>19:</span><span
style='color:black'>   BinaryMathOperationSpy(</span>RpnStack<span
style='color:black'> &amp;values) </span></p>

<p class=CodeExample><span class=CodeLineNumber>20:</span><span
style='color:black'>     : </span><span style='color:#0000C0'>values</span><span
style='color:black'>(values), </span><span style='color:#0000C0'>size</span><span
style='color:black'>(-1) {}</span></p>

<p class=CodeExample><span class=CodeLineNumber>21:</span><span
style='color:black'>   </span><span style='color:#7F0055'>int</span><span
style='color:black'> calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>22:</span><span
style='color:black'>     </span><span style='color:#0000C0'>size</span><span
style='color:black'> = </span><span style='color:#0000C0'>values</span><span
style='color:black'>.size();</span></p>

<p class=CodeExample><span class=CodeLineNumber>23:</span><span
style='color:black'>     </span><span style='color:#7F0055'>return</span><span
style='color:black'> 13;</span></p>

<p class=CodeExample><span class=CodeLineNumber>24:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>25:</span><span
style='color:black'>   </span>RpnStack<span style='color:black'> &amp;</span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>26:</span><span
style='color:black'>   </span><span style='color:#7F0055'>int</span><span
style='color:black'> </span><span style='color:#0000C0'>size</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>27:</span><span
style='color:black'> };</span></p>

<p class=CodeExample><span class=CodeLineNumber>28: </span></p>

<p class=CodeExample><span class=CodeLineNumber>29:</span><span
style='color:black'> TEST(BinaryMathOperationShould, ConsumeTwoValues) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>30:</span><span
style='color:black'>   </span>BinaryMathOperationSpy<span style='color:black'>
spy(*</span><span style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span class=CodeLineNumber>31:</span><span
style='color:black'>   spy.perform(*</span><span style='color:#0000C0'>values</span><span
style='color:black'>);</span></p>

<p class=CodeExample><span class=CodeLineNumber>32:</span><span
style='color:black'>   LONGS_EQUAL(0, spy.</span><span style='color:#0000C0'>size</span><span
style='color:black'>);</span></p>

<p class=CodeExample><span class=CodeLineNumber>33:</span><span
style='color:black'> }</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=396 valign=top style='width:5.5in;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>01 - 16</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Mostly boilerplate code. Create a test
  group. These tests will need an RpnStack so store it as a pointer, allocate
  and release it in the TEST_GROUP. Additionally, put two known values on it.
  These values will be used to check that the right values are getting sent in
  the correct order to the eventual subclasses.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>18</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a testing subclass. This is
  called a Spy because it will be watching what happens and recording. The
  automated check will use this class to record what happens and then verify
  that what was supposed to happen actually happened. As a testing subclass it
  must inherit from BinaryMathOperation – the class we are really trying to
  create. Rather than use a class use a struct so that everything is public by
  default.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>19</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a constructor. Notice that this
  class requires an instance of an RpnStack? This is the special sauce we add
  that a normal production subclass would not have. Doing this allows this testing
  subclass to record things that normally would not be accessible to a
  production subclass.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>20</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use member-wise initialization to hold
  onto the stack and initialize a size attribute to -1. Since -1 is never a
  valid stack size, it represents a good initial value. We could have used
  #include &lt;limits.h&gt; and INT_MIN instead.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>21</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Subclasses have an extension point called
  calculate that takes two integer parameters.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>22</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Our implementation will record the size
  of the stack just after the call to calculate() from the abstract base class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>23</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This method has a return value so I pick
  one of my favourite numbers 13.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>29</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Finally an automated check.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>30</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create the spy and give it a reference to
  the RpnStack created just before this code executes (remember, it is
  allocated in the setup() method and released in the teardown() method). The
  setup method always puts two values on it, so we know at this point the size
  is 2. The test as written guarantees/controls that.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>31</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Call perform() on the base class. Note:
  we are trying to verify that the perform method is well behaved. Even though
  we are sending a message to a testing subclass, the method we invoke is in
  the base class. We are actually exercising code in the base class, which is our
  ultimate goal.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>32</span></p>
  </td>
  <td width=396 valign=top style='width:5.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The stack started with a size of 2. The
  spy records the size upon entry into the calculate() method. Presumably, the
  lhs and rhs parameters will be the values removed from the stack, but that is
  another automated check we have yet to write. If the size is 0, then,
  apparently, two values were taken off the stack</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>Now that we have this complex test written, we have to write
some code to get it to compile:</p>

<h4>BinaryMathOperation.h</h4>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #pragma</span> once</p>

<p class=CodeExample><span class=CodeLineNumber>02:</span><span
style='color:#7F0055'> #ifndef</span> BINARYMATHOPERATION_H_</p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> #define</span> BINARYMATHOPERATION_H_</p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span><span
style='color:#7F0055'> #include</span> <span style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample><span class=CodeLineNumber>06: </span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:#7F0055'> class</span> BinaryMathOperation: <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span class=CodeLineNumber>08:</span><span
style='color:#7F0055'> public</span>:</p>

<p class=CodeExample><span class=CodeLineNumber>09:</span>   <span
style='color:#7F0055'>void</span> perform(RpnStack &amp;values);</p>

<p class=CodeExample><span class=CodeLineNumber>10:</span>   <span
style='color:#7F0055'>virtual</span> <span style='color:#7F0055'>int</span>
calculate(<span style='color:#7F0055'>int</span> lhs, <span style='color:#7F0055'>int</span>
rhs) = 0;</p>

<p class=CodeExample><span class=CodeLineNumber>11:</span> };</p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:#7F0055'> #endif</span></p>

<p class=BodyText>BinaryMathOperation is our intermediate, abstract base class.
All operations that take two parameters and produce a single result will
inherit from this base class. Examples might include: add, subtract, multiply,
divide, less than, greater than, y to the x, etc. Line 9 is the method all
MathOperation classes must write. That’s what we are checking now. All
subclasses will ultimately need to write a calculate method to do the actual
work of calculation. Notice that this is a pure virtual method. There is no
reasonable default behavior and we want subclasses to write this member
function. That is exactly what pure virtual methods do, along with making the
class itself abstract.</p>

<p class=BodyText>To get it to link:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;BinaryMathOperation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> BinaryMathOperation::perform(</span>RpnStack<span
style='color:black'> &amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Now that the code compiles and links, you can check to see
that the automated check is failing. Next, to get it to pass:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
BinaryMathOperation::perform(RpnStack &amp;values) {</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  calculate(0, 0);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This is enough code to get our first automated check passing.
We could have copied code from Add, I somewhat arbitrarily chose not to but
doing so would have been fine. So long as we verify all of this method’s
responsibilities with automated checks, we have lots of options for getting to
the final version.</p>

<h3><a name="_Toc202609225"><span>4.15.2<span style='font:7.0pt "Times New Roman"'>
</span></span>It calls an extension point with the correct parameters</a></h3>

<p class=BodyText>One of the responsibilities of our method is to actually call
an extension point, calculate(). We have done this indirectly because our last
check would fail if it were not called. Even so, we need to verify that the
parameters are correct.</p>

<p class=BodyText>The setup() method pushes two values, 4 and 2. The value
pushed first should be treated as the left hand side value while the value
pushed second should be treated as the right had side value. We can make a few
changes to our existing test subclass to support this idea or we can create an
entirely new testing subclass.</p>

<p class=BodyText>If I use a language with better tool support or if I have
some kind of library that supports making these so-called test doubles (though
the libraries are typically called mocking libraries), then I make more
fine-grained classes on a per-test basis. Since I am and writing my test
classes by hand I’ll tend towards more chunky testing classes. With that in
mind, here’s an updated version of our testing subclass:</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>BinaryMathOperationSpy<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>BinaryMathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  BinaryMathOperationSpy(</span>RpnStack<span
style='color:black'> &amp;values)</span></p>

<p class=CodeExample><span style='color:black'>      : </span><span
style='color:#0000C0'>values</span><span style='color:black'>(values), </span><span
style='color:#0000C0'>size</span><span style='color:black'>(-1), </span><span
style='color:#0000C0'>actualLhs</span><span style='color:black'>(0), </span><span
style='color:#0000C0'>actualRhs</span><span style='color:black'>(0) {}</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> calculate(</span><span
style='color:#7F0055'>int</span><span style='color:black'> lhs, </span><span
style='color:#7F0055'>int</span><span style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>size</span><span style='color:black'> = </span><span
style='color:#0000C0'>values</span><span style='color:black'>.size();</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>actualLhs</span><span style='color:black'> = lhs;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>actualRhs</span><span style='color:black'> = rhs;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> 13;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> &amp;</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>size</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>actualLhs</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>actualRhs</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>This update introduces three changes:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Introduction of two attributes, actualLhs and actualRhs</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Both of those new attributes are initialized to 0</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Both of those attributes are updated in the calculate
method with the actual parameters passed in at runtime.</span></p>

<p class=BodyText>Notice that these changes leave the class working fine for the
existing automated check. Now add another automated check to use this updated
class:</p>

<p class=CodeExample>TEST(BinaryMathOperationShould,
SendTwoParametersInCorrectOrder) {</p>

<p class=CodeExample>  BinaryMathOperationSpy spy(*<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  spy.perform(*<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(4, spy.<span style='color:#0000C0'>actualLhs</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(2, spy.<span style='color:#0000C0'>actualRhs</span>);</p>

<p class=BodyText>}<br>
Run this test, it fails. Now to update the production code to passing:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
BinaryMathOperation::perform(RpnStack &amp;values) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> rhs =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> lhs =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  calculate(lhs, rhs);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Back to all checks passing.</p>

<h3><a name="_Toc202609226"><span>4.15.3<span style='font:7.0pt "Times New Roman"'>
</span></span>It stores the result</a></h3>

<p class=BodyText>Finally, the result returned from calculate must be stored.
To get the original version of the testing subclass to compile without
warnings, the calculate method had to return a value. I chose 13, so now we can
check for that:</p>

<p class=CodeExample>TEST(BinaryMathOperationShould, StoreCalculatedResult) {</p>

<p class=CodeExample>  BinaryMathOperationSpy spy(*<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  spy.perform(*<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(13, <span style='color:#0000C0'>values</span>-&gt;top());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This check initially fails, a quick update to perform() fixes
it;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
BinaryMathOperation::perform(RpnStack &amp;values) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> rhs =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> lhs =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> result =
calculate(lhs, rhs);</p>

<p class=CodeExample>  values.push(result);</p>

<p class=CodeExample>}</p>

<p class=BodyText>With this final check we have created and fully checked an
abstract class.</p>

<h3><a name="_Toc202609227"><span>4.15.4<span style='font:7.0pt "Times New Roman"'>
</span></span>Updating Add and Subtract</a></h3>

<p class=BodyText>Now we can update Add and Subtract, one at a time, while
keeping the automated checks passing:</p>

<h4>Add.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;BinaryMathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Add : <span
style='color:#7F0055'>public</span> BinaryMathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> calculate(<span
style='color:#7F0055'>int</span> lhs, <span style='color:#7F0055'>int</span>
rhs);</p>

<p class=CodeExample>};</p>

<h4>Add.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Add::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs + rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>All checks should still pass.</p>

<h4>Subtract.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;BinaryMathOperation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Subtract<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>BinaryMathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> calculate(</span><span
style='color:#7F0055'>int</span><span style='color:black'> lhs, </span><span
style='color:#7F0055'>int</span><span style='color:black'> rhs);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>Subtract.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Subtract::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs - rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>All checks should still be passing.</p>

<h3><a name="_Toc202609228"><span>4.15.5<span style='font:7.0pt "Times New Roman"'>
</span></span>Not updating drop or factorial</a></h3>

<p class=BodyText>Notice that drop and factorial are not included in this
update. They do not behave the same as Add or Subtract. Also, there is no need
for an intermediate base class for them. The hierarchy is asymmetrical – this
is a sign of a healthy hierarchy. Few problems collapse into a fully-balance
tree. If we find duplication later than warrants another intermediate base
class we’ll add it then.</p>

<h2><a name="_Toc202609229"><span style='font-weight:normal'>4.16<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>All
those methods</a></h2>

<p class=BodyText>The next thing might seem like adding multiply and divide.
However, notice how the API of this class continues to grow? It is an
open-ended class that has too much responsibility. Now is a good time to lock
down the API. We know we are going to continue to add new operations. The API
and underlying class keeps changing. It is time to close this class to changes
but open up the system to adding new operations easier. We already have much of
the required infrastructure in place. We need to come up with how we want the
new class to look, using an automated check, and then migrate tests over to
that new approach – preferably one at a time.</p>

<h3><a name="_Toc202609230"><span>4.16.1<span style='font:7.0pt "Times New Roman"'>
</span></span>An example based migration</a></h3>

<p class=BodyText>We’ll begin by copying an existing automated check and making
it look like we want it to look. Notice we are not getting rid of the old automated
check. We want to the new and old to coexist until we have the new in place.</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddTwoNumbers_v2) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(30);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(34, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>This won’t compile yet because the method does not exist.
Notice the name. It needs to be unique. Once this test works, I will remove the
original test. In general, refactoring starts with a “copy” operation and not a
“move” operation.</p>

<p class=BodyText>To get this to compile, link and pass:</p>

<h4>Declare new member function</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:#7F0055'>  </span>...</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> execute(</span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> &amp;operatorName);</span></p>

<p class=BodyText>And a “complete” implementation – complete for all the automated
checks that is:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  add();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Verify that this gets the check passing and then:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Delete the original check</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Rename the new check by removing the _v2</span></p>

<p class=BodyText>Now update the check “AddWhenTheresASingleValue” to use the
new approach:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddWhenTheresASingleValue) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(4, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>We have migrated all uses of add() so we can remove it,
right? Not necessarily. If we were in a legacy setting where the class we are
changing is used by other applications in a library, you cannot so easily
remove public methods. In our case, we know all the uses of our class, so we
have the freedom (luxury?) of being able to change its public API. In a legacy
environment, it’s more of a migration – or you do it all yourself. In any case,
let’s make that transition after we’ve completed writing the execute() method.</p>

<h3><a name="_Toc202609231"><span>4.16.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Migrating the subtract() method</a></h3>

<p class=BodyText>This is more of the same. However, we could change an
existing check rather than copy. The method we want to call is already there,
we just want to use it. So updating the test in place seems OK to me:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SubtractTwoNumbers) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(30);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(26, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now you have a failing test, time to fix it:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(operatorName == <span
style='color:#2A00FF'>&quot;+&quot;</span>)</p>

<p class=CodeExample>    add();</p>

<p class=CodeExample>  <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span>(operatorName == <span style='color:#2A00FF'>&quot;-&quot;</span>)</p>

<p class=CodeExample>    subtract();</p>

<p class=CodeExample>}</p>

<p class=BodyText>And like that, we are back to passing. While I did change a
test in place, notice I only changed one. This is a simple enough example we
could change everything in one fell swoop. However, you tend to continue as you
start, so no better time than the present to do things carefully. In your real
projects the code will be more complex and probably less familiar, so learning
how to do things carefully from the beginning is the way to go.</p>

<p class=BodyText>There is only one more automated check that uses subtract(),
SubtractWhenTheresASingleValue. Update it and get back to passing.</p>

<h3><a name="_Toc202609232"><span>4.16.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Finish the transformation</a></h3>

<p class=BodyText>Continue this until you’ve also updated the automated checks using
drop() and factorial(). You’ll end up with something like the following:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(operatorName == <span
style='color:#2A00FF'>&quot;+&quot;</span>)</p>

<p class=CodeExample>    add();</p>

<p class=CodeExample>  <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span>(operatorName == <span style='color:#2A00FF'>&quot;-&quot;</span>)</p>

<p class=CodeExample>    subtract();</p>

<p class=CodeExample>  <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span>(operatorName == <span style='color:#2A00FF'>&quot;!&quot;</span>)</p>

<p class=CodeExample>    factorial();</p>

<p class=CodeExample>  <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span>(operatorName == <span style='color:#2A00FF'>&quot;drop&quot;</span>)</p>

<p class=CodeExample>    drop();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now you can safely make the methods add(), subtract(),
factorial(), drop() private. But do those methods even need to be there in the
first case? How about we “inline” those methods – simply copy their contents
into the execute() method and remove them altogether:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Factorial.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::execute(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;+&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>Add<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;-&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>Subtract<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;!&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>Factorial<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;drop&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>Drop<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice that we have much of the work necessary to accommodate
polymorphism across a hierarchy of math operations but we are not actually
using it? What is more important? Getting an ever-growing API locked down or
improving the internal design? I’m not sure there’s a clear winner. My
preference is locking down the API first.</p>

<h2><a name="_Toc202609233"><span style='font-weight:normal'>4.17<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Type
un-safe</a></h2>

<p class=BodyText>A nice thing about the perform method is that it simplifies
the API, so problem solved, right? The first rule of solving problems according
to Weinberg is “Every solution introduces problems.” What happens when you
attempt to execute an unknown operation? In our case, the code silently does
nothing. I prefer “fail-fast”, so let’s add a check that expects such a
situation to generate an “UnknownMathOperationException”:</p>

<h4>The Test</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(RpnCalculatorShould,
ThrowAnExceptionForUnknownOperation) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>calculator</span><span style='color:black'>-&gt;execute(</span>&quot;--unknown--&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown UnknownMathOperationException&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>And to get it to compile:</p>

<h4>UnknownMathOperationException.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span>
UNKNOWNMATHOPERATIONEXCEPTION_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span>
UNKNOWNMATHOPERATIONEXCEPTION_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span>
UnknownMathOperationException: <span style='color:#7F0055'>public</span>
std::exception {</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<p class=BodyText>To get this test to pass, we need to update the execute
method:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::execute(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;+&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    ...</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
UnknownMathOperationException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This is an example of closing down an API to changes at the
expense of runtime checking. This is often a hard sell. Try it and see if it
fits. It is often overkill. If you have a small number of named methods, 5, 10,
maybe having a larger API makes sense. Eventually, the changing API becomes a
burden. In our case we only have 4, but we know two things:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>There are more on the way – even in this first
“release”</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We are going to want macros as well; this API supports
the execution of macros in the same way as the built-in operations, which was a
stated requirement.</span></p>

<p class=BodyText>In fact, while I do worry about the overall size of the API,
I am more concerned about its stability. If it will continue to grow through
the life of a project, then I’d look for alternatives.</p>

<h2><a name="_Toc202609234"><span style='font-weight:normal'>4.18<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Long
Method</a></h2>

<p class=BodyText>A long method might be one that has a large number of lines.
While the execute() method is not long in terms of number of lines yet, it will
be. Another interpretation of Long Method is one that exists at different
levels of abstraction. Finally, a method that does three different things is
long even if it doesn’t have a lot of lines:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Mapping – a string to a MathOperation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Construction – instantiates a MathOperation to perform
the work</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Delegation – sends a message to a MathOperation to
actually do the work</span></p>

<p class=BodyText>Independent of that, however, is this notion of mapping from
a string to an object. This is a common problem that arises at the boundary of
a system. The RpnCalculator class is a controller object; it waits for systems
events or messages from actors. There is yet another design pattern to solve
this exact problem: Abstract Factory (<a
href="http://en.wikipedia.org/wiki/Abstract_factory_pattern">http://en.wikipedia.org/wiki/Abstract_factory_pattern</a>).
The abstract factory pattern typically serves to build a suite of objects for a
given environment. In our case we want to select from one of many objects for a
string. We can move towards such a solution by first extracting the part of the
method that does the selection from the part that does the execution. Once
we’ve done that, we can extract a class to do that work.</p>

<p class=BodyText>Here is a stab at such a refactoring:</p>

<h4>Copy the entire method and make it a function:</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
findOperationNamed(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (operatorName == <span
style='color:#2A00FF'>&quot;+&quot;</span>) {</p>

<p class=CodeExample>    Add op;</p>

<p class=CodeExample>    op.perform(values);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;-&quot;</span>)
{</p>

<p class=CodeExample>    Subtract op;</p>

<p class=CodeExample>    op.perform(values);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;!&quot;</span>)
{</p>

<p class=CodeExample>    Factorial op;</p>

<p class=CodeExample>    op.perform(values);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;drop&quot;</span>)
{</p>

<p class=CodeExample>    Drop op;</p>

<p class=CodeExample>    op.perform(values);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> {</p>

<p class=CodeExample>    <span style='color:#7F0055'>throw</span>
UnknownMathOperationException();</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=BodyText>This won’t compile as it refers to values, which is member
data. However we don’t want to both select and perform, so remove all
references to that member data:</p>

<p class=CodeExample>MathOperation&amp; findOperationNamed(<span
style='color:#7F0055'>const</span> std::string &amp;operatorName){</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (operatorName == <span
style='color:#2A00FF'>&quot;+&quot;</span>) {</p>

<p class=CodeExample>    Add op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;-&quot;</span>)
{</p>

<p class=CodeExample>    Subtract op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;!&quot;</span>)
{</p>

<p class=CodeExample>    Factorial op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;drop&quot;</span>)
{</p>

<p class=CodeExample>    Drop op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> {</p>

<p class=CodeExample>    <span style='color:#7F0055'>throw</span>
UnknownMathOperationException();</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=BodyText>This function compiles with warnings (or maybe errors –
somewhat compiler dependent). The code returns reference to temporary objects.
In the first project we saw a quick way to get this working using the static
keyword. Let’s do that here:</p>

<p class=CodeExample>MathOperation&amp; findOperationNamed(<span
style='color:#7F0055'>const</span> std::string &amp;operatorName){</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (operatorName == <span
style='color:#2A00FF'>&quot;+&quot;</span>) {</p>

<p class=CodeExample>    <span style='color:#7F0055'>static</span> Add op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;-&quot;</span>)
{</p>

<p class=CodeExample>    <span style='color:#7F0055'>static</span> Subtract op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;!&quot;</span>)
{</p>

<p class=CodeExample>    <span style='color:#7F0055'>static</span> Factorial
op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> <span
style='color:#7F0055'>if</span> (operatorName == <span style='color:#2A00FF'>&quot;drop&quot;</span>)
{</p>

<p class=CodeExample>    <span style='color:#7F0055'>static</span> Drop op;</p>

<p class=CodeExample>    <span style='color:#7F0055'>return</span> op;</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> {</p>

<p class=CodeExample>    <span style='color:#7F0055'>throw</span>
UnknownMathOperationException();</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now we can update the execute() method to use it:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  MathOperation &amp;op =
findOperationNamed(operatorName);</p>

<p class=CodeExample>  op.perform(<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>}</p>

<p class=BodyText>All checks should be passing. This method is now closed to
new operations. Meaning, as new math operations are added, this code does not
need to change. The code in the extracted function does, but we’ll fix that as
well. Before we do, however, it is time to move that code into its own class.</p>

<h2><a name="_Toc202609235"><span style='font-weight:normal'>4.19<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>A
Concrete Factory</a></h2>

<p class=BodyText>As written, the findOperationNamed() function can become a
member function simply by copying it as is. You might be tempted to make it a
static method, but do not. Generally, static methods make writing automated
checks more difficult. Why? If you need to swap one out at runtime for a
particular check, it’s not possible in the language to do so. You can link in a
different version of the static method and there are other things you can do as
well. Even so, what might seem convenient is really asking for trouble as the
road to hell (supporting legacy code) is paved with conveniences.</p>

<p class=BodyText>Here’s a simple extract class refactoring applied to that code:</p>

<h4>MathOperationFactory.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span>
MATHOPERATIONFACTORY_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span>
MATHOPERATIONFACTORY_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample><span style='color:#7F0055'>class</span> MathOperation;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span>
MathOperationFactory {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  MathOperationFactory();</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span>
~MathOperationFactory();</p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span>
MathOperation&amp;</p>

<p class=CodeExample><span style='color:#7F0055'>                       </span>findOperationNamed(<span
style='color:#7F0055'>const</span> std::string &amp;name);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>MathOperationFactory.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Factorial.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>MathOperationFactory::MathOperationFactory()
{ }</span></p>

<p class=CodeExample><span style='color:black'>MathOperationFactory::~MathOperationFactory()
{ }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>MathOperation<span style='color:black'>&amp;
MathOperationFactory::findOperationNamed(</span></p>

<p class=CodeExample>                                 <span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;+&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Add<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;-&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Subtract<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;!&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Factorial<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;drop&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Drop<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
UnknownMathOperationException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609236"><span>4.19.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Actually using the factory</a></h3>

<p class=BodyText>The class is easily extracted – we copied some code, but it
while it compiles and links, it is not getting used. This factory class should
be a dependent object in the RpnCalculator class. Traditionally, the abstract
factory pattern, which we are yet to fully follow since we do not have an
abstract base class, has variations. We don’t have a need for variations yet,
but it might come up. To follow that pattern, we should hook the factory back
into the calculator in a way that allows for overriding.</p>

<p class=BodyText>We do not have to do this, however all the patterns in the
Design Patterns book were found in real applications so to not follow something
that has worked seems a bit “not build here”-ish. An intermediate compromise is
to store a pointer and use new and delete for now. Later, if we find a need for
variations on the factory, we can introduce an interface and change the pointer
type.</p>

<p class=BodyText>With this in mind, here is an updated version of
RpnCalculator:</p>

<h4>RpnCalculator.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperationFactory<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> </span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> *</span><span style='color:#0000C0'>factory</span><span
style='color:black'>;</span></p>

<h4>RpnCalculator.cpp (the whole thing as it has shrunk)</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::RpnCalculator() </span></p>

<p class=CodeExample><span style='color:black'>  : </span><span
style='color:#0000C0'>factory</span><span style='color:black'>(</span><span
style='color:#7F0055'>new</span><span style='color:black'>
MathOperationFactory) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::~RpnCalculator()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>factory</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::enter(</span><span style='color:#7F0055'>int</span><span
style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>.push(value);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> RpnCalculator::getX() </span><span style='color:#7F0055'>const</span><span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> </span><span style='color:
#0000C0'>values</span><span style='color:black'>.top();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::execute(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperation<span
style='color:black'> &amp;op = </span><span style='color:#0000C0'>factory</span><span
style='color:black'>-&gt;findOperationNamed(operatorName);</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice that because we chose a pointer, the header file only
mentions the type in a forward declaration rather than including the factory’s header
file. That’s a good thing. Minimizing header file inclusion in other header
files leads to more maintainable systems.</p>

<h2><a name="_Toc202609237"><span style='font-weight:normal'>4.20<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Retargeting
Automated Checks</a></h2>

<p class=BodyText>Something that should happen as you refactor code with
existing automated checks is checking to see if they are still against the
right class. How do you know?</p>

<p class=BodyText>In general, the “closer” an automated check is to the thing
it is checking, the simpler and more focused it can be. For example, consider
the following automated check:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddWhenTheresASingleValue) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(4, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=BodyText>What is this checking exactly? It appears to be checking that
there will be values available to the “+” Math Operation even when values have
not been entered. Remember that we introduce the RpnStack class to handle that.
In fact, we have the following check that addresses what happens when there are
“no values”:</p>

<p class=CodeExample>TEST(RpnStackShould, HaveATopAfterCreation) {</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>values</span>-&gt;top());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Since we know that an RpnStack will always have values and we
know that the RpnCalcualtor in face uses RpnStack, are we safe in assuming that
the above check is no longer necessary?</p>

<p class=BodyText>The answer is, “it depends.” If you view what you are doing
as strictly black-box, then you need both checks. This is a tricky question
with no clear answer. If we treat what we are doing as a way to:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Drive development</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Reduce the risk of releasing a defect into the wild</span></p>

<p class=BodyText>Then it might be OK. </p>

<p class=BodyText>If you think we should have the check, then it seems we
should have that check for every operation, which is currently: add, subtract,
drop and factorial. In fact we should have it for every future operation as
well. Maybe a reasonable middle ground is one or two smoke-like tests that
verify the basic feature is in fact there but not do it for all operations. </p>

<p class=BodyText>What about moving the checks for each operation into a
specific source file for each Operation? E.g., AddShould, SubtractShould,
FactorialShould, DropShould? This seems like the right place to put it. What
about making sure the actual operations are in the factory? Should that be in
the factory, the calculator or with the checks on the math operation itself? Is
the calculator responsible for knowing which operations it supports? Does it
even know its supported operations?</p>

<p class=BodyText>There are no clear answers to these questions. If we check in
the first place, that’s a great thing. If we have duplicated checks, that is
probably better than no checks. Duplicated checks, however, represent waste or
inertia against refactoring. Checking the same thing multiple times really
doesn’t add to a sense of security about the system.</p>

<p class=BodyText>Even though there is no clear answer, I want to put a stake
in the ground for this project. Here are a few recommendations:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Examples created at the beginning of the overall effort
(sprint) will have direct corollaries in automated checks. Essentially we will
treat these as Rejection Checks (acceptance tests in older terminology).</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We will create automated checks for each production
class. We are currently missing several.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>One case where we may deviate is not writing direct
checks against exception classes. If those classes have logic, sure. Right now
we simply instantiate and throw them. That’s not worth checking directly; it’s
built into the language.</span></p>

<p class=BodyText>This will lead to duplication of some checks but in many
cases we might be able to more directly check the inner classes differently, so
they won’t be direct copies.</p>

<p class=BodyText>Given this set of rules, it is now time to remediate checks.
In the current solution, we are missing direct checks against the following
classes: Add, Drop, Factorial, MathOperation, MathOperationFactory, and
Subtract. That’s quite a list; no better time than now to plant a tree.</p>

<h3><a name="_Toc202609238"><span>4.20.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Add</a></h3>

<p class=BodyText>Before we write an automated check for add, we need to ask a
question: Should we check against the API published in MathOperation or
BinaryMathOperation? The only thing that is essential is the calculate()
method, so that seems more direct. It happens to be public, so we can do that.
Is that a reasonable thing to have done? Personally, I like public extension
points precisely because I can check closer to the thing I care about. That
being said, this is a point of contention for many people. In C++ I could have
made the method public, private or protected; virtual-ness is orthogonal to
access. If the method were protected, would I consider making it public to make
checking easier? In C++ I would make the methods public. In Java I would not
have to because access rules are different. So I am going to check Add through
its calculate method because I can:</p>

<h4>AddShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(AddShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Add<span
style='color:black'> </span><span style='color:#0000C0'>op</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(AddShould, AddTwoNumbers) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(12, </span><span
style='color:#0000C0'>op</span><span style='color:black'>.calculate(5, 7));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This is simple and direct. What about verifying that Add is
registered in the Factory? This is again something for which there is no
definitive answer. This is something worth checking. If we put the check here,
we have all of the checks associated with the work on Add in one place. We
could put the check in another place, say: RegisteredOperationsAre.cpp. That
opens that file up to continual changes and, more importantly, it becomes a
bottleneck. We could create a second check source file such as
AddRegistered.cpp. This keeps it small and focused and it really is a separate
concern. This increased the number of files but once written, that file won’t
need to be recompiled say if we decide to add another check for Add. That seems
like it’s worth tryin:</p>

<h4>AddShouldBeRegistered.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;typeinfo&gt;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(AddShouldBeRegistered){};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(AddShouldBeRegistered,
IsIt) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> factory;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperation<span
style='color:black'> &amp;op = factory.findOperationNamed(</span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(op) == </span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Add<span
style='color:black'>));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This check verifies that Add is registered as “+” and that
the actual type is correct. This may seem like a bit of duplication; however we
can either use a base class, utility class or macro to remove all of the
duplication. We will do that after in just a bit.</p>

<h3><a name="_Toc202609239"><span>4.20.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Drop</a></h3>

<p class=BodyText>Unlike Add, Drop directly inherits from MathOperation. To
check it, we will need to use an RpnStack.</p>

<h4>DropShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(DropShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DropShould,
DecreaseStackSizeByOne) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> values;</span></p>

<p class=CodeExample><span style='color:black'>  values.push(4);</span></p>

<p class=CodeExample><span style='color:black'>  values.push(2);</span></p>

<p class=CodeExample><span style='color:black'>  </span>Drop<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(values);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, values.size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>ShouldBeRegistered.h</h4>

<p class=BodyText>This is a bit unwieldy. Even so, it removes duplication so
I’m going with it.</p>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> SHOULDBEREGISTERED_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> SHOULDBEREGISTERED_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;CppUTest/TestHarness.h&gt;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;typeinfo&gt;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperationFactory.h&quot;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;UnknownMathOperationException.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#define<span style='color:black'>
CHECK_REGISTRATION(ClassName, OperationName) \</span></p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(ClassName</span>##<span
style='color:black'>ShouldBeRegistered){}; \</span></p>

<p class=CodeExample><span style='color:black'>\</span></p>

<p class=CodeExample><span style='color:black'>TEST(ClassName</span>##<span
style='color:black'>ShouldBeRegistered, IsIt) { \</span></p>

<p class=CodeExample><span style='color:black'>  </span>try<span
style='color:black'> { \</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationFactory factory;
\</span></p>

<p class=CodeExample><span style='color:black'>  MathOperation &amp;op =
factory.findOperationNamed(OperationName);\</span></p>

<p class=CodeExample><span style='color:black'>  CHECK(</span>typeid<span
style='color:black'>(op) == </span>typeid<span style='color:black'>(ClassName));
\</span></p>

<p class=CodeExample><span style='color:black'>  } </span>catch<span
style='color:black'>(UnknownMathOperationException &amp;e) { \</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(#ClassName </span><span
style='color:#2A00FF'>&quot; not registered as &quot;</span><span
style='color:black'> OperationName); \</span></p>

<p class=CodeExample><span style='color:black'>  } \</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>DropShouldBeRegistered.cpp</h4>

<p class=BodyText>The result of using the macro seems good:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Drop.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Drop<span
style='color:black'>, </span>&quot;drop&quot;<span style='color:black'>)</span></p>

<p class=BodyText>You can also update AddShouldBeRegistered.cpp to use this
macro as well:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Add<span
style='color:black'>, </span>&quot;+&quot;<span style='color:black'>)</span></p>

<h3><a name="_Toc202609240"><span>4.20.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Factorial</a></h3>

<p class=BodyText>Like Drop, Factorial requires an RpnStack to check it:</p>

<h4>FactorialShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Factorial.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(FactorialShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(FactorialShould,
Calculate120For5) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> values;</span></p>

<p class=CodeExample><span style='color:black'>  values.push(5);</span></p>

<p class=CodeExample><span style='color:black'>  Factorial().perform(values);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(120,
values.top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(FactorialShould,
ConsumeValueWhenValueLessThan0) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> values;</span></p>

<p class=CodeExample><span style='color:black'>  values.push(-1);</span></p>

<p class=CodeExample><span style='color:black'>  Factorial().perform(values);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(0, values.size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(FactorialShould, Calculate1For0)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> values;</span></p>

<p class=CodeExample><span style='color:black'>  Factorial().perform(values);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, values.top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>FactorialSholdBeRegistered.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Factorial.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Factorial<span
style='color:black'>, </span>&quot;!&quot;<span style='color:black'>);</span></p>

<h3><a name="_Toc202609241"><span>4.20.4<span style='font:7.0pt "Times New Roman"'>
</span></span>MathOperation</a></h3>

<p class=BodyText>MathOperation has no implementation. It is the closest thing
C++ has to an interface. This is another exception to our simple set of rules.</p>

<h3><a name="_Toc202609242"><span>4.20.5<span style='font:7.0pt "Times New Roman"'>
</span></span>MathOperationFactory</a></h3>

<p class=BodyText>Given that we’ve decided to check registration of operations
in other places, what is left for this class? Right now it throws an exception
when an operation is not found, so that will do for now. As we grow our system,
there will be opportunities to add features. As a result, we will add
additional automated checks.</p>

<h4>MathOperatorFactoryShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(MathOperationFactoryShould)
{</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(MathOperationFactoryShould,</span></p>

<p class=CodeExample><span style='color:black'>                              ThrowExcpeptionForUnknownOperation)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> factory;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    factory.findOperationNamed(</span>&quot;--bad_unknown--&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609243"><span>4.20.6<span style='font:7.0pt "Times New Roman"'>
</span></span>Subtract</a></h3>

<p class=BodyText>There is nothing new for Subtract:</p>

<h4>SubtractShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(SubtractShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SubtractShould,
SubtractTwoNumbers) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(-2,
Subtract().calculate(5, 7));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>SubtractShouldBeRegistered.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Subtract.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Subtract<span
style='color:black'>, </span>&quot;-&quot;<span style='color:black'>)</span></p>

<h2><a name="_Toc202609244"><span style='font-weight:normal'>4.21<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Adding
Multiplication</a></h2>

<p class=BodyText>We have finished remediation for now. Should we have
considered doing this as we refactored the code? Yes. This is going to happen.
On the plus side, all of the refactoring was supported by existing automated
checks.</p>

<p class=BodyText>The automated check for Multiplication looks much like Add:</p>

<h4>MultiplicationShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(MultiplicationShould)
{ };</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(MultiplicationShould,
MultiplicationTwoNumbers) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(35,
Multiplication().calculate(5, 7));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>We need to write the Multiplication class. It looks like Add
or Subtract:</p>

<h4>Multiplication.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> MULTIPLICATION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> MULTIPLICATION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;BinaryMathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Multiplication<span
style='color:black'> : </span>public<span style='color:black'> </span>BinaryMathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>int<span
style='color:black'> calculate(</span>int<span style='color:black'> lhs, </span>int<span
style='color:black'> rhs);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>Multiplication.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Multiplication::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs * rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>For this to be usable by the calculator, it must be
registered:</p>

<h4>MultiplicationShouldBeRegistered.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Multiplication<span
style='color:black'>, </span>&quot;*&quot;<span style='color:black'>)</span></p>

<p class=BodyText>For this to pass, you will need to update MathOperationFactory.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample><span style='color:black'>...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>MathOperation<span style='color:black'>&amp;
MathOperationFactory::findOperationNamed(</span></p>

<p class=CodeExample><span style='color:black'>                                
</span><span style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> &amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;+&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;*&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Multiplication<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
UnknownMathOperationException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=BodyText>To finish Multiplication, we need to add the missing checks
from the preliminary rejection checks. We wrote this bottom-up and checked both
the functionality of Multiplication as well as its registration, so these
acceptance checks should pass:</p>

<h4>Added to RpnCalculatorShould.cpp</h4>

<p class=CodeExample>TEST(RpnCalculatorShould, BeAbleToMultiplyTwoNumbes) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;*&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(16, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, MultiplyWhenTheresASingleValue)
{</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;*&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<h2><a name="_Toc202609245"><span style='font-weight:normal'>4.22<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Adding
Division</a></h2>

<p class=BodyText>Division is similar to the other BinaryOperators, though there
is one additional think to check, divide by Zero. We’ll start with the happy
path first and add the divide by zero check second:</p>

<h4>DivisionShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Division.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(DivisionShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Division<span
style='color:black'> </span><span style='color:#0000C0'>op</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DivisionShould,
DivideTwoNumbers) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(5, </span><span
style='color:#0000C0'>op</span><span style='color:black'>.calculate(15, 3));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>We need to create the Division class for this to pass:</p>

<h4>Division.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> DIVISION_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> DIVISION_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;BinaryMathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Division : <span
style='color:#7F0055'>public</span> BinaryMathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> calculate(<span
style='color:#7F0055'>int</span> lhs, <span style='color:#7F0055'>int</span>
rhs);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>Division.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Division.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Division::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs / rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Once this test passes, it’s time to add a check for dividing
by zero:</p>

<h4>DivisionShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;DivideByZeroException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(DivisionShould,
ThrowExceptionForDivideByZero) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>op</span><span style='color:black'>.calculate(1, 0);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown DivideByZeroException&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>DivideByZeroException<span
style='color:black'> &amp;) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>DivideByZeroExceptoin.h (note, no .cpp)</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> DIVIDEBYZEROEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> DIVIDEBYZEROEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>DivideByZeroException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>The automated check will fail. Note that how it fails is
somewhat platform dependent. On my platform, the entire test suite simply stops
running. You will need to update Divide.cpp:</p>

<h4>Updated Division.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Division.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;DivideByZeroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Division::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(rhs == 0)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
DivideByZeroException();</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs / rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Finally, we need to make sure that Divide is registered in
the factory:</p>

<h4>DivisionShouldBeRegistered.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Division.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Division<span
style='color:black'>, </span>&quot;/&quot;<span style='color:black'>)</span></p>

<p class=BodyText>Update the factory to make to get your check to pass:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Division.h&quot;</p>

<p class=CodeExample><span style='color:black'>...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>MathOperation<span style='color:black'>&amp;
MathOperationFactory::findOperationNamed(</span></p>

<p class=CodeExample><span style='color:black'>                                
</span><span style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> &amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;+&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:#7F0055'>    ...</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> </span><span
style='color:#7F0055'>if</span><span style='color:black'> (operatorName == </span>&quot;/&quot;<span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>static</span><span style='color:black'> </span>Division<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>return</span><span style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
UnknownMathOperationException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>To complete work on Division, we need to add the missing
rejection checks. As with Multiplication, we’ve worked bottom up so everything
should be in place for these checks to immediately pass:</p>

<h4>Added to RpnCalculatorShould.cpp</h4>

<p class=CodeExample>TEST(RpnCalculatorShould, BeAbleToDivideTwoNumbes) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;/&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(1, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, DivideWhenTheresASingleValue) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(4);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;/&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<h2><a name="_Toc202609246"><span style='font-weight:normal'>4.23<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>MathOperationFactory
refactoring: Storing Math Operations</a></h2>

<p class=BodyText>Notice how you need to keep adding to a long if-then-else
structure for every new math operation? That is somewhat error prone,
repetitive, and it won’t support adding new math operations while the system is
running (programmable calculator). There is a simple class in the standard library
that can do this better, a map. In this section you will migrate the current
solution to use a map. The number of steps may be more than you expect; that’s
to keep the code compiling and checks passing more often than otherwise:</p>

<h4>Updated MathOperationFactory.h: introduce map</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;map&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperation<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperationFactory<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span></p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>typedef</span><span style='color:black'> std::map&lt;std::</span>string<span
style='color:black'>, </span>MathOperation<span style='color:black'>*&gt; </span>OperationMap<span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>OperationMap<span
style='color:black'> </span><span style='color:#0000C0'>operationsByName</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>Update MathOperationFactory constructor</h4>

<p class=CodeExample>MathOperationFactory::MathOperationFactory() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;+&quot;</span>] = <span style='color:#7F0055'>new</span>
Add;</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;-&quot;</span>] = <span style='color:#7F0055'>new</span>
Subtract;</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;drop&quot;</span>] = <span style='color:#7F0055'>new</span>
Drop;</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;!&quot;</span>] = <span style='color:#7F0055'>new</span>
Factorial;</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;*&quot;</span>] = <span style='color:#7F0055'>new</span>
Multiplication;</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[<span
style='color:#2A00FF'>&quot;/&quot;</span>] = <span style='color:#7F0055'>new</span>
Division;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Run your automated check suite. There are many failures;
memory leaks are causing those failures. Update the header file by adding
another nested typedef:</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperationFactory<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>typedef</span><span style='color:black'> std::</span>map<span
style='color:black'>&lt;std::</span>string<span style='color:black'>, </span>MathOperation<span
style='color:black'>*&gt; </span>OperationMap<span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>typedef</span><span style='color:black'> </span>OperationMap<span
style='color:black'>::</span>iterator<span style='color:black'> </span>iterator<span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>OperationMap<span
style='color:black'> </span><span style='color:#0000C0'>operationsByName</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>Update the destructor to use this new typedef:</p>

<p class=CodeExample>MathOperationFactory::~MathOperationFactory() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span>(iterator i = <span
style='color:#0000C0'>operationsByName</span>.begin(); </p>

<p class=CodeExample><span style='color:#7F0055'>      </span>i != <span
style='color:#0000C0'>operationsByName</span>.end(); </p>

<p class=CodeExample>      ++i)</p>

<p class=CodeExample>    <span style='color:#7F0055'>delete</span> (*i).<span
style='color:#0000C0'>second</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now we can update the findOperationNamed method to use the
map:</p>

<p class=CodeExample>MathOperation&amp;
MathOperationFactory::findOperationNamed(</p>

<p class=CodeExample>                                 <span style='color:#7F0055'>const</span>
std::string &amp;operatorName) {</p>

<p class=CodeExample>  iterator candidate = <span style='color:#0000C0'>operationsByName</span>.find(operatorName);</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(candidate == <span
style='color:#0000C0'>operationsByName</span>.end())</p>

<p class=CodeExample>    <span style='color:#7F0055'>throw</span>
UnknownMathOperationException();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> *(*candidate).<span
style='color:#0000C0'>second</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now this member function is closed to adding new Math Operations.
The constructor is still an issue, but that’s the subject of the next section.</p>

<h2><a name="_Toc202609247"><span style='font-weight:normal'>4.24<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>MathOperationFactory
refactoring: Automatic Math Operation Registration</a></h2>

<p class=BodyText>Adding a new Math Operation requires several things:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create automated check(s) for the behaviour of the math
operation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create the math operation header and source file</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create an automated check to verify that the math
operation is registered in the factory</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Update the constructor to add the registration</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Write a rejection check to cover any examples provided
at the start of the sprint</span></p>

<p class=BodyText>We can make registration a bit more automatic, but more
importantly, we can make it so the factory is closed to change when adding new
math operations by using a touch of static magic.</p>

<h3><a name="_Toc202609248"><span>4.24.1<span style='font:7.0pt "Times New Roman"'>
</span></span>An object for registration</a></h3>

<p class=BodyText>What if we could write a new operation and not have to update
the factory? Automatic registration is possible with a few tricks. One of the
standard parts of this trick is to have a static variable in the body of a
method. We have seen this a few times now. However, now we want to do this for
something that is both complex and meant to remain in the code. We will use a
series of automated checks to get to an end product:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample><span class=CodeLineNumber>02: </span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>04:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>05: </span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span><span
style='color:black'> TEST_GROUP(MathOperationRegistrantShould) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:black'> };</span></p>

<p class=CodeExample><span class=CodeLineNumber>08: </span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span><span
style='color:black'> TEST(MathOperationRegistrantShould,
RecordObjectUponCreation) {</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>   std::</span>string<span style='color:black'> name(</span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'>   </span>Add<span style='color:black'> *op = </span><span
style='color:#7F0055'>new</span><span style='color:black'> Add;</span></p>

<p class=CodeExample><span class=CodeLineNumber>12:</span><span
style='color:black'>   </span>MathOperationRegistrant<span style='color:black'>
register_add(name, op);</span></p>

<p class=CodeExample><span class=CodeLineNumber>13: </span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='color:black'>   </span>MathOperationRegistrant<span style='color:black'>::</span>iterator<span
style='color:black'> candidate =</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span>     <span
style='color:black'> register_add.begin();</span></p>

<p class=CodeExample><span class=CodeLineNumber>16: </span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span><span
style='color:black'>   CHECK((*candidate).</span><span style='color:#0000C0'>first</span><span
style='color:black'> == name);</span></p>

<p class=CodeExample><span class=CodeLineNumber>18:</span><span
style='color:black'>   CHECK((*candidate).</span><span style='color:#0000C0'>second</span><span
style='color:black'> == op);</span></p>

<p class=CodeExample><span class=CodeLineNumber>19:</span><span
style='color:black'> }</span></p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Introduce a constant to avoid duplication
  “+” throughout the automated check.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create an operation. Note that since this
  is created using new, it must be deleted somewhere for this automated check
  to pass.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>12</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Create a registrant; this is a class that
  causes registration of some math operation. It requires two things, a name
  and an operation. We are going to have many of these in a collection. We are
  relying on polymorphism, which requires pointers or references to objects. We
  are going to store these in a template collection. Collections cannot store
  references, so it will store pointers. Therefore, use pointers throughout. We
  could use an std::shared_ptr, but for now I’m keeping it “simple.”</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>14 – 15</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>The MathOperationRegistrant keeps a
  collection and now we need to make sure that collection has the add
  operation. Rather than get access to the collection, return the beginning of
  the collection via an iterator. This keeps the underlying collection somewhat
  safe and provides for reading it later on (in the factory).</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Verify that the name is correct. It
  should be “+”.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>18</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Verify that the object is correct.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>??</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Notice that there is no code to
  explicitly delete the Add operator created on line 12? The registrant will do
  that itself it its desctructor.</span></p>
  </td>
 </tr>
</table>

<p class=BodyText>To get this to pass:</p>

<p class=CodeExample><span class=CodeLineNumber>01:</span> #pragma<span
style='color:black'> once</span></p>

<p class=CodeExample><span class=CodeLineNumber>02:</span> #ifndef<span
style='color:black'> MATHOPERATIONREGISTRANT_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>03:</span> #define<span
style='color:black'> MATHOPERATIONREGISTRANT_H_</span></p>

<p class=CodeExample><span class=CodeLineNumber>04: </span></p>

<p class=CodeExample><span class=CodeLineNumber>05:</span> #include<span
style='color:black'> </span><span style='color:#2A00FF'>&lt;map&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>06:</span> #include<span
style='color:black'> </span><span style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample><span class=CodeLineNumber>07:</span><span
style='color:#7F0055'> #include</span><span style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span class=CodeLineNumber>08: </span></p>

<p class=CodeExample><span class=CodeLineNumber>09:</span> struct<span
style='color:black'> </span>MathOperationRegistrant<span style='color:black'> {</span></p>

<p class=CodeExample><span class=CodeLineNumber>10:</span><span
style='color:black'>   </span>typedef<span style='color:black'> std::</span>map<span
style='color:black'>&lt;std::</span>string<span style='color:black'>, </span>MathOperation<span
style='color:black'>*&gt; </span>RegistrationMap<span style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>11:</span><span
style='color:black'>   </span>typedef<span style='color:black'> </span>RegistrationMap<span
style='color:black'>::</span>iterator<span style='color:black'> </span>iterator<span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>12: </span></p>

<p class=CodeExample><span class=CodeLineNumber>13:</span><span
style='color:black'>   </span>const<span style='color:black'> std::</span>string<span
style='color:black'> </span><span style='color:#0000C0'>name</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span class=CodeLineNumber>14:</span><span
style='color:black'>   MathOperationRegistrant</span></p>

<p class=CodeExample><span class=CodeLineNumber>15:</span><span
style='color:black'>         (</span>const<span style='color:black'> std::</span>string<span
style='color:black'> name, </span>MathOperation<span style='color:black'> *op):</span><span
style='color:#0000C0'>name</span><span style='color:black'>(name) </span><span
class=CodeLineNumber>16:  </span><span style='color:black'> {</span></p>

<p class=CodeExample><span class=CodeLineNumber>17:</span><span
style='color:black'>     <i>registered</i>()[name] = op;</span></p>

<p class=CodeExample><span class=CodeLineNumber>18:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>19: </span></p>

<p class=CodeExample><span class=CodeLineNumber>20:</span><span
style='color:black'>   ~MathOperationRegistrant() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>21:</span><span
style='color:black'>     </span>delete<span style='color:black'> <i>registered</i>()[</span><span
style='color:#0000C0'>name</span><span style='color:black'>];</span></p>

<p class=CodeExample><span class=CodeLineNumber>22:</span><span
style='color:black'>     <i>registered</i>().erase(</span><span
style='color:#0000C0'>name</span><span style='color:black'>);</span></p>

<p class=CodeExample><span class=CodeLineNumber>23:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>24: </span></p>

<p class=CodeExample><span class=CodeLineNumber>25:</span><span
style='color:black'>   </span>iterator<span style='color:black'> begin() { </span>return<span
style='color:black'> <i>registered</i>().begin(); }</span></p>

<p class=CodeExample><span class=CodeLineNumber>26: </span></p>

<p class=CodeExample><span class=CodeLineNumber>27:</span> private<span
style='color:black'>:</span></p>

<p class=CodeExample><span class=CodeLineNumber>28:</span><span
style='color:black'>   </span>static<span style='color:black'> </span>RegistrationMap<span
style='color:black'> &amp;registered() {</span></p>

<p class=CodeExample><span class=CodeLineNumber>29:</span><span
style='color:black'>     </span>static<span style='color:black'> </span>RegistrationMap<span
style='color:black'> registeredOperations;</span></p>

<p class=CodeExample><span class=CodeLineNumber>30:</span><span
style='color:black'>     </span>return<span style='color:black'>
registeredOperations;</span></p>

<p class=CodeExample><span class=CodeLineNumber>31:</span><span
style='color:black'>   }</span></p>

<p class=CodeExample><span class=CodeLineNumber>32:</span><span
style='color:black'> };</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <thead>
  <tr>
   <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Line</span></p>
   </td>
   <td width=401 valign=top style='width:401.4pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt'>
   <p class=TableHeading><span lang=EN-GB>Description</span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>10 - 11</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Use a map to store the name as the key
  and a pointer to a math operation is the value. Also introduce make the
  nested iterator of the underlying std::map class available as just “iterator”
  in the MathOperationRegistrant class. We’ve done this before several times.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>13</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>A registrant remembers the name but it
  does not appear to remember the math operation provided to the constructor. This
  value is used for cleaning up, as we will see.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>17</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Store the provided math operation under
  the name provided to the constructor. The registered() method returns a
  reference to an std::map. Where that map is stored is the special sauce that
  makes this automatic registration possible.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>21</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Release the memory associated with the
  math operation passed in. This class takes a pointer to something and takes
  ownership. This is a case where we might have considered using the
  std::shared_ptr.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>22</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This object is going away. It has just
  called delete on the underlying math operation, so just in case it goes away
  but someone is still using the underlying map, remove this entry from the
  map. That is, this object cleans up after itself because it knows that the
  underlying map is shared.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>25</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>Rather than making the whole map
  available, just allow its beginning to be accessed. This allows for automated
  checks but keeping the public interface minimal.</span></p>
  </td>
 </tr>
 <tr>
  <td width=36 valign=top style='width:.5in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>28 – 30</span></p>
  </td>
  <td width=401 valign=top style='width:401.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>This is a static method so it can be
  called anywhere. This could be a non-static method it turns out but by making
  it static, it suggests that it (and what it returns) are shared values. Line
  29 introduces an object that is constructed upon the first call to
  registered(). It then lives for the life of the application.</span></p>
  <p class=TableText><span lang=EN-GB>Regardless of when this static member
  function is first called, the C++ compiler will guarantee that the map’s
  constructor is called once and only once.</span></p>
  </td>
 </tr>
</table>

<h4>No Side Effects</h4>

<p class=BodyText>Automated checks should have no side effects. We have a
solution that uses a static map. How do we avoid side effects? In fact, the
destructor make sure to clean up after itself and the automated check creates
an object in a function, so an object gets inserted in the static map for the
duration of the automated check, and then upon exist, is removed.</p>

<h4>static considered harmful</h4>

<p class=BodyText>Static code makes writing reliable automated checks hard. In
this case we need a static map somewhere, so the registered() method is fine.
We just have too many direct dependencies upon it throughout the implementation
of the MathOperationRegistrant. This is quickly fixed using a default argument:</p>

<p class=CodeExample><span style='color:black'>  </span>RegistrationMap<span
style='color:black'> &amp;</span><span style='color:#0000C0'>map</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> </span><span style='color:#0000C0'>name</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationRegistrant(</span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> name, </span></p>

<p class=CodeExample><span style='color:black'>      </span>MathOperation<span
style='color:black'> *op, </span>RegistrationMap<span style='color:black'>
&amp;map = <i>registered</i>()) </span></p>

<p class=CodeExample><span style='color:black'>      : </span><span
style='color:#0000C0'>map</span><span style='color:black'>(map), </span><span
style='color:#0000C0'>name</span><span style='color:black'>(name) {</span></p>

<p class=CodeExample><span style='color:black'>    map[name] = op;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  ~MathOperationRegistrant() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>map</span><span style='color:black'>[</span><span
style='color:#0000C0'>name</span><span style='color:black'>];</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>map</span><span style='color:black'>.erase(</span><span
style='color:#0000C0'>name</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span>iterator<span
style='color:black'> begin() { </span><span style='color:#7F0055'>return</span><span
style='color:black'> </span><span style='color:#0000C0'>map</span><span
style='color:black'>.begin(); }</span></p>

<p class=BodyText>Now this code can be overridden if necessary. It turns out it
may be necessary, but there’s nothing obvious about this. Consider the purpose
of this class: operations will be registered here automatically, when we create
the math operation factory, it will get its operations from here rather than
building them itself. There’s no guarantee that the static map stored in
registered() will in fact be empty when this test executes. We’ll eventually
come across this problem. Given that we know there’s a potential problem, let’s
fix it now. Note, the only reason I notice this now is from previous experience
using this kind of automatic registration feature in other applications in C++.
Change the automated check:</p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'>::</span>RegistrationMap<span style='color:black'> testMap;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'> register_add(name, op, testMap);</span></p>

<p class=BodyText>That’s it. The change before made it so that none of the
methods directly refer to the static reference and allow for dependency
injection. This injects a dependent object so that this automated check has no
direct connection to the underlying static map. The production code has a
single path of execution; it is unaware of the particular map with which it
works, just that it works with the same map throughout its life.</p>

<p class=BodyText>We have a few more things to check:</p>

<h4>Do not allow the same name to be used twice</h4>

<p class=BodyText>Since people can now create math operations independently,
there’s a possibility that two operations will attempt to use the same name.
Rather than silently ignore this, let’s disallow it:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(MathOperationRegistrantShould,
DisallowDuplicatedNames) {</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>string<span
style='color:black'> name(</span>&quot;+&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span>Add<span
style='color:black'> *op = </span><span style='color:#7F0055'>new</span><span
style='color:black'> Add;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'>::</span>RegistrationMap<span style='color:black'> testMap;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'> register_add(name, op, testMap);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperationRegistrant<span
style='color:black'> r2(name, op, testMap);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown an exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>NameInUseException<span
style='color:black'> &amp;) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>For this to compile, we’ll need a new exception class:</p>

<h4>NameInUseException.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> NAMEINUSEEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> NAMEINUSEEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>class<span style='color:black'> </span>NameInUseException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> {};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>This test initially fails. We need to update the constructor:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>MathOperationRegistrant<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationRegistrant(</span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> name,</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> *op, </span>RegistrationMap<span style='color:black'> &amp;map
= <i>registered</i>()) </span></p>

<p class=CodeExample>    <span style='color:black'>: </span><span
style='color:#0000C0'>map</span><span style='color:black'>(map), </span><span
style='color:#0000C0'>name</span><span style='color:black'>(name) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>if</span><span style='color:black'>(map.find(name) ==
map.end())</span></p>

<p class=CodeExample><span style='color:black'>      map[name] = op;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>else</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
NameInUseException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<h4>Do not allow for 0 (null) math operations</h4>

<p class=BodyText>Next, let’s make sure that the arguments are OK. First, the
passed-in math operation:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;InvalidArgumentException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(MathOperationRegistrantShould,
DisallowANullMathOperation) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperationRegistrant<span
style='color:black'> register_add(</span>&quot;name&quot;<span
style='color:black'>, 0);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>InvalidArgumentException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(e.</span><span
style='color:#0000C0'>name</span><span style='color:black'> == </span>&quot;mathOperation&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This needs another exception class:</p>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'>
INVALIDARGUMENTEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'>
INVALIDARGUMENTEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>struct<span style='color:black'> </span>InvalidArgumentException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  InvalidArgumentException(</span>const<span
style='color:black'> std::</span>string<span style='color:black'> name) : </span><span
style='color:#0000C0'>name</span><span style='color:black'>(name) {}</span></p>

<p class=CodeExample><span style='color:black'>  ~InvalidArgumentException() </span>throw<span
style='color:black'>() {}</span></p>

<p class=CodeExample><span style='color:black'>  </span>const<span
style='color:black'> std::</span>string<span style='color:black'> </span><span
style='color:#0000C0'>name</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>Getting this to pass requires another change to the
registrant:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;InvalidArgumentException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>MathOperationRegistrant<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationRegistrant(</span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> name, </span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> *op, </span>RegistrationMap<span style='color:black'>
&amp;map = <i>registered</i>()) </span></p>

<p class=CodeExample>    <span style='color:black'>: </span><span
style='color:#0000C0'>map</span><span style='color:black'>(map), </span><span
style='color:#0000C0'>name</span><span style='color:black'>(name) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>if</span><span style='color:black'>(op == 0)</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
InvalidArgumentException(</span>&quot;mathOperation&quot;<span
style='color:black'>);</span></p>

<h4>Operations must have a non-zero length</h4>

<p class=CodeExample>TEST(MathOperationRegistrantShould,
DisallowAZeroLengthName) {</p>

<p class=CodeExample>  Add a;</p>

<p class=CodeExample>  <span style='color:#7F0055'>try</span> {</p>

<p class=CodeExample>    MathOperationRegistrant register_add(<span
style='color:#2A00FF'>&quot;&quot;</span>, &amp;a);</p>

<p class=CodeExample>    FAIL(<span style='color:#2A00FF'>&quot;Should have
thrown exception&quot;</span>);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>catch</span>(InvalidArgumentException
&amp;e) {</p>

<p class=CodeExample>    CHECK(e.<span style='color:#0000C0'>name</span> == <span
style='color:#2A00FF'>&quot;name&quot;</span>);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=BodyText>And a final update to get this automated check passing:</p>

<p class=CodeExample>  MathOperationRegistrant(<span style='color:#7F0055'>const</span>
std::string name, </p>

<p class=CodeExample>    MathOperation *op, RegistrationMap &amp;map = <i>registered</i>())
</p>

<p class=CodeExample>    : <span style='color:#0000C0'>map</span>(map), <span
style='color:#0000C0'>name</span>(name) {</p>

<p class=CodeExample>    <span style='color:#7F0055'>if</span>(op == 0)</p>

<p class=CodeExample>      <span style='color:#7F0055'>throw</span>
InvalidArgumentException(<span style='color:#2A00FF'>&quot;mathOperation&quot;</span>);</p>

<p class=CodeExample>    <span style='color:#7F0055'>if</span>(name.size() ==
0)</p>

<p class=CodeExample>      <span style='color:#7F0055'>throw</span>
InvalidArgumentException(<span style='color:#2A00FF'>&quot;name&quot;</span>);</p>

<p class=BodyText>This code has some room for cleaning it up, that is left as
an exercise to the reader.</p>

<h3><a name="_Toc202609249"><span>4.24.2<span style='font:7.0pt "Times New Roman"'>
</span></span>Automatically Register Multiplication</a></h3>

<p class=BodyText>Now we need to try this with an existing math operation. To
make this happen, remove the following lines from MathOperationFactory.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>operationsByName</span><span style='color:black'>[</span>&quot;*&quot;<span
style='color:black'>] = </span><span style='color:#7F0055'>new</span><span
style='color:black'> Multiplication;</span></p>

<p class=BodyText>This will case the automated check suite to fail with an
exception. Update Multiplication:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Multiplication.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> Multiplication::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs * rhs;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'> register_multiply(</span>&quot;*&quot;<span
style='color:black'>, </span><span style='color:#7F0055'>new</span><span
style='color:black'> Multiplication);</span></p>

<p class=BodyText>Running your automated checks at this point will produce an
interesting result. The problem is the destructor of the MathOperationFactory
assumes it is OK to delete everything but it did not allocate everything. So one
more change:</p>

<p class=CodeExample><span style='color:black'>MathOperationFactory::~MathOperationFactory()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'> r;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'>(</span>MathOperationRegistrant<span
style='color:black'>::</span>iterator<span style='color:black'> i = r.begin(); </span></p>

<p class=CodeExample><span style='color:#7F0055'>      </span><span
style='color:black'>i != r.end(); ++i)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>operationsByName</span><span style='color:black'>.erase((*i).</span><span
style='color:#0000C0'>first</span><span style='color:black'>);</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  ...</p>

<p class=BodyText>This removes any operations registered from the registrant;
those objects will be removed automatically when the system shuts down.</p>

<p class=BodyText>Now all of your checks should be passing. It is time to apply
this change to all of your math operations so that they are all registered in
their source files rather that in the factory.</p>

<p class=BodyText>Once you’ve made these updates, the factory simplifies:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample><span style='color:black'>MathOperationFactory::MathOperationFactory()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationRegistrant<span
style='color:black'> r;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'>(</span>MathOperationRegistrant<span
style='color:black'>::</span>iterator<span style='color:black'> i = r.begin(); </span></p>

<p class=CodeExample><span style='color:#7F0055'>      </span><span
style='color:black'>i != r.end(); ++i)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>operationsByName</span><span style='color:black'>[(*i).</span><span
style='color:#0000C0'>first</span><span style='color:black'>] = (*i).</span><span
style='color:#0000C0'>second</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609250"><span>4.24.3<span style='font:7.0pt "Times New Roman"'>
</span></span>Split registrant</a></h3>

<p class=BodyText>One final change is in order. Rather than have everything for
the registrant in its header file, let’s split the header into a header and
source.</p>

<h4>MathOperationRegistrant.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'>
MATHOPERATIONREGISTRANT_H_</span></p>

<p class=CodeExample>#define<span style='color:black'>
MATHOPERATIONREGISTRANT_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;map&gt;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample>class<span style='color:black'> </span>MathOperation<span
style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>struct<span style='color:black'> </span>MathOperationRegistrant<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  </span>typedef<span
style='color:black'> std::</span>map<span style='color:black'>&lt;std::</span>string<span
style='color:black'>, </span>MathOperation<span style='color:black'>*&gt; </span>RegistrationMap<span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>typedef<span
style='color:black'> </span>RegistrationMap<span style='color:black'>::</span>iterator<span
style='color:black'> </span>iterator<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span>RegistrationMap<span
style='color:black'> &amp;</span><span style='color:#0000C0'>map</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>const<span
style='color:black'> std::</span>string<span style='color:black'> </span><span
style='color:#0000C0'>name</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationRegistrant(</span>RegistrationMap<span
style='color:black'> &amp;map = registered());</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  MathOperationRegistrant(</span></p>

<p class=CodeExample><span style='color:black'>      </span>const<span
style='color:black'> std::</span>string<span style='color:black'> name, </span></p>

<p class=CodeExample>      MathOperation<span style='color:black'> *op, </span>RegistrationMap<span
style='color:black'> &amp;map = registered());</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  ~MathOperationRegistrant();</span></p>

<p class=CodeExample><span style='color:black'>  </span>iterator<span
style='color:black'> begin();</span></p>

<p class=CodeExample><span style='color:black'>  </span>iterator<span
style='color:black'> end();</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>static<span
style='color:black'> </span>RegistrationMap<span style='color:black'>
&amp;registered();</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>MathOperationRegistrant.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;InvalidArgumentException.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>MathOperationRegistrant::MathOperationRegistrant(</span></p>

<p class=CodeExample><span style='color:black'>  </span>RegistrationMap<span
style='color:black'> &amp;map) : map(map) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>MathOperationRegistrant::MathOperationRegistrant(</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> name, </span>MathOperation<span style='color:black'> *op, </span>RegistrationMap<span
style='color:black'> &amp;map)</span></p>

<p class=CodeExample><span style='color:black'>  : map(map), name(name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (op == 0)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
InvalidArgumentException(</span>&quot;mathOperation&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (name.size() == 0)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
InvalidArgumentException(</span>&quot;name&quot;<span style='color:black'>);</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (map.find(name) == map.end())</span></p>

<p class=CodeExample><span style='color:black'>    map[name] = op;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>else</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
NameInUseException();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>MathOperationRegistrant::~MathOperationRegistrant()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> map[</span><span
style='color:#0000C0'>name</span><span style='color:black'>];</span></p>

<p class=CodeExample><span style='color:black'>  map.erase(</span><span
style='color:#0000C0'>name</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>::</span>iterator<span
style='color:black'> MathOperationRegistrant::begin() {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> map.begin();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>::</span>iterator<span
style='color:black'> MathOperationRegistrant::end() {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> map.end();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>::</span>RegistrationMap<span
style='color:black'>&amp;</span></p>

<p class=CodeExample><span style='color:black'>MathOperationRegistrant::registered()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>static</span><span style='color:black'> </span>RegistrationMap<span
style='color:black'> registeredOperations;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> registeredOperations;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h2><a name="_Toc202609251"><span style='font-weight:normal'>4.25<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Add
Missing Examples</a></h2>

<p class=BodyText>There are a few missing examples from the original list:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddWithNoValuesProvided) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SubtractWithNoValuesProvided) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, MultiplyWithNoValuesProvided) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;*&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;DivideByZeroException.h&quot;</span></p>

<p class=CodeExample>TEST(RpnCalculatorShould, GenerateDivideByZeroWhenNoValuesProvided)
{</p>

<p class=CodeExample>  <span style='color:#7F0055'>try</span> {</p>

<p class=CodeExample>    <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;/&quot;</span>);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>catch</span>
(DivideByZeroException &amp;) {</p>

<p class=CodeExample>    CHECK(1);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, OnlyAddTwoMostRecentValues) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(3);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(2);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(6);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(7);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(2);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(9, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;drop&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(6, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, OnlySubtractTwoMostRecentValues)
{</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(3);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(2);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(6);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(7);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;enter(2);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(5, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;drop&quot;</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(6, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>}</p>

<h2><a name="_Toc202609252"><span style='font-weight:normal'>4.26<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Sprint
Summary</a></h2>

<p class=BodyText>The sprint is complete, all examples pass and there are a
number of unit checks to back up the rejection checks. We covered a lot of
ground:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Initial project creation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Adding a few operations</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Removing duplication</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Several examples of extracting class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Strategy Design Pattern</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Template Method Design Pattern</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Factory Design Pattern</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Automatic registration of new Operations</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Single Responsibility Principle</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Open/Closed Principle</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Calling base-class member functions from a
derived-class method of the same name</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Checking for exceptions in automated checks</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Writing basic exception classes and code to throw them</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::exception class</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::map</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>std::pair</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Delegation versus inheritance</span></p>

<p class=BodyText>The next sprint is not as feature rich; instead we will add a
few new operations and look at another style of writing automated unit checks.</p>

<h1><a name="_Toc202609253"><span style='font-weight:normal'>5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Rpn Calculator – Sprint 2 – Growing Features</a></h1>

<p class=BodyText>The description of this sprint will be strictly in the form
of examples. There are several new operations:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Given the user enters</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>When the user selects</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Then the result is</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3  2  6  7  2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>sum</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>20</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 1</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&lt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 4</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&lt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 4</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&lt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>==</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 3</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>==</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 1</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&gt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>1</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 4</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&gt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 7</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&gt;&nbsp;</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>0</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 5 1</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>swap_xy</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 1 5</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 4 1</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>dup</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 4 1 1</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 3 2 1 5 2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>n_dup</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4 3 2 1 5 2 1 5</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>any value &lt; 2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>4</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2 2</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>5</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>6</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2 3</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>7</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>7</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>8</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>2 2 2</span></p>
  </td>
 </tr>
 <tr>
  <td width=131 valign=top style='width:130.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>9</span></p>
  </td>
  <td width=135 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>pf</span></p>
  </td>
  <td width=108 valign=top style='width:1.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableText><span lang=EN-GB>3 3</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc202609254"><span style='font-weight:normal'>5.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding Sum</a></h2>

<p class=BodyText>This operation maps many values to one; it consumes all
values on the stack, adds them up and puts a single value back. We saw
something like this using std::accumulate back on page <span>114</span>,
section 3.23. What are things we want to check:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It consumes all and produces 1</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>It adds correctly</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Overflow would be reasonable but there’s a general
decision to ignore overflow</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>That this operation is registered – this applies to all
operations</span></p>

<p class=BodyText>With that in mind, we can check each of these things against
the same sequence. A question to ask is should we put all of the checks in one
place or many. In other places we tend to keep to one or a maybe a few checks
together. This will be no different:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Sum.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(SumShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> *</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(5);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(3);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(2);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(9);</span></p>

<p class=CodeExample><span style='color:black'>    </span>Sum<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(*</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SumShould, AddAllValues) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(19, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SumShould,
ProduceASingleValue) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice how all of the work happens in setup() and the two
methods simply check different results. It is possible that both of these could
fail, either one or could fail or, eventually, none of them fail. The
granularity makes for better targeting of problems when they occur.</p>

<p class=BodyText>For this to work:</p>

<h4>Sum.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> SUM_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> SUM_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> Sum: <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>Sum.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Sum.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Sum::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> result = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>while</span><span style='color:black'>(values.size() &gt; 0) {</span></p>

<p class=CodeExample><span style='color:black'>    result += values.top();</span></p>

<p class=CodeExample><span style='color:black'>    values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  values.push(result);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Sum Registration</h4>

<p class=BodyText>Sum needs to be registered; that work is done in Sum.cpp.
Rather than creating a separate source file for that automated check, let’s
experiment with putting it in the SumShould.cpp:</p>

<h4>Added to bottom of SumShould.cpp:</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Sum<span
style='color:black'>, </span>&quot;sum&quot;<span style='color:black'>);</span></p>

<h4>Added to bottom of Sum.cpp:</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_sum(</span>&quot;sum&quot;<span style='color:black'>, </span><span
style='color:#7F0055'>new</span><span style='color:black'> Sum);</span></p>

<h2><a name="_Toc202609255"><span style='font-weight:normal'>5.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Less Than</a></h2>

<p class=BodyText>What are the cases for Less Than:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>One value less than another</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>One value greater than the other</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Two equal values</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Less than is actually registered</span></p>

<p class=BodyText>Less than consumes two values and produces a single value, so
it behaves like a binary math operation and will therefore inherit from that
class instead of MathOperation:</p>

<h4>LessThanShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;LessThan.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(LessThanShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>LessThan<span
style='color:black'> </span><span style='color:#0000C0'>op</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(LessThanShould,
Be1For2Versus4) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, </span><span
style='color:#0000C0'>op</span><span style='color:black'>.calculate(2, 4));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>LessThan.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> LESSTHAN_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> LESSTHAN_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;BinaryMathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>LessThan<span
style='color:black'>: </span>public<span style='color:black'> </span>BinaryMathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>int<span
style='color:black'> calculate(</span>int<span style='color:black'> lhs, </span>int<span
style='color:black'> rhs);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>LessThan.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;LessThan.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>int</span><span
style='color:black'> LessThan::calculate(</span><span style='color:#7F0055'>int</span><span
style='color:black'> lhs, </span><span style='color:#7F0055'>int</span><span
style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> lhs &lt; rhs ? 1 : 0;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>A few more checks:</p>

<h4>Added to LessThanShould.cpp</h4>

<p class=CodeExample>TEST(LessThanShould, Be0For4Versus4) {</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>op</span>.calculate(4,
4));</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(LessThanShould, Be0For4Versus2) {</p>

<p class=CodeExample>  LONGS_EQUAL(0, <span style='color:#0000C0'>op</span>.calculate(4,
2));</p>

<p class=CodeExample>}</p>

<p class=BodyText>It should be registered:</p>

<h4>Added to LessThanShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>LessThan<span
style='color:black'>, </span>&quot;&lt;&quot;<span style='color:black'>);</span></p>

<p class=BodyText>Add the required registration to LessThan.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_lessThan(</span>&quot;&lt;&quot;<span style='color:black'>, </span><span
style='color:#7F0055'>new</span><span style='color:black'> LessThan);</span></p>

<h2><a name="_Toc202609256"><span style='font-weight:normal'>5.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Equal To and Greater than</a></h2>

<p class=BodyText>Equal to and greater than have the same set of checks as less
than, the actual results are different. Both of these consume two values and
produce a single result, as with Less Than. Given that information, create the
required checks for these classes and make sure they are registered.</p>

<h2><a name="_Toc202609257"><span style='font-weight:normal'>5.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Swap XY</a></h2>

<p class=BodyText>Swap XY consumes two values and produces two values, so it
does not fit under the Binary Math Operation class. Here is another example of
an automated check where all of the setup and execution happens in the setup()
method, followed by a number of checks, each in their own method:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;SwapXy.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(SwapXyShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> *</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(-3);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(5);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(1);</span></p>

<p class=CodeExample><span style='color:black'>    SwapXy().perform(*</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SwapXyShould,
ResultInSameStackSize) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(3, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SwapXyShould,
MakeXEqualTo5) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(5, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SwapXyShould,
MakeYEqualTo1) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(SwapXyShould,
LeaveNegative3WhereItWas) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(-3, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>SwapXy<span
style='color:black'>, </span>&quot;swap_xy&quot;<span style='color:black'>);</span></p>

<p class=BodyText>The implementation is straightforward:</p>

<h4>SwapXy.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#pragma</span> once</p>

<p class=CodeExample><span style='color:#7F0055'>#ifndef</span> SWAPXY_H_</p>

<p class=CodeExample><span style='color:#7F0055'>#define</span> SWAPXY_H_</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span> <span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span> SwapXy: <span
style='color:#7F0055'>public</span> MathOperation {</p>

<p class=CodeExample><span style='color:#7F0055'>public</span>:</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#endif</span></p>

<h4>SwapXy.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&quot;SwapXy.h&quot;</span></p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&quot;RpnStack.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> SwapXy::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> x = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> y = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  values.push(x);</span></p>

<p class=CodeExample><span style='color:black'>  values.push(y);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&quot;MathOperationRegistrant.h&quot;</span></p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_swapXy(</span><span style='color:#2A00FF'>&quot;swap_xy&quot;</span><span
style='color:black'>, </span><span style='color:#7F0055'>new</span><span
style='color:black'> SwapXy);</span></p>

<h2><a name="_Toc202609258"><span style='font-weight:normal'>5.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Dup</a> </h2>

<p class=BodyText>Dup is left as an exercise.</p>

<h2><a name="_Toc202609259"><span style='font-weight:normal'>5.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>N Dup</a></h2>

<p class=BodyText>This operation uses the top of the stack as a count and the
duplicates that many items from the remainder of the stack back on top of the
stack:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NDup.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(NDupShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> *</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(4);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(3);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(2);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(1);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(5);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(2);</span></p>

<p class=CodeExample><span style='color:black'>    NDup().perform(*</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(NDupShould,
HaveSameTwoValuesAtTop) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(5, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(NDupShould, StillHaveOriginalTwoValues)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(5, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(1, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(NDupShould,
LeaveRemainderOfStackAlone) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(2, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(3, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(4, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;top());</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>values</span><span style='color:black'>-&gt;pop();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample><span style='color:black'>TEST(NDupShould,
IncreaseStackSizeCorrectly) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(7, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>NDup<span
style='color:black'>, </span>&quot;n_dup&quot;<span style='color:black'>);</span></p>

<h4>NDup.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> NDUP_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> NDUP_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>NDup<span
style='color:black'>: </span>public<span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> perform(</span>RpnStack<span style='color:black'>
&amp;values);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>NDup.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NDup.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;vector&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> NDup::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> count = values.top();</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>vector<span
style='color:black'>&lt;</span><span style='color:#7F0055'>int</span><span
style='color:black'>&gt; toCopy;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'> (</span><span style='color:#7F0055'>int</span><span
style='color:black'> i = 0; i &lt; count; ++i) {</span></p>

<p class=CodeExample><span style='color:black'>   
toCopy.push_back(values.top());</span></p>

<p class=CodeExample><span style='color:black'>    values.pop();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'> (</span><span style='color:#7F0055'>int</span><span
style='color:black'> i = 0; i &lt; 2; ++i)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>for</span><span style='color:black'> (std::</span>vector<span
style='color:black'>&lt;</span><span style='color:#7F0055'>int</span><span
style='color:black'>&gt;::</span>reverse_iterator<span style='color:black'> i =
toCopy.rbegin();</span></p>

<p class=CodeExample><span style='color:black'>        i != toCopy.rend(); ++i)</span></p>

<p class=CodeExample><span style='color:black'>      values.push(*i);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_nDup(</span>&quot;n_dup&quot;<span style='color:black'>, </span><span
style='color:#7F0055'>new</span><span style='color:black'> NDup);</span></p>

<h2><a name="_Toc202609260"><span style='font-weight:normal'>5.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Prime Factors</a></h2>

<p class=BodyText>For this operation, we will take a slower approach and
attempt to get back to check driven development. We’ll start with a single
check and try to minimally modify the code to get the next check working. This
will also demonstrate yet another way to express automated checks:</p>

<h4>PrimeFactorsShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;PrimeFactors.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(PrimeFactorsOf) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> *</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnStack;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>values</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> givenTheValue(</span><span
style='color:#7F0055'>int</span><span style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;push(value);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> whenCalculatingItsPrimeFactors()
{</span></p>

<p class=CodeExample><span style='color:black'>    PrimeFactors().perform(*</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> expectNoResults() {</span></p>

<p class=CodeExample><span style='color:black'>    LONGS_EQUAL(0, </span><span
style='color:#0000C0'>values</span><span style='color:black'>-&gt;size());</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(PrimeFactorsOf, 1AreEmpty)
{</span></p>

<p class=CodeExample><span style='color:black'>  givenTheValue(1);</span></p>

<p class=CodeExample><span style='color:black'> 
whenCalculatingItsPrimeFactors();</span></p>

<p class=CodeExample><span style='color:black'>  expectNoResults();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>To get this passing:</p>

<h4>PrimeFactors.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> PRIMEFACTORS_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> PRIMEFACTORS_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>PrimeFactors<span
style='color:black'>: </span>public<span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> perform(</span>RpnStack<span style='color:black'>
&amp;values);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>PrimeFactors.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;PrimeFactors.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> PrimeFactors::perform(</span>RpnStack<span
style='color:black'> &amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  values.pop();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609261"><span>5.7.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Of 2 …</a></h3>

<p class=CodeExample>TEST_GROUP(PrimeFactorsOf) {</p>

<p class=CodeExample>  ...</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> expect(<span
style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>    LONGS_EQUAL(value, <span style='color:#0000C0'>values</span>-&gt;top());</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> andThen() {</p>

<p class=CodeExample>    <span style='color:#0000C0'>values</span>-&gt;pop();</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>  ...</p>

<p class=CodeExample>};</p>

<p class=CodeExample>TEST(PrimeFactorsOf, 2Are2) {</p>

<p class=CodeExample>  givenTheValue(2);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h4>Updated PrimeFactors.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
PrimeFactors::perform(RpnStack &amp;values) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> value =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(value == 2)</p>

<p class=CodeExample>    values.push(2);</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609262"><span>5.7.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Of 3…</a></h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 3Are3) {</p>

<p class=CodeExample>  givenTheValue(3);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(3);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h4>Updated PrimeFactors.cpp</h4>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(value &gt;= 2)</span></p>

<p class=CodeExample><span style='color:black'>    values.push(value);</span></p>

<h3><a name="_Toc202609263"><span>5.7.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Of 4 … multiple values</a></h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 4Are2And2) {</p>

<p class=CodeExample>  givenTheValue(4);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h4>Updated PrimeFactors.cpp – starting to get ugly</h4>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (value &gt;= 2) {</p>

<p class=CodeExample>    <span style='color:#7F0055'>if</span> (value % 2 == 0)
{</p>

<p class=CodeExample>      values.push(2);</p>

<p class=CodeExample>      value /= 2;</p>

<p class=CodeExample>    }</p>

<p class=CodeExample>    <span style='color:#7F0055'>if</span> (value &gt; 1)</p>

<p class=CodeExample>      values.push(value);</p>

<h3><a name="_Toc202609264"><span>5.7.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Of 5 …</a></h3>

<p class=BodyText>This one just works because it’s the same as 3.</p>

<p class=CodeExample>TEST(PrimeFactorsOf, 5Are5) {</p>

<p class=CodeExample>  givenTheValue(5);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(5);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609265"><span>5.7.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Of 6 … two values, but they are different</a></h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 6Are3And2) {</p>

<p class=CodeExample>  givenTheValue(6);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(3);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Surprisingly, or not, this one also works.</p>

<h3><a name="_Toc202609266"><span>5.7.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>As will 7 …</a></h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 7Are7) {</p>

<p class=CodeExample>  givenTheValue(7);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(7);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609267"><span>5.7.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>But 8 is different, 3 values, instead of just 2.</a></h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 8Are2And2And2) {</p>

<p class=CodeExample>  givenTheValue(8);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expect(2);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<h4>Finally an update to PrimeFactors.cpp</h4>

<p class=CodeExample>    <span style='color:#7F0055'>while</span> (value % 2 ==
0) {</p>

<p class=BodyText>Simply changing the “if” to a “while” fixes this.</p>

<h3><a name="_Toc202609268"><span>5.7.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Is 9 different?</a> </h3>

<p class=CodeExample>TEST(PrimeFactorsOf, 9Are3And3) {</p>

<p class=CodeExample>  givenTheValue(9);</p>

<p class=CodeExample>  whenCalculatingItsPrimeFactors();</p>

<p class=CodeExample>  expect(3);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expect(3);</p>

<p class=CodeExample>  andThen();</p>

<p class=CodeExample>  expectNoResults();</p>

<p class=CodeExample>}</p>

<p class=BodyText>This requires that we vary the divisor:</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (value &gt;= 2) {</p>

<p class=CodeExample>    <span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> divisor = 2; divisor &lt;= value; ++divisor)</p>

<p class=CodeExample>      <span style='color:#7F0055'>while</span> (value %
divisor == 0) {</p>

<p class=CodeExample>        values.push(divisor);</p>

<p class=CodeExample>        value /= divisor;</p>

<p class=CodeExample>      }</p>

<p class=CodeExample>    <span style='color:#7F0055'>if</span> (value &gt; 1)</p>

<p class=CodeExample>      values.push(value);</p>

<p class=CodeExample>  }</p>

<p class=BodyText>But wait, the loop starts at 2, so do we need the outer if
statement? Not at all.</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> divisor = 2; divisor &lt;= value; ++divisor)</p>

<p class=CodeExample>    <span style='color:#7F0055'>while</span> (value %
divisor == 0) {</p>

<p class=CodeExample>      values.push(divisor);</p>

<p class=CodeExample>      value /= divisor;</p>

<p class=CodeExample>    }</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (value &gt; 1)</p>

<p class=CodeExample>    values.push(value);</p>

<p class=BodyText>What about the bottom if statement?</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
PrimeFactors::perform(RpnStack &amp;values) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>int</span> value =
values.top();</p>

<p class=CodeExample>  values.pop();</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span> (<span
style='color:#7F0055'>int</span> divisor = 2; divisor &lt;= value; ++divisor)</p>

<p class=CodeExample>    <span style='color:#7F0055'>while</span> (value %
divisor == 0) {</p>

<p class=CodeExample>      values.push(divisor);</p>

<p class=CodeExample>      value /= divisor;</p>

<p class=CodeExample>    }</p>

<p class=CodeExample>}</p>

<p class=BodyText>It was also not necessary, and that finishes it. Try with a
few larger values.</p>

<h3><a name="_Toc202609269"><span>5.7.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Register It</a></h3>

<p class=BodyText>We spent so much time on checking the operation we nearly
forget to make sure it is registered in the factory:</p>

<h4>One more automated check in PrimeFactorsOf.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>PrimeFactors<span
style='color:black'>, </span>&quot;<u>pf</u>&quot;<span style='color:black'>);</span></p>

<h4>Actual Registration in PrimeFactors.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&quot;MathOperationRegistrant.h&quot;</span></p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'> </span></p>

<p class=CodeExample><span style='color:black'>           
register_primeFactors(</span><span style='color:#2A00FF'>&quot;<u>pf</u>&quot;</span><span
style='color:black'>, </span><span style='color:#7F0055'>new</span><span
style='color:black'> PrimeFactors);</span></p>

<h2><a name="_Toc202609270"><span style='font-weight:normal'>5.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Examples as Rejection Checks</a></h2>

<p class=BodyText>Notice that all of the automate checks written targeted the
implementation class directly? If we follow the stated policy, then we should
have several more checks written against the RpnCalculator class. Before you
write any of those, do you expect any of them to fail? If not, how might you
work this information into your project work?</p>

<p class=BodyText>In writing these checks, I observed a lot of duplication but
also a lot of unnecessary detail. I spend just a touch of time removing some
duplication:</p>

<p class=CodeExample>TEST_GROUP(RpnCalculatorShould) {</p>

<p class=CodeExample>   RpnCalculator *<span style='color:#0000C0'>calculator</span>;</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> setup() {</p>

<p class=CodeExample>     <span style='color:#0000C0'>calculator</span> = <span
style='color:#7F0055'>new</span> RpnCalculator;</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> teardown() {</p>

<p class=CodeExample>     <span style='color:#7F0055'>delete</span> <span
style='color:#0000C0'>calculator</span>;</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> topWas(<span
style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>     LONGS_EQUAL(value, <span style='color:#0000C0'>calculator</span>-&gt;getX());</p>

<p class=CodeExample>     <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;drop&quot;</span>);</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> enter(<span
style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>     <span style='color:#0000C0'>calculator</span>-&gt;enter(value);</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>   <span style='color:#7F0055'>void</span> execute(<span
style='color:#7F0055'>const</span> std::string &amp;opName) {</p>

<p class=CodeExample>     <span style='color:#0000C0'>calculator</span>-&gt;execute(opName);</p>

<p class=CodeExample>   }</p>

<p class=CodeExample>};</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AddTwoNumbers) {</p>

<p class=CodeExample>  enter(30);</p>

<p class=CodeExample>  enter(4);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  topWas(34);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould, SubtractTwoNumbers) {</p>

<p class=CodeExample>  enter(30);</p>

<p class=CodeExample>  enter(4);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  topWas(26);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>...</p>

<p class=CodeExample>TEST(RpnCalculatorShould, NDupCorrectly) {</p>

<p class=CodeExample>  enter(4);</p>

<p class=CodeExample>  enter(3);</p>

<p class=CodeExample>  enter(2);</p>

<p class=CodeExample>  enter(1);</p>

<p class=CodeExample>  enter(5);</p>

<p class=CodeExample>  enter(2);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;n_dup&quot;</span>);</p>

<p class=CodeExample>  topWas(5);</p>

<p class=CodeExample>  topWas(1);</p>

<p class=CodeExample>  topWas(5);</p>

<p class=CodeExample>  topWas(1);</p>

<p class=CodeExample>  topWas(2);</p>

<p class=CodeExample>  topWas(3);</p>

<p class=CodeExample>  topWas(4);</p>

<p class=CodeExample>  topWas(0);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>TEST(RpnCalculatorShould,
CalculatePrimeFactorsOf100Correctly) {</p>

<p class=CodeExample>  enter(100);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;<u>pf</u>&quot;</span>);</p>

<p class=CodeExample>  topWas(5);</p>

<p class=CodeExample>  topWas(5);</p>

<p class=CodeExample>  topWas(2);</p>

<p class=CodeExample>  topWas(2);</p>

<p class=CodeExample>  topWas(0);</p>

<p class=CodeExample>}</p>

<p class=BodyText>The remainder of the missing automated rejection checks is
left as an exercise.</p>

<h1><a name="_Toc202609271"><span style='font-weight:normal'>6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Rpn Calculator – Sprint 3 – Macros</a></h1>

<p class=BodyText>It is finally time to begin programming the calculator. First
some examples:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 1</span></p>
  </td>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 2</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 3</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 4</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 5</span></p>
  </td>
 </tr>
 <tr>
  <td width=81 valign=top style='width:81.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>+</p>
  <p class=CodeExample style='margin-left:0in'>*</p>
  <p class=CodeExample style='margin-left:0in'>-                          save
  macro1</p>
  <p class=CodeExample style='margin-left:0in'>6</p>
  <p class=CodeExample style='margin-left:0in'>4                         
  9                                </p>
  <p class=CodeExample style='margin-left:0in'>3</p>
  <p class=CodeExample style='margin-left:0in'>macro1</p>
  <p class=CodeExample style='margin-left:0in'>-42</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=81 valign=top style='width:81.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>save macro3</p>
  <p class=CodeExample style='margin-left:0in'>&lt;error&gt;</p>
  <p class=CodeExample style='margin-left:0in'>too few steps</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>^^%</p>
  <p class=CodeExample style='margin-left:0in'>&lt;error&gt;</p>
  <p class=CodeExample style='margin-left:0in'>unknown operation</p>
  <p class=CodeExample style='margin-left:0in'>4</p>
  <p class=CodeExample style='margin-left:0in'>2</p>
  <p class=CodeExample style='margin-left:0in'>+</p>
  <p class=CodeExample style='margin-left:0in'>6</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>+</p>
  <p class=CodeExample style='margin-left:0in'>+</p>
  <p class=CodeExample style='margin-left:0in'>save +</p>
  <p class=CodeExample style='margin-left:0in'>&lt;error&gt; operation name in
  use</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>/</p>
  <p class=CodeExample style='margin-left:0in'>!</p>
  <p class=CodeExample style='margin-left:0in'>save m1</p>
  <p class=CodeExample style='margin-left:0in'>start</p>
  <p class=CodeExample style='margin-left:0in'>swap_xy</p>
  <p class=CodeExample style='margin-left:0in'>m1</p>
  <p class=CodeExample style='margin-left:0in'>save m2</p>
  <p class=CodeExample style='margin-left:0in'>2</p>
  <p class=CodeExample style='margin-left:0in'>8</p>
  <p class=CodeExample style='margin-left:0in'>m2</p>
  <p class=CodeExample style='margin-left:0in'>24</p>
  </td>
 </tr>
</table>

<p class=BodyText>This is not a complete description of macro recording but it
is a good start. </p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Example 1 demonstrates a simple macro. Create a macro
with three math operations, enter 4 values and execute that macro. The result
of -42 shows that the execution of the steps is in the order entered.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Example 2 demonstrates that there must be at least 1
step in any macro – a somewhat arbitrary requirement, but one nonetheless.
Generate an error if this condition is not met.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Example 3 demonstrates that a macro can only be built
with known operations; if an unknown operation is provided, stop recording. This
is simple behavior. It makes creating a circular set of macros more difficult.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The fourth example demonstrates that you cannot use a
name that is already in use. This particular example only demonstrates that
with a build-in operation, but it applies for the ones you create yourself.
Notice, with this additional limitation, it is not possible to create circular
macros (the proof is left as an exercise).</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The final example demonstrates that one macro can refer
to another. Since there is a requirement that macros should execute like
regular operations, this may not seem significant. What is significant,
however, is that there are 2 macros in the system. In general, a user can
create any number of macros. That’s what this example suggests.</span></p>

<p class=BodyText>If we take these examples at face value, what are the actual
messages coming into our system? It looks like the follow methods must be
added: start, save. Are these methods on the Rpn Calculator, on a different façade
or are they simply new kinds of math operations? Any of the above will work.
For now, we’ll take the easier road and say these are new methods on the
RpnCalculator. What of the operations, do we need to create a new method or can
we use the existing one? The decision isn’t arbitrary: add a new method, change
an existing method, but both will work. Rather than belabor the decision, we’ll
use the existing method and see what happens.</p>

<h2><a name="_Toc202609272"><span style='font-weight:normal'>6.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Happy Path</a></h2>

<p class=BodyText>Here’s a happy path rejection check:</p>

<h4>Added to RpnCalculatorShould.cpp</h4>

<p class=CodeExample>TEST(RpnCalculatorShould, BeAbleToRecordAndExecuteMacro) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;start();</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;*&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;save(<span
style='color:#2A00FF'>&quot;macro1&quot;</span>);</p>

<p class=CodeExample>  enter(6);</p>

<p class=CodeExample>  enter(4);</p>

<p class=CodeExample>  enter(9);</p>

<p class=CodeExample>  enter(3);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;execute(<span
style='color:#2A00FF'>&quot;macro1&quot;</span>);</p>

<p class=CodeExample>  topWas(-42);</p>

<p class=CodeExample>}</p>

<h4>Get to compiling: Update RpnCalculator.h</h4>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> start();</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> save(<span
style='color:#7F0055'>const</span> std::string &amp;macroName);</p>

<h4>Get to linking: Update RpnCalculator.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::start() {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span> RpnCalculator::save(<span
style='color:#7F0055'>const</span> std::string &amp;macroName) {</p>

<p class=CodeExample>}</p>

<p class=BodyText>Now we have a failing rejection check. We have a few options:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Get this working out-to-in</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Get this working in-to-out</span></p>

<p class=BodyText>There are a number of moving parts to this and we already
have several things in place:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>This new construct should operate like a regular math
operation, so it should inherit from the math operation interface (abstract
base class).</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Math operations reside in the math operation factory,
which is also where they are looked up. So it seems that any new operations
should end up there.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Currently, math operations self-register. This option
is for ones that are known when the system is written, not when it is
executing, so we might need to update the factory to allow for new operations
while the system is running.</span></p>

<p class=BodyText>Rather than getting this check to pass out-to-in, let’s start
working in-to-out (or bottom-up). We have a decision; do we leave this check
failing while we do our other work or do we “remove” it somehow? There’s an
easy way to note this as “not ready to check yet”:</p>

<p class=CodeExample>IGNORE_TEST(RpnCalculatorShould,
BeAbleToRecordAndExecuteMacro) {</p>

<p class=BodyText>When we execute our automated checks, the summary will show
one ignored check. We’ll leave this in place until we think we’re ready to give
it a go.</p>

<h3><a name="_Toc202609273"><span>6.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A Macro</a></h3>

<p class=BodyText>First, we need to create something that can hold on to a
number of math operations but itself behaves like a math operation. Here’s one
such example:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Macro.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Add.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(MacroShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>MathOperationSpy<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  MathOperationSpy() : </span><span
style='color:#0000C0'>performCount</span><span style='color:black'>(0) {}</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>RpnStack<span
style='color:black'> &amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>    ++</span><span
style='color:#0000C0'>performCount</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> </span><span style='color:#0000C0'>performCount</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(MacroShould,
HandleMultipleMathOperations) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationSpy<span
style='color:black'> spy;</span></p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> values;</span></p>

<p class=CodeExample><span style='color:black'>  op.append(spy);</span></p>

<p class=CodeExample><span style='color:black'>  op.append(spy);</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(values);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(2, spy.</span><span
style='color:#0000C0'>performCount</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This check verifies that we can add multiple math operations
to a macro and that each is sent the perform message. </p>

<h4>Macro.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> MACRO_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> MACRO_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;list&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Macro<span
style='color:black'>: </span>public<span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> perform(</span>RpnStack<span style='color:black'>
&amp;values);</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> append(</span>MathOperation<span style='color:black'>
&amp;op);</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>private<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>typedef<span
style='color:black'> std::</span>list<span style='color:black'>&lt;</span>MathOperation<span
style='color:black'>*&gt; </span>MathOperationList<span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>typedef<span
style='color:black'> </span>MathOperationList<span style='color:black'>::</span>iterator<span
style='color:black'> </span>iterator<span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationList<span
style='color:black'> </span><span style='color:#0000C0'>operations</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>Notice that this class uses the &lt;list&gt; class instead of
&lt;vector&gt;. This is more for you to be aware of the class that for a
compelling design reason. Other than std::list versus std::vector, you won’t
notice any difference in this simple example.</p>

<h4>Macro.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Macro.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Macro::perform(</span>RpnStack<span style='color:black'>
&amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>for</span><span style='color:black'>(</span>iterator<span
style='color:black'> i = </span><span style='color:#0000C0'>operations</span><span
style='color:black'>.begin(); i != </span><span style='color:#0000C0'>operations</span><span
style='color:black'>.end(); ++i)</span></p>

<p class=CodeExample><span style='color:black'>    (*i)-&gt;perform(values);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Macro::append(</span>MathOperation<span style='color:black'>
&amp;op) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>operations</span><span style='color:black'>.push_back(&amp;op);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This is a minimal implementation of Macro that gets the
automated check passing.</p>

<h3><a name="_Toc202609274"><span>6.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding to factory</a></h3>

<p class=BodyText>Now we need to be able to add one of these to the factory.
Here is an automated check for that:</p>

<h4>Added to MathOperationFactoryShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>MathOperationStub<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>RpnStack<span
style='color:black'> &amp;values) {}</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(MathOperationFactoryShould,
AllowRegistrationOfNewMathOperations) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> factory;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationStub<span
style='color:black'> *op = </span><span style='color:#7F0055'>new</span><span
style='color:black'> MathOperationStub;</span></p>

<p class=CodeExample><span style='color:black'>  factory.add(</span>&quot;<u>newop</u>&quot;<span
style='color:black'>, op);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(op ==
&amp;factory.findOperationNamed(</span>&quot;<u>newop</u>&quot;<span
style='color:black'>));</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;) {</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should have
found a math operation&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This almost works. The check passes, but there is a memory
leak. The factory gets most of its operations from the math operation
registrant; all but this one. We need to update the destructor of the factory
to remove this memory leak:</p>

<p class=CodeExample>MathOperationFactory::~MathOperationFactory() {</p>

<p class=CodeExample>  MathOperationRegistrant r;</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span>(MathOperationRegistrant::iterator
i = r.begin(); </p>

<p class=CodeExample><span style='color:#7F0055'>      </span>i != r.end();
++i)</p>

<p class=CodeExample>    <span style='color:#0000C0'>operationsByName</span>.erase((*i).<span
style='color:#0000C0'>first</span>);</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span>(iterator i = <span
style='color:#0000C0'>operationsByName</span>.begin(); </p>

<p class=CodeExample><span style='color:#7F0055'>      </span>i != <span
style='color:#0000C0'>operationsByName</span>.end(); ++i)</p>

<p class=CodeExample>    <span style='color:#7F0055'>delete</span> (*i).<span
style='color:#0000C0'>second</span>;</p>

<p class=CodeExample>}</p>

<p class=BodyText>This is quite a bit, remove the operations in the factory
that come from the math operation registrant and then delete anything else that
is left over. While this does seem to work, it’s a bit of a mess:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Allocation in the calculator is passed to the factory
and then released: what happens if save() is not called?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The factory has to include MathOperation.h again
because of the destructor.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The destructor is ugly.</span></p>

<p class=BodyText>Auto-registration is to blame for some of this; the
destructor is more complex because of it. The split of allocation and
deallocation is problematic; we could have the factory perform the allocation
and deallocation or put it somewhere else. We could update the factory to use
the auto registration rather than copy it. Then the factory would look in two
places for an operation. Before doing any of that, let’s take this a bit
further to see how much uglier it gets.</p>

<h3><a name="_Toc202609275"><span>6.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding it to RpnCalculator</a></h3>

<p class=BodyText>We have two stub methods and we’re working on a happy path.
Here is something that will work for this first automated check:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::start() {</p>

<p class=CodeExample>  macro = <span style='color:#7F0055'>new</span> Macro;</p>

<p class=CodeExample>  recording = <span style='color:#7F0055'>true</span>;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::save(<span style='color:#7F0055'>const</span> std::string
&amp;macroName) {</p>

<p class=CodeExample>  factory-&gt;add(macroName, macro);</p>

<p class=CodeExample>  recording = <span style='color:#7F0055'>false</span>;</p>

<p class=CodeExample>}</p>

<p class=CodeExample><span style='color:#7F0055'>&nbsp;</span></p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  MathOperation &amp;op = <span style='color:#0000C0'>factory</span>-&gt;findOperationNamed(operatorName);</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span> (!recording) {</p>

<p class=CodeExample>    op.perform(<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>else</span> {</p>

<p class=CodeExample>    macro-&gt;append(op);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<h4>Member Data: Update header</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Macro<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'> ...</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> *</span><span style='color:#0000C0'>macro</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>bool</span><span style='color:black'> </span><span style='color:#0000C0'>recording</span><span
style='color:black'>;</span></p>

<h4>Member Data: Initialization</h4>

<p class=CodeExample>RpnCalculator::RpnCalculator() :</p>

<p class=CodeExample>  <span style='color:#0000C0'>factory</span>(<span
style='color:#7F0055'>new</span> MathOperationFactory), <span style='color:
#0000C0'>macro</span>(0), <span style='color:#0000C0'>recording</span>(<span
style='color:#7F0055'>false</span>) {</p>

<p class=CodeExample>}</p>

<p class=BodyText>These changes should work. Now update the rejection check in
RpnCalculatorShould by removing IGNORE_ and verify that it now passes. </p>

<h2><a name="_Toc202609276"><span style='font-weight:normal'>6.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Empty macros not allowed</a></h2>

<p class=BodyText>Here’s a rejection check for this one:</p>

<h4>Added to RpnCalculatorShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(RpnCalculatorShould, ThrowExceptionWhenAttemptingToSaveZeroLengthMacro)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>calculator</span><span style='color:black'>-&gt;start();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>calculator</span><span style='color:black'>-&gt;save(</span>&quot;should
fail&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>IllegalMacroException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>IllegalMacroException.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> ILLEGALMACROEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> ILLEGALMACROEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>IllegalMacroException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>This check fails, so we need to update the save() method to
check:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::save(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;macroName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(</span><span style='color:#0000C0'>macro</span><span
style='color:black'>-&gt;stepCountAtLeast(1) == </span><span style='color:#7F0055'>false</span><span
style='color:black'>)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>factory</span><span style='color:black'>-&gt;add(macroName, </span><span
style='color:#0000C0'>macro</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>recording</span><span style='color:black'> = </span><span
style='color:#7F0055'>false</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>For this to compile, link and pass:</p>

<h4>Added to Macro.h  </h4>

<p class=CodeExample><span style='color:#7F0055'>bool</span> stepCountAtLeast(<span
style='color:#7F0055'>unsighed</span> length) <span style='color:#7F0055'>const</span>;</p>

<h4>Defined in Macro.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>bool</span>
Macro::stepCountAtLeast(<span style='color:#7F0055'>unsigned</span> length) <span
style='color:#7F0055'>const</span> {</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>operations</span>.size() &gt;= length;</p>

<p class=CodeExample>}</p>

<p class=BodyText>The check passes but there’s a memory leak. If the macro has
been allocated in start(), it should be released either here or in the
destructor. We noticed the problem here, we can fix it here; this also points
to other problematic paths of execution:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::save(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;macroName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> *candidate = </span><span style='color:#0000C0'>macro</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>recording</span><span style='color:black'> = </span><span
style='color:#7F0055'>false</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(candidate-&gt;stepCountAtLeast(1))
{</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>factory</span><span style='color:black'>-&gt;add(macroName,
candidate);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> candidate;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>After this method is done, either the macro was recorded, in
which case its memory is owned by the factory, or the macro was deleted.
Regardless, the calculator is no longer recording and the macro attribute is
initialized to 0. This points to another problem, what if start() was not first
called?</p>

<h3><a name="_Toc202609277"><span>6.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Must call start first()</a></h3>

<p class=CodeExample>TEST(RpnCalculatorShould,
RequireStartToBeCalledBeforeSave) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>try</span> {</p>

<p class=CodeExample>    <span style='color:#0000C0'>calculator</span>-&gt;save(<span
style='color:#2A00FF'>&quot;should fail&quot;</span>);</p>

<p class=CodeExample>    FAIL(<span style='color:#2A00FF'>&quot;Should have
thrown exception&quot;</span>);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>catch</span>(IllegalMacroException
&amp;e) {</p>

<p class=CodeExample>    CHECK(1);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>}</p>

<p class=BodyText>This automated check fails. How it fails is somewhat platform
dependent. In my case it simply stops tests from running. What’s happening is a
null pointer reference on this line:</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(candidate-&gt;stepCountAtLeast(1))
{</span></p>

<p class=BodyText>We can fix this by checking for it:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::save(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;macroName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(</span><span style='color:#0000C0'>macro</span><span
style='color:black'> == 0)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample>  ...</p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice this is getting a touch ugly. We will work on this in
a bit; let’s continue with automated rejection checks based on the provided
examples. </p>

<h3><a name="_Toc202609278"><span>6.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Unknown operation cannot be added to a macro</a></h3>

<p class=CodeExample>TEST(RpnCalculatorShould,
OnlyAllowValidMathOperationsToBeAdded) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;start();</p>

<p class=CodeExample>  <span style='color:#7F0055'>try</span> {</p>

<p class=CodeExample>    execute(<span style='color:#2A00FF'>&quot;^^%&quot;</span>);</p>

<p class=CodeExample>    FAIL(<span style='color:#2A00FF'>&quot;Should have
thrown exception&quot;</span>);</p>

<p class=CodeExample>  } <span style='color:#7F0055'>catch</span>(UnknownMathOperationException
&amp;e) {</p>

<p class=CodeExample>    CHECK(1);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>  enter(4);</p>

<p class=CodeExample>  enter(2);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  topWas(6);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This check fails. While the system already throws
UnknownMathOperationException, the code needs to clean up the current macro and
move back into record mode after the exception, and it doesn’t. </p>

<h4>Update RpnCalculator.execute:</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::execute(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (!</span><span style='color:#0000C0'>recording</span><span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> &amp;op = </span><span style='color:#0000C0'>factory</span><span
style='color:black'>-&gt;findOperationNamed(operatorName);</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>      </span>MathOperation<span
style='color:black'> &amp;op = </span><span style='color:#0000C0'>factory</span><span
style='color:black'>-&gt;findOperationNamed(operatorName);</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>macro</span><span style='color:black'>-&gt;append(op);</span></p>

<p class=CodeExample><span style='color:black'>    } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>macro</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>recording</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>    }</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This is getting pretty ugly. There’s duplication and there
are essentially two different methods in this based on the state of things.  We
will address this shortly. For now, let’s finish the last two examples then
we’ll come back and consider different approaches to removing this ugliness.</p>

<h3><a name="_Toc202609279"><span>6.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Cannot save under existing name</a></h3>

<p class=BodyText>The system should not allow saving a macro name under a name
that is already in use:</p>

<h4>Added to RpnCalculatorShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(RpnCalculatorShould,
DisallowSavingUnderExistingName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>calculator</span><span style='color:black'>-&gt;start();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    execute(</span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    execute(</span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>calculator</span><span style='color:black'>-&gt;save(</span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception.&quot;<span style='color:black'>)</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>NameInUseException.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> NAMEINUSEEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> NAMEINUSEEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>NameInUseException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> {};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>This check fails. This is really a behavior of the factory,
not the rpn calculator, so we can get this check to pass but then we should
consider adding another micro-check to the math operation factory should source
file.</p>

<h4>Update MathOperationFactory.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> MathOperationFactory::add(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name, </span>MathOperation<span
style='color:black'> *op) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(</span><span style='color:#0000C0'>operationsByName</span><span
style='color:black'>.find(name) != </span><span style='color:#0000C0'>operationsByName</span><span
style='color:black'>.end())</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
NameInUseException();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>operationsByName</span><span style='color:black'>[name] = op;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>While the check passes, there’s a memory leak (again). To fix
this:</p>

<h4>Update RpnCalculator::save</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::save(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;macroName) {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>
(candidate-&gt;stepCountAtLeast(1)) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>factory</span><span style='color:black'>-&gt;add(macroName,
candidate);</span></p>

<p class=CodeExample><span style='color:black'>    } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>delete</span><span style='color:black'> candidate;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>    }</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice how the rpn calculator keeps growing? This class
violates the single responsibility principle, it is no longer cohesive. We’ll
address this once we finish the examples.</p>

<h3><a name="_Toc202609280"><span>6.2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding missing check on the factory</a></h3>

<p class=BodyText>The last automated rejection check required changes to the
factory, so let’s add that missing check on the factory:</p>

<h4>Added to MathOperationFactoryShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(MathOperationFactoryShould,
NoAllowRegistrationOfAlreadyUsedName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> factory;</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationStub<span
style='color:black'> *op = </span><span style='color:#7F0055'>new</span><span
style='color:black'> MathOperationStub;</span></p>

<p class=CodeExample><span style='color:black'>  factory.add(</span>&quot;<u>newop</u>&quot;<span
style='color:black'>, op);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    factory.add(</span>&quot;<u>newop</u>&quot;<span
style='color:black'>, op);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Notice, this one passes as is. That’s because we already
wrote a more integration-oriented check that required this behavior. This is
just keeping us honest.</p>

<h3><a name="_Toc202609281"><span>6.2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Macros can refer to other macros</a></h3>

<p class=BodyText>This should be no problem, let’s see how well we’ve done up
to this point:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AllowMacrosToReferToOtherMacros)
{</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;start();</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;/&quot;</span>);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;!&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;save(<span
style='color:#2A00FF'>&quot;m1&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;start();</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;swap_xy&quot;</span>);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;m1&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;save(<span
style='color:#2A00FF'>&quot;m2&quot;</span>);</p>

<p class=CodeExample>  enter(2);</p>

<p class=CodeExample>  enter(8);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;m2&quot;</span>);</p>

<p class=CodeExample>  topWas(24);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This automated rejection check passes without changing the
underlying system. This is no surprise since we treat macros like regular
operations.</p>

<h2><a name="_Toc202609282"><span style='font-weight:normal'>6.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Cleaning up the calculator</a></h2>

<p class=BodyText>The calculator has become a bit of a mess by adding support
for programmability. Here are the offending member functions:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::execute(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;operatorName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (!</span><span style='color:#0000C0'>recording</span><span
style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> &amp;op = </span><span style='color:#0000C0'>factory</span><span
style='color:black'>-&gt;findOperationNamed(operatorName);</span></p>

<p class=CodeExample><span style='color:black'>    op.perform(</span><span
style='color:#0000C0'>values</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>      </span>MathOperation<span
style='color:black'> &amp;op = </span><span style='color:#0000C0'>factory</span><span
style='color:black'>-&gt;findOperationNamed(operatorName);</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>macro</span><span style='color:black'>-&gt;append(op);</span></p>

<p class=CodeExample><span style='color:black'>    } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>macro</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>recording</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>    }</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::save(</span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'>
&amp;macroName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (</span><span style='color:#0000C0'>macro</span><span
style='color:black'> == 0)</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> *candidate = </span><span style='color:#0000C0'>macro</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>recording</span><span style='color:black'> = </span><span
style='color:#7F0055'>false</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'> (candidate-&gt;stepCountAtLeast(1))
{</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>factory</span><span style='color:black'>-&gt;add(macroName,
candidate);</span></p>

<p class=CodeExample><span style='color:black'>    } </span><span
style='color:#7F0055'>catch</span><span style='color:black'> (</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>delete</span><span style='color:black'> candidate;</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>    }</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> candidate;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>The RpnCalculator serves as the entry point into the system.
It shouldn’t do too much; instead it should delegate much of the work to other
objects. Generally, when a class does too much work, we extract out part of the
class into another class. This work is a prime candidate for such a
refactoring. We could:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create a class that does the programming</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Use the state pattern</span></p>

<p class=BodyText>The state pattern is a more specific form of factoring out
part of the work into another class. The difference is that there are typically
multiple states, which we have, and the next state is determined by messages
coming into the system. Consider:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The calculator is initially in calculation mode</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>When the start() message is received, the system is in
programming mode</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>When the save() message is received, the system returns
to normal mode</span></p>

<p class=BodyText>As it is, the state pattern may seem a bit complex for this
and it probably is. However, let’s go with it and see what we end up with.
Here’s a model of the state pattern applied to our domain:</p>

<p class=BodyText><img border=0 width=329 height=185 id="_x0000_i1053"
src="CppAndOOdTheLeastYouNeedToKnow_files/image032.gif"></p>

<p class=BodyText>In the state pattern, there’s a hierarchy of state objects.
In our case, that is the calculator mode and its two derivatives: Calculation
and Programming. The calculator has a reference to one of these at all times,
that’s the solid line from Rpn Calculator to Calculator Mode. The thing with
the state is called the “context” object. Typically, the state objects need to
work directly with the context, the rpn calculator in this case. If you do so
directly, then there is a circular reference between the object with the state
and the state hierarchy. Circular references are causes a number of problems,
so we’ll extract an interface called Context. The calculator will depend on its
mode; the mode will depend on the context. This breaks the circular reference. </p>

<p class=BodyText>The Rpn Calculator and its Calculator Mode can be considered
one logical grouping of functionality. When a message comes into the
calculator, depending on its mode it does one of a few things:</p>

<h4>Calculation Mode</h4>

<p class=BodyText><img border=0 width=424 height=123 id="_x0000_i1054"
src="CppAndOOdTheLeastYouNeedToKnow_files/image033.gif"></p>

<h4>Programming</h4>

<p class=BodyText><img border=0 width=423 height=230 id="_x0000_i1055"
src="CppAndOOdTheLeastYouNeedToKnow_files/image034.gif"></p>

<p class=BodyText>This is a lot to take in, so we’ll take it test-first.</p>

<h3><a name="_Toc202609283"><span>6.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Calculation Mode</a></h3>

<p class=BodyText>In calculation mode, we should do what the calculator was
doing before we added macros. With that in mind, here is a series of automated
checks on the Calculation class:</p>

<h4>CalculationShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(CalculationShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> *</span><span style='color:#0000C0'>context</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnCalculator;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>context</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(CalculationShould,
PutNumbersOnStackForEnter) {</span></p>

<p class=CodeExample><span style='color:black'>  Calculation mode;</span></p>

<p class=CodeExample><span style='color:black'>  mode.enter(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, 5);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(5, </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getX());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>For this to compile, you’ll need to make several changes:</p>

<h4>Create Calculation.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> CALCULATION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> CALCULATION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Context<span
style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Calculation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  Calculation();</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> ~Calculation();</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> enter(</span>Context<span style='color:black'> *context, </span>int<span
style='color:black'> value);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>Create Calculation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Context.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Calculation::Calculation() {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Calculation::~Calculation() {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Calculation::enter(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>int</span><span style='color:black'>
value) {</span></p>

<p class=CodeExample><span style='color:black'> 
context-&gt;getStack().push(value);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Create Context.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> CONTEXT_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> CONTEXT_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class RpnStack;</p>

<p class=CodeExample>class<span style='color:black'> </span>Context<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> ~Context() = 0;</span></p>

<p class=CodeExample>  <span style='color:#7F0055'>virtual</span> RpnStack
&amp;getStack() = 0;</p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> enter(</span>int<span
style='color:black'> value) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>Make RpnCalculator inherit from Context and add new method:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Context.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>Context<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> &amp;getStack() { </span>return<span style='color:black'> </span><span
style='color:#0000C0'>values</span><span style='color:black'>; }</span></p>

<p class=BodyText>The first check now passes.</p>

<h3><a name="_Toc202609284"><span>6.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Executes Operations Directly</a></h3>

<p class=CodeExample>TEST(CalculationShould, ExecuteOperationsDirectly) {</p>

<p class=CodeExample>  Calculation mode;</p>

<p class=CodeExample>  <span style='color:#0000C0'>context</span>-&gt;enter(5);</p>

<p class=CodeExample>  <span style='color:#0000C0'>context</span>-&gt;enter(2);</p>

<p class=CodeExample>  mode.execute(<span style='color:#0000C0'>context</span>,
<span style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>}</p>

<h4>Update Calculation.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;string&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Calculation<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> execute(</span>Context<span
style='color:black'> *context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name);</span></p>

<h4>Update Calculation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Calculation::execute(</span>Context<span style='color:
black'> *context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperation<span
style='color:black'> &amp;op </span></p>

<p class=CodeExample>    <span style='color:black'>=
context-&gt;getFactory()-&gt;findOperationNamed(name);</span></p>

<p class=CodeExample><span style='color:black'> 
op.perform(context-&gt;getStack());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Update Context.h:</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;string&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Context<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>void</span><span style='color:black'> execute(</span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> &amp;name) = 0;</span></p>

<h3><a name="_Toc202609285"><span>6.3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Throw exception when told to save</a></h3>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(CalculationShould,
ThrowExceptionWhenToldToSave) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Calculation<span
style='color:black'> mode;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    mode.save(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;should
fail&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>IllegalMacroException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Update Calculation.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Calculation<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> save(Context *context, </span><span
style='color:#7F0055'>const</span><span style='color:black'> std::</span>string<span
style='color:black'> &amp;name);</span></p>

<h4>Update Calculation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Calculation::save(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>throw</span><span style='color:black'> IllegalMacroException();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609286"><span>6.3.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Change to Programming Mode When Told To Start</a></h3>

<h4>Create an automated check</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;typeinfo&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Programming.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(CalculationShould, ChangeToProgrammingStateWhenToldToStart)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>Calculation<span
style='color:black'> mode;</span></p>

<p class=CodeExample><span style='color:black'>  mode.start(</span><span
style='color:#0000C0'>context</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span>CalculatorMode<span
style='color:black'> *finalMode = </span><span style='color:#0000C0'>context</span><span
style='color:black'>-&gt;getState();</span></p>

<p class=CodeExample><span style='color:black'>  CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(*finalMode) == </span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Programming<span
style='color:black'>));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This requires several changes to compile:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add a start method to Calculation</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create CalculationMode interface</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Update Calculation to use CalculationMode interface</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create Programming class from CalculationMode interface</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Add getState() and setState methods to Context</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Implement getState() and setState methods in
RpnCalculator</span></p>

<h4>Calculation.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Calculation<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> start(</span>Context<span
style='color:black'> *context);</span> </p>

<h4>CalculatorMode.h (extract interface from Calculation.h)</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> CALCULATORMODE_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> CALCULATORMODE_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;string&gt;</span></p>

<p class=CodeExample>class<span style='color:black'> </span>Context<span
style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>CalculatorMode<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> ~CalculatorMode() = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> enter(</span>Context<span
style='color:black'> *context, </span>int<span style='color:black'> value) = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> execute(</span>Context<span
style='color:black'> *context,</span>const<span style='color:black'> std::</span>string<span
style='color:black'> &amp;name) = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> save(</span>Context<span
style='color:black'> *context, </span>const<span style='color:black'> std::</span>string<span
style='color:black'> &amp;name) = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> start(</span>Context<span
style='color:black'> *context) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>CalculatorMode.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;CalculatorMode.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>CalculatorMode::~CalculatorMode()
{</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Update Calculation.h</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;CalculatorMode.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Calculation<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>CalculatorMode<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<h4>Create Programming.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> PROGRAMMING_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> PROGRAMMING_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;CalculatorMode.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Programming<span
style='color:black'>: </span>public<span style='color:black'> </span>CalculatorMode<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  Programming();</span></p>

<p class=CodeExample><span style='color:black'>  ~Programming();</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> enter(</span>Context<span style='color:black'> *context, </span>int<span
style='color:black'> value);</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> execute(</span>Context<span style='color:black'> *context,
</span>const<span style='color:black'> std::</span>string<span
style='color:black'> &amp;name);</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> save(</span>Context<span style='color:black'> *context, </span>const<span
style='color:black'> std::</span>string<span style='color:black'> &amp;name);</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> start(</span>Context<span style='color:black'> *context);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>Create Programming.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Programming.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Programming::Programming() {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Programming::~Programming() {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::enter(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>int</span><span style='color:black'>
value) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::execute(</span>Context<span style='color:
black'> *context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::save(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::start(</span>Context<span style='color:black'>
*context) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Update Context.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>CalculatorMode<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Context<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span>CalculatorMode<span
style='color:black'> *getState() = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>void</span><span style='color:black'> setState(</span>CalculatorMode<span
style='color:black'> *newMode) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>Update RpnCalculator.cpp</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>Context<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>CalculatorMode<span
style='color:black'> *getState();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setState(</span>CalculatorMode<span
style='color:black'> *newMode);</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>CalculatorMode<span
style='color:black'> *</span><span style='color:#0000C0'>mode</span><span
style='color:black'>;</span></p>

<h4>Update RpnCalculator.cpp</h4>

<p class=CodeExample>RpnCalculator::RpnCalculator() :</p>

<p class=CodeExample>  <span style='color:#0000C0'>factory</span>(<span
style='color:#7F0055'>new</span> MathOperationFactory), <span style='color:
#0000C0'>macro</span>(0), <span style='color:#0000C0'>recording</span>(<span
style='color:#7F0055'>false</span>),</p>

<p class=CodeExample><span style='color:#0000C0'> </span> <span
style='color:#0000C0'>mode</span>(0) {</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>RpnCalculator::~RpnCalculator() {</p>

<p class=CodeExample>  <span style='color:#7F0055'>delete</span> <span
style='color:#0000C0'>factory</span>;</p>

<p class=CodeExample>  <span style='color:#7F0055'>delete</span> <span
style='color:#0000C0'>mode</span>;</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>CalculatorMode<span style='color:black'>
*RpnCalculator::getState() {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>return</span><span style='color:black'> </span><span style='color:
#0000C0'>mode</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> RpnCalculator::setState(</span>CalculatorMode<span
style='color:black'> *newMode) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>mode</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>mode</span><span style='color:black'> = newMode;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>That’s a lot of mechanical work but it having done this and
gotten the final check against Calculation passing, you’ve well past the
half-way mark.</p>

<h3><a name="_Toc202609287"><span>6.3.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Programming Mode</a></h3>

<p class=BodyText>Now we do the same thing with Programming mode (in the same
order):</p>

<p class=CodeExample>TEST(ProgrammingShould, IgnoreEnterForNow) {</p>

<p class=CodeExample>  Programming op;</p>

<p class=CodeExample>  op.enter(<span style='color:#0000C0'>context</span>, 5);</p>

<p class=CodeExample>  CHECK(1);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This is a bit odd. For now enter should do nothing. This is
probably OK but it does appear to violate the Liskov substitution principle.
This happens when using the state pattern. What it means is that there is no
necessary behavior (for now) for this particular request. We will put this to
good use in the next section.</p>

<p class=BodyText>Since we had to stub out the enter() method on Programming to
get finish CalculationShould, this automated check just works. The use of
CHECK(1) at the end is an indication that this test is really a placeholder for
now.</p>

<h3><a name="_Toc202609288"><span>6.3.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Record Steps for Execution</a></h3>

<p class=CodeExample>TEST(ProgrammingShould, RecordOperationsForExecute) {</p>

<p class=CodeExample>  Programming op;</p>

<p class=CodeExample>  op.execute(<span style='color:#0000C0'>context</span>, <span
style='color:#2A00FF'>&quot;+&quot;</span>);</p>

<p class=CodeExample>  op.execute(<span style='color:#0000C0'>context</span>, <span
style='color:#2A00FF'>&quot;-&quot;</span>);</p>

<p class=CodeExample>  CHECK(op.getMacro()-&gt;stepCountAtLeast(2));</p>

<p class=CodeExample>}</p>

<h4>This requires adding a few things to Programming.h:</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Macro<span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Programming<span style='color:black'>: </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>CalculatorMode<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> *getMacro() { </span><span style='color:#7F0055'>return</span><span
style='color:black'> </span><span style='color:#0000C0'>macro</span><span
style='color:black'>; }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>Macro<span
style='color:black'> *</span><span style='color:#0000C0'>macro</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>And updating Programming.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Macro.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Context.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Programming::Programming() : </span><span
style='color:#0000C0'>macro</span><span style='color:black'>(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Macro) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>Programming::~Programming() {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>macro</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::execute(</span>Context<span style='color:
black'> *context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperation<span
style='color:black'> &amp;op </span></p>

<p class=CodeExample>    <span style='color:black'>=
context-&gt;getFactory()-&gt;findOperationNamed(name);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>macro</span><span style='color:black'>-&gt;append(op);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>This uses a new method on context, get factory.</h4>

<h4>Update Context.h:</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperationFactory<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Context<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span>MathOperationFactory<span
style='color:black'> *getFactory() = 0;</span></p>

<h4>And, finally, an update to RpnCalculator.h:</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>Context<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>MathOperationFactory<span
style='color:black'> *getFactory() { </span><span style='color:#7F0055'>return</span><span
style='color:black'> </span><span style='color:#0000C0'>factory</span><span
style='color:black'>; }</span></p>

<h3><a name="_Toc202609289"><span>6.3.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding macro to factory</a></h3>

<p class=BodyText>Here’s an automated check:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationFactory.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
AddMacroToFactoryUponSave) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.execute(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  op.execute(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;-&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  op.save(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;__add_sub__&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getFactory()-&gt;findOperationNamed(</span>&quot;__add_sub__&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Operation
not added to factory&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>To get this to work, we need to update Programming.cpp. Note
that this work already exists in RpnCalculator::save, even so, I’ll write a
minimal version and then make sure all checks are passing before moving on:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
Programming::save(Context *context, <span style='color:#7F0055'>const</span>
std::string &amp;name) {</p>

<p class=CodeExample>  context-&gt;getFactory()-&gt;add(name, <span
style='color:#0000C0'>macro</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>macro</span> = 0;</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609290"><span>6.3.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Saving causes state change</a></h3>

<p class=BodyText>Saving should also put the calculator back into calculation
mode:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;typeinfo&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
ChangeStateToCalculationUponSave) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.execute(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  op.save(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;__add__&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Calculation<span
style='color:black'>) == </span><span style='color:#7F0055'>typeid</span><span
style='color:black'>(*</span><span style='color:#0000C0'>context</span><span
style='color:black'>-&gt;getState()));</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>To get this working:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::save(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'> 
context-&gt;getFactory()-&gt;add(name, </span><span style='color:#0000C0'>macro</span><span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>  context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609291"><span>6.3.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Other checking</a></h3>

<p class=BodyText>A quick review of the RpnCalculator::save shows it does more
checking than our current Programming::save mode. This needs to be fixed
eventually, so now is as good of a time as ever. Here’s a list of the other
checks around saving from RpnCalculatorShould:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Disallow Saving Under Existing Name</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Only Allow Valid Math Operations To Be Added</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Throw Exception When Attempting to Save Zero Length
Macro</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Require Start to be called Before Save</span></p>

<p class=BodyText>Not all of these still make sense. For example, the
calculator will only be in programming mode if start() has been called, so we
can skip this check. The other checks seem to make sense, so let’s add them (as
a set):</p>

<h4>Disallow…</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
DisallowSavingUnderAnExistingName) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  op.execute(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    op.save(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;+&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Calculation<span
style='color:black'>) == </span><span style='color:#7F0055'>typeid</span><span
style='color:black'>(*</span><span style='color:#0000C0'>context</span><span
style='color:black'>-&gt;getState()));</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This check fails as the state after save() should be
Calculation but it is not.</p>

<p class=BodyText>Here’s an update to Programming::save() to make that happen:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::save(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>   
context-&gt;getFactory()-&gt;add(name, </span><span style='color:#0000C0'>macro</span><span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>    context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Valid Operations</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
OnlyAllowValidOperations) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    op.execute(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;bogus___&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Calculation<span
style='color:black'>) == </span><span style='color:#7F0055'>typeid</span><span
style='color:black'>(*</span><span style='color:#0000C0'>context</span><span
style='color:black'>-&gt;getState()));</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This fails as the last test failed, so we need to fix it as
well.</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;UnknownMathOperationException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::execute(</span>Context<span style='color:
black'> *context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> &amp;op </span></p>

<p class=CodeExample>      <span style='color:black'>=
context-&gt;getFactory()-&gt;findOperationNamed(name);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>macro</span><span style='color:black'>-&gt;append(op);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>UnknownMathOperationException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>Zero Length…</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
DisallowZeroLengthMacro) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    op.save(</span><span
style='color:#0000C0'>context</span><span style='color:black'>, </span>&quot;name&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>IllegalMacroException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(</span><span
style='color:#7F0055'>typeid</span><span style='color:black'>(</span>Calculation<span
style='color:black'>) == </span><span style='color:#7F0055'>typeid</span><span
style='color:black'>(*</span><span style='color:#0000C0'>context</span><span
style='color:black'>-&gt;getState()));</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This makes the save method a bit unruly but similar to the
original in RpnCalculator:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;NameInUseException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;IllegalMacroException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::save(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>const</span><span
style='color:black'> std::</span>string<span style='color:black'> &amp;name) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>if</span><span style='color:black'>(</span><span
style='color:#0000C0'>macro</span><span style='color:black'>-&gt;stepCountAtLeast(1))
{</span></p>

<p class=CodeExample><span style='color:black'>     
context-&gt;getFactory()-&gt;add(name, </span><span style='color:#0000C0'>macro</span><span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#0000C0'>macro</span><span style='color:black'> = 0;</span></p>

<p class=CodeExample><span style='color:black'>      context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>    } </span><span
style='color:#7F0055'>else</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>      context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>      </span><span
style='color:#7F0055'>throw</span><span style='color:black'>
IllegalMacroException();</span></p>

<p class=CodeExample><span style='color:black'>    }</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>NameInUseException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    context-&gt;setState(</span><span
style='color:#7F0055'>new</span><span style='color:black'> Calculation);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>throw</span><span style='color:black'> e;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609292"><span>6.3.10<span style='font:7.0pt "Times New Roman"'>
</span></span>What about the start method?</a></h3>

<p class=BodyText>A quick review of the Programming class reveals that the
start() method is empty. It is an error to call start() when already in
Programming mode, so let’s make that a fact:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;InvalidRequestException.h&quot;</p>

<p class=CodeExample><span style='color:black'>TEST(ProgrammingShould,
DisallowStart) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Programming<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>try</span><span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>    op.start(</span><span
style='color:#0000C0'>context</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>    FAIL(</span>&quot;Should
have thrown exception.&quot;<span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  } </span><span
style='color:#7F0055'>catch</span><span style='color:black'>(</span>InvalidRequestException<span
style='color:black'> &amp;e) {</span></p>

<p class=CodeExample><span style='color:black'>    CHECK(1);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This uses a new exception class:</p>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'>
INVALIDREQUESTEXCEPTION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'>
INVALIDREQUESTEXCEPTION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;exception&gt;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>struct<span style='color:black'> </span>InvalidRequestException<span
style='color:black'> : </span>public<span style='color:black'> std::</span>exception<span
style='color:black'> { };</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>And it requires a little bit of work in Programming.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;InvalidRequestException.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::start(</span>Context<span style='color:black'>
*context) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>throw</span><span style='color:black'> InvalidRequestException();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609293"><span>6.3.11<span style='font:7.0pt "Times New Roman"'>
</span></span>Ready to finish what we’ve started…</a></h3>

<p class=BodyText>Now that we have an implementation for the state hierarchy,
it is time to update our RpnCalculator to use it.</p>

<h2><a name="_Toc202609294"><span style='font-weight:normal'>6.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Updating RpnCalculator to use state...</a></h2>

<p class=BodyText>Calculator already has state member data but it’s initialized
to 0. Update the constructor:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Calculation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::RpnCalculator() :</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>factory</span><span style='color:black'>(</span><span
style='color:#7F0055'>new</span><span style='color:black'>
MathOperationFactory), </span><span style='color:#0000C0'>macro</span><span
style='color:black'>(0), </span><span style='color:#0000C0'>recording</span><span
style='color:black'>(</span><span style='color:#7F0055'>false</span><span
style='color:black'>),</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>mode</span><span style='color:black'>(</span><span style='color:#7F0055'>new</span><span
style='color:black'> Calculation) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Most of the method in calculator now delegate to its mode
member data:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::enter(<span style='color:#7F0055'>int</span> value) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>mode</span>-&gt;enter(<span
style='color:#7F0055'>this</span>, value);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::execute(<span style='color:#7F0055'>const</span> std::string
&amp;operatorName) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>mode</span>-&gt;execute(<span
style='color:#7F0055'>this</span>, operatorName);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::start() {</p>

<p class=CodeExample>  <span style='color:#0000C0'>mode</span>-&gt;start(<span
style='color:#7F0055'>this</span>);</p>

<p class=CodeExample>}</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
RpnCalculator::save(<span style='color:#7F0055'>const</span> std::string
&amp;macroName) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>mode</span>-&gt;save(<span
style='color:#7F0055'>this</span>, macroName);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Verify that all of the automated checks are passing.</p>

<h3><a name="_Toc202609295"><span>6.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Final Cleanup</a></h3>

<p class=BodyText>Notice that the RpnCalculator has member data it no longer
uses: macro, recording. Both of these can be removed from the header and source
files, along with the forward declaration and #include of Macro.</p>

<h3><a name="_Toc202609296"><span>6.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Summary</a></h3>

<p class=BodyText>This is a somewhat incomplete implementation of the state
pattern:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The two kinds of modes, programming and calculation,
know about each other. Often this is extracted out to a factory, but that seems
like too much for only 2 states. This suggests, as described above, that this
pattern is maybe overkill for this problem.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The RpnCalculator also creates an instance of
Calculate. Again, a factory would solve this problem.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>The places where state switches forces deallocation.
This is OK, but notice that the object sending the message to switch state is
ultimately the one that gets deleted. That turns out to be OK, but fragile.</span></p>

<h1><a name="_Toc202609297"><span style='font-weight:normal'>7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Rpn Calculator – Sprint 4 – More Complex Blocks</a></h1>

<p class=BodyText>Macros are interesting; it is time to add a few blocks. Here
are some examples:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:41.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 1</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 2</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 3</span></p>
  </td>
  <td width=99 valign=top style='width:99.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 4</span></p>
  </td>
  <td width=77 valign=top style='width:76.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 5</span></p>
  </td>
 </tr>
 <tr>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>65</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>8</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>.</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;8</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>emit</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;A</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>cr</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;\n</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>*</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  times2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>5</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>times2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>10</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>if</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>13</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>else</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>9</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>then</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  m1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>8</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>m1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>13</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>0</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>m1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>9</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  </td>
  <td width=99 valign=top style='width:99.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>ndup</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>if</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>drop</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>else</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>then</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  min</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>14</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>min</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&nbsp;</span></p>
  </td>
  <td width=77 valign=top style='width:76.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>ndup</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&gt;&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>if</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>-</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>else</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>then</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  down1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>6</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>3</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>down1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>5</span></p>
  </td>
 </tr>
 <tr>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 6</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>Example 7</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=99 valign=top style='width:99.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>&nbsp;</span></p>
  </td>
  <td width=77 valign=top style='width:76.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=TableHeading><span lang=EN-GB>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=72 valign=top style='width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>6</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>timesdo</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>*</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>end</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  m6</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>3</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>m7</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>192</span></p>
  </td>
  <td width=90 valign=top style='width:1.25in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>start</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>begin</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>ndup</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&gt;&nbsp;</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>while</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>1</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>-</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>else</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>then</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>dup</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>.</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>swap</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>save
  downto</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>6</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>2</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>downto</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;5</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;4</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;3</span></p>
  <p class=CodeExample style='margin-left:0in'><span style='color:windowtext'>&lt;out&gt;2</span></p>
  </td>
  <td width=72 valign=top style='width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=99 valign=top style='width:99.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
  <td width=77 valign=top style='width:76.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=CodeExample style='margin-left:0in'>&nbsp;</p>
  </td>
 </tr>
</table>

<p class=BodyText>Example 1 demonstrates three new operations: “.”, “emit”,
“cr”. These operations send output to the terminal. In our case, we’ll use
std::cout, but not directly. The first, ., simply displays the top of the stack
as a number and consumes that value. Emit, on the other hand, treats the number
as a character and displays it, thus since 65 is the ASCII value of A, that is
what is displayed. Finally, cr sends a new line to the output.</p>

<p class=BodyText>The second example demonstrates that a macro can contain
constants. Those constants are pushed onto the stack during execution. This
simple program simply multiplies what’s on the stack by 2.</p>

<p class=BodyText>The third example shows a new composite operation, if—else.
If the value at the top of the stack is non-zero, put 13 on the stack, else put
9 on the stack. It’s a simple little program, but it demonstrates a whole new
operation.</p>

<p class=BodyText>The fourth example uses the previous 2 examples to write a
min function.</p>

<p class=BodyText>&lt;fill in if I end up keeping those operations&gt;</p>

<h2><a name="_Toc202609298"><span style='font-weight:normal'>7.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Output Operations</a></h2>

<p class=BodyText>These operations produce output in some form. This introduces
several problems:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>To what do we send output?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>How do we record it to verify that the correct output
is in fact set?</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>How do we bolt this into our current system?</span></p>

<p class=BodyText>The answer to the first question is simple: an object. We
could use std::cout, but that introduces an unnecessary direct dependency upon
std::cout. While certainly possible, and even a reasonable default behavior,
our software will grow better if we avoid this direct connection to std::cout.</p>

<p class=BodyText>The answer to the second question is the same as the first:
an object. This second bullet also suggests an additional requirement; we want
this dependency to be injected into our system.</p>

<p class=BodyText>The final bullet begs a question and demonstrates a problem
with depending on concrete objects. We have three new operations, all of them
do things that our system was not designed to accomplish. Right now, all math
operations depend on an RpnCalculator, which is sent in to the perform method.
How can we easily fix this?</p>

<p class=BodyText>The work we did to introduce the state pattern has some of
what we need. Instead of having operations depend on RpnStack, we could instead
have them depend on Context. We can even accomplish this by migrating rather
than redoing everything all at once. </p>

<p class=BodyText>Here’s how we’re going to do that:</p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Create an automated check that uses a new interface on
MathOperation.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>That math operation will be concrete initially.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We’ll get the three new operations working using the
new perform() method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>We’ll then update individual automated checks to use
the new perform() method.</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Once the checks are migrated, we’ll slowly migrate
individual math operations to use the new method and slowly remove the old
version of perfom().</span></p>

<p class=BulletList1>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-GB>Once we think we’ve fixed everything, we’ll lean on the
compiler to tell us what we’re missing.</span></p>

<h3><a name="_Toc202609299"><span>7.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The “.” operator</a></h3>

<p class=BodyText>Here’s an automated check to get us started. This is a bit of
a leap since we’ve deiced to inject a dependent object. We end up creating
several classes:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Dot.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;OutputDestination.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(DotShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;vector&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>OutputDestinationSpy<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>vector<span
style='color:black'>&lt;</span><span style='color:#7F0055'>int</span><span
style='color:black'>&gt; </span><span style='color:#0000C0'>writtenInts</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> writeInt(</span><span
style='color:#7F0055'>int</span><span style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>writtenInts</span><span style='color:black'>.push_back(value);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DotShould,
SendTopValueAsNumber) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Dot<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span>OutputDestinationSpy<span
style='color:black'> *spy = </span><span style='color:#7F0055'>new</span><span
style='color:black'> OutputDestinationSpy;</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> calculator(spy);</span></p>

<p class=CodeExample><span style='color:black'>  calculator.enter(42);</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(&amp;calculator);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(42, spy-&gt;</span><span
style='color:#0000C0'>writtenInts</span><span style='color:black'>[0]);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h4>OutputDestination.h</h4>

<p class=BodyText> This is an interface that gives us a level of indirection
between the console and our system:</p>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> OUTPUTDESTINATION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> OUTPUTDESTINATION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> ~OutputDestination() = 0;</span></p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> writeInt(</span>int<span
style='color:black'> value) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>There is an implementation of the destructor in a file called
OutputDestination.cpp (not shown since we’ve done this several times).</p>

<p class=BodyText>Our RpnCalculator is constructed with a spy but how can we
make sure that no existing tests are broken? Overload the constructor:</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>OutputDestination<span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>RpnCalculator<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>Context<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  RpnCalculator();</span></p>

<p class=CodeExample><span style='color:black'>  RpnCalculator(</span>OutputDestination<span
style='color:black'> *out);</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>OutputDestination<span
style='color:black'> *getOutput() { </span><span style='color:#7F0055'>return</span><span
style='color:black'> </span><span style='color:#0000C0'>out</span><span
style='color:black'>; }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>private</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>OutputDestination<span
style='color:black'> *</span><span style='color:#0000C0'>out</span><span
style='color:black'>;</span></p>

<p class=BodyText>We’ve stuck to the forward declaration of OutputDestination
and it is stored as a pointer. What do we do by default in the no-argument
constructor versus the new constructor taking in an output destination?</p>

<h4>RpnCalculator.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ConsoleOutputDestination.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::RpnCalculator() :</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>factory</span><span style='color:black'>(</span><span
style='color:#7F0055'>new</span><span style='color:black'>
MathOperationFactory), </span><span style='color:#0000C0'>mode</span><span
style='color:black'>(</span><span style='color:#7F0055'>new</span><span
style='color:black'> Calculation),</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>out</span><span style='color:black'>(</span><span style='color:#7F0055'>new</span><span
style='color:black'> ConsoleOutputDestination) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::RpnCalculator(</span>OutputDestination<span
style='color:black'> *out) :</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>factory</span><span style='color:black'>(</span><span
style='color:#7F0055'>new</span><span style='color:black'>
MathOperationFactory), </span><span style='color:#0000C0'>mode</span><span
style='color:black'>(</span><span style='color:#7F0055'>new</span><span
style='color:black'> Calculation),</span></p>

<p class=CodeExample><span style='color:#0000C0'>   </span><span
style='color:black'> </span><span style='color:#0000C0'>out</span><span
style='color:black'>(out) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>RpnCalculator::~RpnCalculator()
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>out</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>mode</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>delete</span><span style='color:black'> </span><span style='color:
#0000C0'>factory</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>I’ve created a “real” implementation of
ConsoleOutputDestination that simply writes directly to cout. It is the default
type used. This gives backwards-compatibility with existing automated checks
and allows for dependency injection via overloading.</p>

<p class=BodyText>The destructor assumes it owns the memory associated with the
out member data. I also took the time to order deletes such that they are in
the reverse order of allocation. This is unnecessary, but I like to do this
because it makes my class behave more like auto-allocated objects.</p>

<h4>ConsoleOutputDestination.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'>
CONSOLEOUTPUTDESTINATION_H_</span></p>

<p class=CodeExample>#define<span style='color:black'>
CONSOLEOUTPUTDESTINATION_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;OutputDestination.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>ConsoleOutputDestination<span
style='color:black'>: </span>public<span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  ConsoleOutputDestination();</span></p>

<p class=CodeExample><span style='color:black'>  ~ConsoleOutputDestination();</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> writeInt(</span>int<span style='color:black'> value);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>ConsoleOutputDestination.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ConsoleOutputDestination.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;iostream&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>ConsoleOutputDestination::ConsoleOutputDestination()
{</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>ConsoleOutputDestination::~ConsoleOutputDestination()
{</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> ConsoleOutputDestination::writeInt(</span><span
style='color:#7F0055'>int</span><span style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>  std::cout &lt;&lt; value;</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<h3><a name="_Toc202609300"><span>7.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It Should Be Registered…</a></h3>

<p class=BodyText>It’s been a little while since we wrote a new Math Operation.
It’d be easy to forget to register it:</p>

<h4>Added to DotShould.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Dot<span
style='color:black'>, </span>&quot;.&quot;<span style='color:black'>);</span></p>

<h4>Added to Dot.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span><span style='color:#2A00FF'>&quot;MathOperationRegistrant.h&quot;</span></p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_dot(</span><span style='color:#2A00FF'>&quot;.&quot;</span><span
style='color:black'>, </span><span style='color:#7F0055'>new</span><span
style='color:black'> Dot);</span></p>

<h2><a name="_Toc202609301"><span style='font-weight:normal'>7.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Emit and a problem with growing interfaces…</a></h2>

<p class=BodyText>First an automated check:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Emit.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(EmitShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;OutputDestinationSpy.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(EmitShould, WriteCharacter)
{</span></p>

<p class=CodeExample><span style='color:black'>   </span>Emit<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>   </span>OutputDestinationSpy<span
style='color:black'> *spy = </span><span style='color:#7F0055'>new</span><span
style='color:black'> OutputDestinationSpy;</span></p>

<p class=CodeExample><span style='color:black'>   </span>RpnCalculator<span
style='color:black'> context(spy);</span></p>

<p class=CodeExample><span style='color:black'>   context.enter(</span>'A'<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>   op.perform(&amp;context);</span></p>

<p class=CodeExample><span style='color:black'>   CHECK_EQUAL_C_CHAR(</span>'A'<span
style='color:black'>, spy-&gt;</span><span style='color:#0000C0'>writtenChars</span><span
style='color:black'>[0]);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>This check uses a spy. Rather than create a new spy class, I
extracted it from the previous test and the used the same one in both places:</p>

<h4>OutputDestinationSpy.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> OUTPUTDESTINATIONSPY_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> OUTPUTDESTINATIONSPY_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&lt;vector&gt;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;OutputDestination.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>struct<span style='color:black'> </span>OutputDestinationSpy<span
style='color:black'> : </span>public<span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>vector<span
style='color:black'>&lt;</span>int<span style='color:black'>&gt; </span><span
style='color:#0000C0'>writtenInts</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>vector<span
style='color:black'>&lt;</span>char<span style='color:black'>&gt; </span><span
style='color:#0000C0'>writtenChars</span><span style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> writeInt(</span>int<span style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>writtenInts</span><span style='color:black'>.push_back(value);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> writeChar(</span>int<span style='color:black'> value) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>writtenChars</span><span style='color:black'>.push_back(value);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<p class=BodyText>This spy class needed to implement a new method on the
OutputDestination interface. Unfortunately, so did the ConsoleOuputDestination.</p>

<h4>OutputDestination.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>OutputDestination<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>void</span><span style='color:black'> writeChar(</span><span
style='color:#7F0055'>int</span><span style='color:black'> value) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>ConsoleOutputDestination.h   </h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>ConsoleOutputDestination<span style='color:black'>:
</span><span style='color:#7F0055'>public</span><span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> writeChar(</span><span
style='color:#7F0055'>int</span><span style='color:black'> value);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>ConsoledOutputDestination.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
ConsoleOutputDestination::writeChar(<span style='color:#7F0055'>int</span>
value) {</p>

<p class=CodeExample>  std::cout &lt;&lt; (<span style='color:#7F0055'>char</span>)value;</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609302"><span>7.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Emit should be registered</a></h3>

<p class=BodyText>Add the missing check and implementation to EmitShould.cpp
and Emit.cpp to make sure this new math operation is registered as “emit”.</p>

<h2><a name="_Toc202609303"><span style='font-weight:normal'>7.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finally, cr</a></h2>

<p class=BodyText>The cr operation sends “\n” to the console. We can repeat
what we’ve just done:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Cr.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(CrShould) {</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;OutputDestinationSpy.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(CrShould, WriteLine) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>Cr<span
style='color:black'> op;</span></p>

<p class=CodeExample><span style='color:black'>  </span>OutputDestinationSpy<span
style='color:black'> *spy = </span><span style='color:#7F0055'>new</span><span
style='color:black'> OutputDestinationSpy;</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> context(spy);</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(&amp;context);</span></p>

<p class=CodeExample><span style='color:black'> 
CHECK_EQUAL(1,spy-&gt;linesWritten);</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Cr<span
style='color:black'>, </span>&quot;<u>cr</u>&quot;<span style='color:black'>);</span></p>

<h4>Cr.h</h4>

<p class=CodeExample>#pragma<span style='color:black'> once</span></p>

<p class=CodeExample>#ifndef<span style='color:black'> CR_H_</span></p>

<p class=CodeExample>#define<span style='color:black'> CR_H_</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;MathOperation.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>class<span style='color:black'> </span>Cr<span
style='color:black'>: </span>public<span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample>public<span style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> perform(</span>Context<span style='color:black'>
*context);</span></p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> perform(</span>RpnStack<span style='color:black'>
&amp;values);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>Cr.cpp</h4>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;Cr.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;Context.h&quot;</span></p>

<p class=CodeExample>#include<span style='color:black'> </span><span
style='color:#2A00FF'>&quot;OutputDestination.h&quot;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>void<span style='color:black'> Cr::perform(</span>Context<span
style='color:black'> *context) {</span></p>

<p class=CodeExample><span style='color:black'> 
context-&gt;getOutput()-&gt;writeLine();</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>void<span style='color:black'> Cr::perform(</span>RpnStack<span
style='color:black'> &amp;values) {</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample><span style='color:black'>&nbsp;</span></p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;MathOperationRegistrant.h&quot;</p>

<p class=CodeExample>MathOperationRegistrant<span style='color:black'>
register_cr(</span>&quot;<u>cr</u>&quot;<span style='color:black'>, </span><span
style='color:#7F0055'>new</span><span style='color:black'> Cr);</span></p>

<h4>OutputDestination.h</h4>

<p class=CodeExample>class<span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample>  ...</p>

<p class=CodeExample><span style='color:black'>  </span>virtual<span
style='color:black'> </span>void<span style='color:black'> writeLine() = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h4>ConsoleOutputDestination.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>ConsoleOutputDestination<span style='color:black'>:
</span><span style='color:#7F0055'>public</span><span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> writeLine();</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>ConsoleOutputDestination.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
ConsoleOutputDestination::writeLine() {</p>

<p class=CodeExample>  std::cout &lt;&lt; std::endl;</p>

<p class=CodeExample>}</p>

<h4>OutputDestinationSpy.h</h4>

<p class=CodeExample>struct<span style='color:black'> </span>OutputDestinationSpy<span
style='color:black'> : </span>public<span style='color:black'> </span>OutputDestination<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>int<span
style='color:black'> </span><span style='color:#0000C0'>linesWritten</span><span
style='color:black'>;</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>  OutputDestinationSpy() : </span><span
style='color:#0000C0'>linesWritten</span><span style='color:black'>(0) {}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>  ...</p>

<p class=CodeExample><span style='color:black'>  </span>void<span
style='color:black'> writeLine() {</span></p>

<p class=CodeExample><span style='color:black'>    ++</span><span
style='color:#0000C0'>linesWritten</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample>#endif</p>

<h2><a name="_Toc202609304"><span style='font-weight:normal'>7.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Migrating to new Perform Interface</a></h2>

<p class=BodyText>We need to find all places where the old perform method is
called and, where possible, upgrade to the new interface that uses Context.
This will be a bit of work since many automated checks use RpnStack.</p>

<p class=BodyText>What follows are a few such examples of the change followed
by a list of other places you’ll need to update. I’m working alphabetically:</p>

<h3><a name="_Toc202609305"><span>7.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>BinaryMathOperation</a></h3>

<p class=BodyText>This is the first direct descendant of MathOperation alphabetically
so this is where we’ll start:</p>

<h4>Update BinaryMathOperationShould.cpp</h4>

<p class=BodyText>First thing we can do is change the setup to use a
calculator:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(BinaryMathOperationShould)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> *</span><span style='color:#0000C0'>context</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnStack<span
style='color:black'> *</span><span style='color:#0000C0'>values</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnCalculator;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>values</span><span style='color:black'> = &amp;</span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getStack();</span></p>

<p class=CodeExample><span style='color:#0000C0'>    ...</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>context</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>Applying this change maintains all checks. Next, we can
change just one of the checks to use the new method:</p>

<p class=CodeExample>TEST(BinaryMathOperationShould, ConsumeTwoValues) {</p>

<p class=CodeExample>  BinaryMathOperationSpy spy(*<span style='color:#0000C0'>values</span>);</p>

<p class=CodeExample>  spy.perform(<span style='color:#0000C0'>context</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(0, spy.<span style='color:#0000C0'>size</span>);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This does not work without a change to BinaryMathOperation.
When you have multiple overloaded virtual methods but you only override one,
C++ will stop searching up the hierarchy for overload resolution. To make C++
aware of all overloaded candidates you need to add a using statement:</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>BinaryMathOperation<span style='color:black'>: </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>using</span><span style='color:black'> </span>MathOperation<span
style='color:black'>::perform;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>RpnStack<span
style='color:black'> &amp;values);</span></p>

<p class=BodyText>Note that this makes the names available for overloaded name
resolution. To define one of the methods, we still need to explicitly specify
it as demonstrated by the last line.</p>

<p class=BodyText>Update the next few checks to use the different version of
perform. Replace all:</p>

<p class=CodeExample>spy.perform(*<span style='color:#0000C0'>values</span>);</p>

<p class=BodyText>With:</p>

<p class=CodeExample>spy.perform(<span style='color:#0000C0'>context</span>);</p>

<p class=BodyText>Now update the test double in the file as well:</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>BinaryMathOperationSpy<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>BinaryMathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  BinaryMathOperationSpy(</span>Context<span
style='color:black'> *context)</span></p>

<p class=CodeExample><span style='color:black'>      : </span><span
style='color:#0000C0'>context</span><span style='color:black'>(context), </span><span
style='color:#0000C0'>size</span><span style='color:black'>(-1), </span><span
style='color:#0000C0'>actualLhs</span><span style='color:black'>(0), </span><span
style='color:#0000C0'>actualRhs</span><span style='color:black'>(0) {}</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> calculate(</span><span
style='color:#7F0055'>int</span><span style='color:black'> lhs, </span><span
style='color:#7F0055'>int</span><span style='color:black'> rhs) {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>size</span><span style='color:black'> = </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getStack().size();</span></p>

<p class=CodeExample><span style='color:black'> </span><span style='color:#0000C0'>  
...</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span>Context<span
style='color:black'> *</span><span style='color:#0000C0'>context</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>For this to work we need to update each of the tests. Replace
all:</p>

<p class=CodeExample>BinaryMathOperationSpy<span style='color:black'>
spy(*values);</span></p>

<p class=BodyText>With:</p>

<p class=CodeExample>BinaryMathOperationSpy<span style='color:black'> spy(</span><span
style='color:#0000C0'>context</span><span style='color:black'>);</span></p>

<p class=BodyText>Now the values member data in the TEST_GROUP is no longer
needed so we can go back to the setup and clean it up as well:</p>

<p class=CodeExample>TEST_GROUP(BinaryMathOperationShould) {</p>

<p class=CodeExample>  RpnCalculator *<span style='color:#0000C0'>context</span>;</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> setup() {</p>

<p class=CodeExample>    <span style='color:#0000C0'>context</span> = <span
style='color:#7F0055'>new</span> RpnCalculator;</p>

<p class=CodeExample>    <span style='color:#0000C0'>context</span>-&gt;enter(4);</p>

<p class=CodeExample>    <span style='color:#0000C0'>context</span>-&gt;enter(2);</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> teardown() {</p>

<p class=CodeExample>    <span style='color:#7F0055'>delete</span> <span
style='color:#0000C0'>context</span>;</p>

<p class=CodeExample>  }</p>

<p class=CodeExample>};</p>

<p class=BodyText>This isn’t perfect. The last automated check uses the stack,
so it needs one final update:</p>

<p class=CodeExample>TEST(BinaryMathOperationShould, StoreCalculatedResult) {</p>

<p class=CodeExample>  BinaryMathOperationSpy spy(<span style='color:#0000C0'>context</span>);</p>

<p class=CodeExample>  spy.perform(<span style='color:#0000C0'>context</span>);</p>

<p class=CodeExample>  LONGS_EQUAL(13, <span style='color:#0000C0'>context</span>-&gt;getStack().top());</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice that while we did make changes to several automated
checks, we did not additionally change any production code nor did we get rid
of any of the checks. So this seems like a stable operation.</p>

<h3><a name="_Toc202609306"><span>7.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Update the calculator</a></h3>

<p class=BodyText>We should be able to update the calculator to use the new
perform method. Of course, with the introduction of the state pattern, the
actually calling of the operations is in the Calculation mode class:</p>

<h4>Calculation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
Calculation::execute(Context *context, <span style='color:#7F0055'>const</span>
std::string &amp;name) {</p>

<p class=CodeExample>  MathOperation &amp;op = </p>

<p class=CodeExample>    context-&gt;getFactory()-&gt;findOperationNamed(name);</p>

<p class=CodeExample>  op.perform(context);</p>

<p class=CodeExample>}</p>

<p class=BodyText>We would be able to remove the old perform method from
BinaryMathOperation if it were no longer required:</p>

<h4>MathOperation (starting to remove old perform)</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>MathOperation<span style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>void</span><span style='color:black'> perform(</span>RpnStack<span
style='color:black'> &amp;values) {};</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=BodyText>Now that this method is no longer required and there’s a
default implementation, we should be able to update BinaryMathOperation to
remove the old perform:</p>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>BinaryMathOperation<span style='color:black'>: </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>void</span><span style='color:black'> perform(</span>Context<span
style='color:black'> *context);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>virtual</span><span style='color:black'> </span><span
style='color:#7F0055'>int</span><span style='color:black'> calculate(</span><span
style='color:#7F0055'>int</span><span style='color:black'> lhs, </span><span
style='color:#7F0055'>int</span><span style='color:black'> rhs) = 0;</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>Updated BinaryMathOperation.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;BinaryMathOperation.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Context.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnStack.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> BinaryMathOperation::perform(</span>Context<span
style='color:black'> *context) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> rhs =
context-&gt;getStack().top();</span></p>

<p class=CodeExample><span style='color:black'>  context-&gt;getStack().pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> lhs =
context-&gt;getStack().top();</span></p>

<p class=CodeExample><span style='color:black'>  context-&gt;getStack().pop();</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>int</span><span style='color:black'> result = calculate(lhs, rhs);</span></p>

<p class=CodeExample><span style='color:black'> 
context-&gt;getStack().push(result);</span></p>

<p class=CodeExample><span style='color:black'>}</span>   </p>

<h3><a name="_Toc202609307"><span>7.4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The magic of checks</a></h3>

<p class=BodyText>I fully expected this to work, but it failed. Why? Well
macros still call the old perform. How do I know this now? I ran my automated
checks and two failed. The ones that failed are named:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AllowMacrosToReferToOtherMacros)</p>

<p class=CodeExample>TEST(RpnCalculatorShould, BeAbleToRecordAndExecuteMacro)</p>

<p class=BodyText>So without running the debugger, I’m pretty sure where I need
to target my efforts. A quick update to Macro.cpp fixes this as well:</p>

<h4>Macro.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Macro<span style='color:black'>: </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(Context
*context);</p>

<p class=CodeExample>  <span style='color:#7F0055'>void</span> perform(RpnStack
&amp;values);</p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> append(</span>MathOperation<span
style='color:black'> &amp;op);</span></p>

<h4>Macro.cpp (new perform added)</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
Macro::perform(Context *context) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>for</span>(iterator i = <span
style='color:#0000C0'>operations</span>.begin(); i != <span style='color:#0000C0'>operations</span>.end();
++i)</p>

<p class=CodeExample>    (*i)-&gt;perform(context);</p>

<p class=CodeExample>}</p>

<p class=BodyText>Since we’ve just got back to all checks passing by updating
macro, let’s update MacroShould to use the new interface:</p>

<p class=CodeExample><span style='color:#7F0055'>struct</span><span
style='color:black'> </span>MathOperationSpy<span style='color:black'> : </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>Context<span
style='color:black'> *context) {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(MacroShould,
HandleMultipleMathOperations) {</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> context;</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>  op.perform(&amp;context);</span></p>

<p class=CodeExample><span style='color:black'>  ...</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Now you can remove perform(RpnStack &amp;) from the Macro
class.</p>

<h3><a name="_Toc202609308"><span>7.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Newest Math Operations</a></h3>

<p class=BodyText>The Cr, Dot and Emit classes have an unnecessary
perform(RpnStack&amp;) method. You can safely update all three classes by
removing that version of perform from both places.</p>

<h3><a name="_Toc202609309"><span>7.4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Dup</a></h3>

<p class=BodyText>Dup is next alphabetically in the list. First, we’ll update
DupShould.cpp:</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;CppUTest/TestHarness.h&gt;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;Dup.h&quot;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;RpnCalculator.h&quot;</p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST_GROUP(DupShould) {</span></p>

<p class=CodeExample><span style='color:black'>  </span>RpnCalculator<span
style='color:black'> *</span><span style='color:#0000C0'>context</span><span
style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> setup() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'> = </span><span
style='color:#7F0055'>new</span><span style='color:black'> RpnCalculator;</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;enter(4);</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;enter(3);</span></p>

<p class=CodeExample><span style='color:black'>    Dup().perform(</span><span
style='color:#0000C0'>context</span><span style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> teardown() {</span></p>

<p class=CodeExample><span style='color:black'>    </span><span
style='color:#7F0055'>delete</span><span style='color:black'> </span><span
style='color:#0000C0'>context</span><span style='color:black'>;</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DupShould,
LeaveSameValueInX) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(3, </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getX());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DupShould, HaveSameValueInY)
{</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>context</span><span style='color:black'>-&gt;execute(</span>&quot;drop&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(3, </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getX());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DupShould,
IncreaseStackSizeBy1) {</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(3, </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getStack().size());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:black'>TEST(DupShould,
LeaveRemainderOfStackAlone) {</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>context</span><span style='color:black'>-&gt;execute(</span>&quot;drop&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#0000C0'>context</span><span style='color:black'>-&gt;execute(</span>&quot;drop&quot;<span
style='color:black'>);</span></p>

<p class=CodeExample><span style='color:black'>  LONGS_EQUAL(4, </span><span
style='color:#0000C0'>context</span><span style='color:black'>-&gt;getX());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=CodeExample>&nbsp;</p>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&quot;ShouldBeRegistered.h&quot;</p>

<p class=CodeExample><span style='color:black'>CHECK_REGISTRATION(</span>Dup<span
style='color:black'>, </span>&quot;<u>dup</u>&quot;<span style='color:black'>);</span></p>

<h4>Dup.h</h4>

<p class=CodeExample><span style='color:#7F0055'>class</span><span
style='color:black'> </span>Dup<span style='color:black'>: </span><span
style='color:#7F0055'>public</span><span style='color:black'> </span>MathOperation<span
style='color:black'> {</span></p>

<p class=CodeExample><span style='color:#7F0055'>public</span><span
style='color:black'>:</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>void</span><span style='color:black'> perform(</span>Context<span
style='color:black'> *context);</span></p>

<p class=CodeExample><span style='color:black'>};</span></p>

<h4>Dup.cpp</h4>

<p class=CodeExample><span style='color:#7F0055'>void</span>
Dup::perform(Context *context) {</p>

<p class=CodeExample> 
context-&gt;getStack().push(context-&gt;getStack().top());</p>

<p class=CodeExample>}</p>

<h3><a name="_Toc202609310"><span>7.4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>What Remains</a></h3>

<p class=BodyText>There are several classes left to update. Note, in a large
system, it might be OK to have both methods and do as we did, have one method
call the other for backwards compatibility.</p>

<p class=BodyText>The following automated checks need to be updated along with
their classes: Drop, FactorialShould, NDupShould, PrimFactorsOf, Sum, SwapXy.</p>

<p class=BodyText>Once you’ve updated all of these additional files, you can
safely remove the old perform from the system and make the new perform pure
virtual.</p>

<h2><a name="_Toc202609311"><span style='font-weight:normal'>7.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Numeric Constants as Operations</a></h2>

<p class=BodyText>Our next example uses a constant value as part of a macro.
Here’s an automated check to reflect that example:</p>

<p class=CodeExample>TEST(RpnCalculatorShould, AllowConstantValuesInMacros) {</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;start();</p>

<p class=CodeExample>  enter(2);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;!&quot;</span>);</p>

<p class=CodeExample>  <span style='color:#0000C0'>calculator</span>-&gt;save(<span
style='color:#2A00FF'>&quot;times2&quot;</span>);</p>

<p class=CodeExample>  enter(5);</p>

<p class=CodeExample>  execute(<span style='color:#2A00FF'>&quot;times2&quot;</span>);</p>

<p class=CodeExample>  topWas(10);</p>

<p class=CodeExample>}</p>

<p class=BodyText>This fails, but it shouldn’t be too much to make this work:</p>

<h4>Update Programming::enter</h4>

<p class=CodeExample><span style='color:#7F0055'>#include</span><span
style='color:black'> </span>&lt;sstream&gt;</p>

<p class=CodeExample><span style='color:#7F0055'>void</span><span
style='color:black'> Programming::enter(</span>Context<span style='color:black'>
*context, </span><span style='color:#7F0055'>int</span><span style='color:black'>
value) {</span></p>

<p class=CodeExample><span style='color:black'>  std::</span>stringstream<span
style='color:black'> name;</span></p>

<p class=CodeExample><span style='color:black'>  name &lt;&lt; value;</span></p>

<p class=CodeExample><span style='color:black'>  </span><span style='color:
#7F0055'>if</span><span style='color:black'>(context-&gt;getFactory()-&gt;hasRegistered(name.str())
== </span><span style='color:#7F0055'>false</span><span style='color:black'>) {</span></p>

<p class=CodeExample><span style='color:black'>    </span>MathOperation<span
style='color:black'> *op = </span><span style='color:#7F0055'>new</span><span
style='color:black'> PushConstant(value);</span></p>

<p class=CodeExample><span style='color:black'>   
context-&gt;getFactory()-&gt;add(name.str(), op);</span></p>

<p class=CodeExample><span style='color:black'>  }</span></p>

<p class=CodeExample><span style='color:black'>  execute(context, name.str());</span></p>

<p class=CodeExample><span style='color:black'>}</span></p>

<p class=BodyText>Add new method to MathOperationFactory (to header and source
file of course):</p>

<p class=CodeExample><span style='color:#7F0055'>bool</span>
MathOperationFactory::hasRegistered(<span style='color:#7F0055'>const</span>
std::string &amp;name) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>return</span> <span
style='color:#0000C0'>operationsByName</span>.find(name) != <span
style='color:#0000C0'>operationsByName</span>.end();</p>

<p class=CodeExample>}</p>

<p class=BodyText>Notice, that this method could have been extracted from the
add method:</p>

<p class=CodeExample><span style='color:#7F0055'>void</span>
MathOperationFactory::add(</p>

<p class=CodeExample><span style='color:#7F0055'>  const</span> std::string
&amp;name, MathOperation *op) {</p>

<p class=CodeExample>  <span style='color:#7F0055'>if</span>(hasRegistered(name))</p>

<p class=CodeExample>    <span style='color:#7F0055'>throw</span>
NameInUseException();</p>

<p class=CodeExample>  <span style='color:#0000C0'>operationsByName</span>[name]
= op;</p>

<p class=CodeExample>}</p>

<h2><a name="_Toc202609312"><span style='font-weight:normal'>7.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If … then … else</a></h2>

<p class=BodyText>The first example for this is simple. Why? To make it easier
to focus on something small and more easily obtained. If consumes the top value
on the stack. When that value is non-zero, it executes the series of steps up
to the else; otherwise it executes the steps from else to the then. Here’s an
automated check:</p>

<p class=BodyText>&nbsp;</p>

<h1><a name="_Toc202609313"><span style='font-weight:normal'>8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Rpn Calculator – Sprint 5 – FitNesse &amp; CSlim</a></h1>

<h3><a name="_Toc202609314"><span>8.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A spec-driven example</a></h3>

<h3><a name="_Toc202609315"><span>8.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A sequence diagram showing flow</a></h3>

<h2><a name="_Toc202609316"><span style='font-weight:normal'>8.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding a basic text ui</a></h2>

<h2><a name="_Toc202609317"><span style='font-weight:normal'>8.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding several more operators</a></h2>

<h3><a name="_Toc202609318"><span>8.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>ifelse</a></h3>

<h3><a name="_Toc202609319"><span>8.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>ntimesdo</a></h3>

<h3><a name="_Toc202609320"><span>8.3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>ConditionWhileDo</a></h3>

<h2><a name="_Toc202609321"><span style='font-weight:normal'>8.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Programming the Calculator with a string</a></h2>

<h3><a name="_Toc202609322"><span>8.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example forth program</a></h3>

<h3><a name="_Toc202609323"><span>8.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Breaking it into parts</a></h3>

<h4>Tokenization using spaces</h4>

<h4>Tokenization using regular expressions</h4>

<h3><a name="_Toc202609324"><span>8.4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Building a Basic Sequence</a></h3>

<h3><a name="_Toc202609325"><span>8.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Building a conditional sequence</a></h3>

<h3><a name="_Toc202609326"><span>8.4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Building a complex sequence</a></h3>

<h3><a name="_Toc202609327"><span>8.4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Adding the behavior into the calculator</a></h3>

<h3><a name="_Toc202609328"><span>8.4.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Exercising the new behavior from the text ui</a></h3>

<h3><a name="_Toc202609329"><span>8.4.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Saving your extensions</a></h3>

<h1><a name="_Toc202609330"><span style='font-weight:normal'>9<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Where to go next?</a></h1>

<h2><a name="_Toc202609331"><span style='font-weight:normal'>9.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>TDD Is Not Enough</a></h2>

<h3><a name="_Toc202609332"><span>9.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>GRASP</a></h3>

<h3><a name="_Toc202609333"><span>9.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>SOLID + D</a></h3>

<h4>Packaging Metrics</h4>

<h3><a name="_Toc202609334"><span>9.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Code Smells</a></h3>

<h3><a name="_Toc202609335"><span>9.1.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>WELC</a></h3>

<h3><a name="_Toc202609336"><span>9.1.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Test Doubles</a></h3>

<h3><a name="_Toc202609337"><span>9.1.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Coding Katas</a></h3>

<h3><a name="_Toc202609338"><span>9.1.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The 4 Actions (should be sooner)</a></h3>

<h1><a name="_Toc202609339"><span style='font-weight:normal'>10<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Appendix A: Revealing the Magician</a></h1>

<h2><a name="_Toc202609340"><span style='font-weight:normal'>10.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Arrays
versus pointers</a></h2>

<h3><a name="_Toc202609341"><span>10.1.1<span style='font:7.0pt "Times New Roman"'>
</span></span>Koenig’s i[3] == 3[i] trick</a></h3>

<h2><a name="_Toc202609342"><span style='font-weight:normal'>10.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Methods
versus functions</a></h2>

<h2><a name="_Toc202609343"><span style='font-weight:normal'>10.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Operator
Overloading</a></h2>

<h2><a name="_Toc202609344"><span style='font-weight:normal'>10.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Overloading
&lt;&lt;</a></h2>

<h2><a name="_Toc202609345"><span style='font-weight:normal'>10.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Overloading
++i versus i++</a></h2>

<h2><a name="_Toc202609346"><span style='font-weight:normal'>10.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Virtual
Functions</a></h2>

<h2><a name="_Toc202609347"><span style='font-weight:normal'>10.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>new
&amp; delete versus malloc &amp; free</a></h2>

<h1><a name="_Toc202609348"><span style='font-weight:normal'>11<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Appendix B: More Complex Composition with Bind</a></h1>

<h1><a name="_Toc202609349"><span style='font-weight:normal'>12<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Appendix C: FitNesse, a quick introduction</a></h1>

<h1><a name="_Toc202609350"><span style='font-weight:normal'>13<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>To Be Deleted</a></h1>

<h2><a name="_Toc202609351"><span style='font-weight:normal'>13.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>My
Story Until 2010</a></h2>

<p class=BodyText>My name is Brett L. Schuchert. I pronounce my last name as
“shoe – heart” but I’m happy with many variations on that name. You can review
my CV at <a href="http://schuchert.wikispaces.com/MyCv">http://schuchert.wikispaces.com/MyCv</a>.</p>

<p class=BodyText>I started using computers on a paper terminal playing start
trek in 7<sup>th</sup> grade. During 8<sup>th</sup> grade I nearly failed a
typing class on manual typewriters and I started learning BASIC on an Apple II,
mostly drawing low-res graphics. I took programming classes in high school;
first BASIC, then COBOL and 6502 Assembly language. Because of the COBOL class,
I took a typing class and learned to touch type (two spaces after each.)
because my COBOL programs were hundreds to thousands of lines long. I learned 6010
Assembly on a Commodore 64 before taking the 6502 Assembly language course in
High School. The processors were nearly the same but on the 6510 it was
possible to view 64K of RAM as well as the ROM on top of the RAM by disabling
interrupts and programming address 0 and 1 with a memory pattern.</p>

<p class=BodyText>I studied both Electrical Engineering and Computer Science at
the University of Iowa. I first learned data structures and algorithms in
Pascal. I followed that with a class on assembly language programming with two
simulated assembly languages. The first assembly language did not have a stack,
the second one did. The most important thing I did in that class was learn
about activation records (stack frames) and we wrote recursive algorithms in
assembly. It was quite useful.</p>

<p class=BodyText>Next in line was discrete mathematics. This gave me an
appreciation of logic and a hate of program correctness proofs. At that time I
through them to be bunk. The only difference between then and now is I have a
stronger argument that I won’t bore you with. I took operating systems courses,
programming language foundations courses, my favorite language from that series
being SNOBOL and learning about Bacus Naur Form.</p>

<p class=BodyText>In early 1989 I took an operating systems programming class
from Mahesh Dodani. This turns out to be one of the most important classes
because of professor Dodani. He allowed me to take that OO programming class,
which allowed me to become a research assistant and learn C++. I that job, I
worked with Jeff Francis, who knew a lot more about programming than I did. He
taught me about revision control, specifically CVS. I’m amazed still today at
places I go that don’t use such tools.</p>

<p class=BodyText>Working as a Research Assistant later allowed me to be an
undergraduate teaching assistant in the College of Engineering, where I helped
port an old embedded system programming class from assembly to C. In doing
that, I had to port the cross-compiler. It was a K&amp;R Style 1 compiler and I
had to simply write getc and putc. I started by looking at the generated assembly.
It was 68000, which I knew from an engineering course. I started with
hand-coded assembly, and then I moved to embedded assembly in the C code. I
then realized that all I was doing was reading memory locations, so I just cast
the address in memory from a void* to a char* and did everything with macros. I
mention this because it was at that point that I groked pointers fully. I
nearly had them down before that experience, but that solidified pointers for
me. Later, when I had to interact with an A to D converter, I just read an
address. When I realized that function call overhead was prohibitive on the
platform, I redesigned the API to take an array and count. That was a valuable
lesson about performance, which is really no longer necessary at that level but
still relevant between systems.</p>

<p class=BodyText>While all of this was going on, I was also teaching computer
literacy courses at Kirkwood Community college. By the time I was learning C++
and Smalltalk, I had 4 years of teaching under my belt to so-called non-traditional
students. In one class I had a range of ages from 17 – 63. </p>

<p class=BodyText>When I started learning C++ I was using CFront 1.1. There
were no books and the internet as we know it really didn’t exist. The first
book I bought was “The Annotated Reference Manual” with two “experimental”
chapters, one on templates, and the other on exceptions. Later, I came across
“Advanced C++ Programming Styles and Idioms” by James Coplien. I tore into that
book and then started an email conversation with the author. That was exceptionally
valuable for me because I learned quite a bit form the book and my
conversations, and James introduced me to the world of book reviews. I stated
reviewing books (badly if I’m being honest), and this lead to a book review by
a relative unknown, Robert Martin. He would become my boss about 13 years later
and be better known as Uncle Bob.</p>

<p class=BodyText>I worked 18 months at a startup in Dallas after leaving
college. I thought I knew C++ but I was a typical arrogant college graduate who
though he knew everything but really didn’t know what was important. I did know
the language well; I didn’t understand the domain at all. I ended up using AWK
quite a bit for data conversion and I worked as a technical business analyst. </p>

<p class=BodyText>During this time I managed to teach a few C and C++ classes
at The University of Texas at Arlington. That’s where I wrote my first TCP/IP
application and my first client/server code. I was too stupid to not try to do
so in class, live, making heavy use of the man command along the way. I learned
at least as much as my students to be sure.</p>

<p class=BodyText>My next job was with a small company called Object Space. I
joined as a trainer working with Graham Glass. At first it was C++ training and
them Smalltalk training. I took the excellent outlines that Graham had
intuitively developed and formalized them so I could teach them. This is when I
started writing too many slides for classes. During this time we also added
other classes on formal Object-Oriented analysis and design. I worked with
Craig Larman on course development. I have a memory of he and I huddled
together around a 13” monitor using Visio in Windows NT to design the flow for
our C++ and Smalltalk classes to keep them in Sync.</p>

<p class=BodyText>We used an interesting design problem in that class,
Monopoly. I learned a lot about analysis, design, programming, design patterns,
formal software process and training, among other things, because of Monopoly</p>

<p class=BodyText>I started consulting at Object Space. I had gotten fully
burnt out from training. I got to the point where (I though) I knew all the questions
I might get asked and had overly precise answers to each of those questions. My
first gig out of training was to work on a Smalltalk project that eventually
involved some C programming. I convinced the client to use C++ and all of a
sudden I was training several people C++ on a real project using an OO
database.</p>

<p class=BodyText>In 1994 I came across the STL from Stepanov and Lee. After
learning it a bit, I started using it on this project. I remember having a
10,000 semicolon program that took 7 hours to compile on an HP because of
templates. The same program took 15 minutes on a 400 MHz Pentium using Visual
C++ 4.2.</p>

<p class=BodyText>Consulting at Object Space gave accelerated my learning. I
got to experience things that didn’t work without having to commit the error
myself. I am certain that given the opportunity, I would have done many of the
things my clients did exactly how they did it (I often did). So I managed to
learn faster because I was seeing what did not work and then coming up with
something that did work.</p>

<p class=BodyText>I worked as the “architect” for a three team distributed
development effort starting in 1997 after learning Java. This is where I was
introduced to JUnit and I became test-infected. So I’ve been writing unit tests
in one form or another for about 13 years now. I worked on a Java phone
project; I helped port a system from using MS tools to Java 1.02 and we used
invisible applets for asynchronous DOM updates (it wasn’t AJAX, but it was the
same idea – everybody was doing it at that point). Later, related to that
project, I was that architect that did the over-design of a project and then
got pulled off for later development. I went back to see the damage my over
design had caused, I did help remove some deadlock issues but that was a
failure of over design even if the product did get used.</p>

<p class=BodyText>Near the end of my time at Object Space I was involved in
intensive 8-week internal boot camps. This was again a great way for me to
learn as well as teach and coach. Looking back I have to assume I was pretty
bad in many ways. I know I was so-so handling the soft-skills side of things. </p>

<p class=BodyText>In 1997, along with switching to Java, I came across a book
by Jerry Weinberg. I recognized his name from Exploring Requirements, which I
loved, so I read this book and that started a journey that is still going. I
took Problem Solving Leadership then Change Shop and later the SEM group, a
Satir Yearlong program, SEM writer’s workshop and the X workshop for developing
experiential learning situations.</p>

<p class=BodyText>All of this started to take hold when I left Object Space and
joined Valtech. I took classes that had burnt me out in the past, and
redesigned them to make them more student-driven. While these were early
experiments, they’d turn out to lead to something important later on.</p>

<p class=BodyText>My job at Valtech was similar to the one at Object Space. I
taught and consulted. I was at Enron the day it went down (it wasn’t my fault).
As a result I went to England for 6 months and joined the largest project of my
career. 343 people, I was #344. I learned quite a bit about just how bad a
government project can go. After coming back from that job I stared a 6-month
project that turning into a 4-year project for me.</p>

<p class=BodyText>I was one of six people helping to port an existing COBOL
solution to Java and train the COBOL programmers at the same time. That was an
amazing experience. I learned more than I could have ever hoped. We put many
applications into production, may with very low defects. The first project was
12 people, 9 – 10 months. In the first 9 months of production use, we found one
defect. We were test infected at the time, which lead to a pretty low defect
rate. We got lucky, we made a lot of mistakes and those came back to bite us.</p>

<p class=BodyText>Of the many things I learned on that project, one of them was
a confirmation of the importance of automated testing. Even though we did a
poor job on our unit tests, they were slow, dependent on data we did not own,
etc., we were able to make significant changes without breaking things. On one
occasion we need to make an architectural change across a number of applications
(about 7). I warned the then 35ish developers that I’d be making a change on
the weekend and they wanted to be checked in by Friday. I then changed 1,287
files across around 1.5 million lines of code and didn’t break anything.</p>

<p class=BodyText>I made many mistakes but unlike many of my previous projects,
I had to live with them and learn from them. I had to eat my own dog food. So
it was a great experience with a lot of just amazing people both from Valtech
and the Hertz.</p>

<p class=BodyText>While working on this project, I worked with Aspect Oriented
Programming and introduced a solution to an ongoing problem. It was the right
solution given the context but probably not the right one if we had the option
to redo everything. I presented a talk on AOP to our Java group, at a private conference
for Valtech and then I did something that would have far-reaching effects.</p>

<p class=BodyText>I attempted to write my talk in a self-paced experiential
learning exercise. That got me started writing on Google pages first and then
later wikispaces.com. I managed to get accepted at SD West on another subject
but I was prepared to go to SD West because I was writing about what I was
learning. I was doing that because I had read another book by Jerry Weinberg,
“Weinberg on Writing.” Since I started that site, I’ve written around 800 pages
of material. From late 2008 to August 2010 I had 700,000 hits to my site. That
doesn’t count the first 2 years. Because I was presenting at SD West, I once
again met Bob Martin. I had applied at Object Mentor in 2001 but did not take the
job an instead joined Valtech. However, in 2007 things were different. Valtech
made a similar mistake to Object Space that had essentially signed the death
knell for Object space; they got rid of the training department.</p>

<p class=BodyText>When I discovered that had happened I was in a tutorial by
Bob Martin. I discussed joining Object Mentor; two weeks later I had an offer. 6
weeks after that I finished up an internal boot camp I was teaching at Hertz
and I joined Object Mentor.</p>

<p class=BodyText>For three years I worked at Object Mentor honing my Agile
software development skills, like Test Driven Development. In those three years
I came across many excellent people and projects, which just accelerated my
learning.</p>

<p class=BodyText>Around mid-June 2010 my good friend David Nunn offered me the
C++ classes. I had been teaching C++ at Object Mentor, primarily Test Driven
Development in C++. I took where I was at and wrote a class that was very
different from the kind of class I wrote in the early 1990’s. </p>

<p class=BodyText>That class is the genesis of this book.</p>

<h1><a name="_Toc202609352"><span style='font-weight:normal'>14<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Index</a></h1>

<p class=BodyText></p>

</div>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:auto'>
</span>

<div class=WordSection4>

<p class=MsoIndex1><span lang=EN-GB>#define, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>#endif, 34, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>#ifndef, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>#include, 37</span></p>

<p class=MsoIndex2><span lang=EN-GB>&quot;&quot; versus &lt;&gt;, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>#pragma, 33, 37</span></p>

<p class=MsoIndex2><span lang=EN-GB>once, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>&lt;tr1/random&gt;, 58</span></p>

<p class=MsoIndex1><span lang=EN-GB>array, 58</span></p>

<p class=MsoIndex1><span lang=EN-GB>Assignment Operator, 63</span></p>

<p class=MsoIndex1><span lang=EN-GB>Automated Tests</span></p>

<p class=MsoIndex2><span lang=EN-GB>Test Control, 65</span></p>

<p class=MsoIndex2><span lang=EN-GB>Test Granularity, 44</span></p>

<p class=MsoIndex2><span lang=EN-GB>Wisdom, 39</span></p>

<p class=MsoIndex1><span lang=EN-GB>C++ Idioms, 61</span></p>

<p class=MsoIndex1><span lang=EN-GB>C++ Recommendations</span></p>

<p class=MsoIndex2><span lang=EN-GB>prefer initialization over assignment, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>C++ Standard Library</span></p>

<p class=MsoIndex2><span lang=EN-GB>array, 58</span></p>

<p class=MsoIndex2><span lang=EN-GB>begin, 58</span></p>

<p class=MsoIndex2><span lang=EN-GB>end, 58</span></p>

<p class=MsoIndex2><span lang=EN-GB>mt19937, 59</span></p>

<p class=MsoIndex2><span lang=EN-GB>vector, 28</span></p>

<p class=MsoIndex1><span lang=EN-GB>C++ Terminology, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>assignment, 58</span></p>

<p class=MsoIndex2><span lang=EN-GB>Assignment Operator, 63</span></p>

<p class=MsoIndex2><span lang=EN-GB>Compilation Unit, 26</span></p>

<p class=MsoIndex2><span lang=EN-GB>const member function, 37</span></p>

<p class=MsoIndex2><span lang=EN-GB>Copy Constructor, 64</span></p>

<p class=MsoIndex2><span lang=EN-GB>declaration, 33</span></p>

<p class=MsoIndex2><span lang=EN-GB>definition, 33, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>Destructor, 64</span></p>

<p class=MsoIndex2><span lang=EN-GB>initialization, 59</span></p>

<p class=MsoIndex2><span lang=EN-GB>l-value, 59</span></p>

<p class=MsoIndex2><span lang=EN-GB>Member function, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>member-wise initialization list, 59</span></p>

<p class=MsoIndex2><span lang=EN-GB>namespace, 59</span></p>

<p class=MsoIndex2><span lang=EN-GB>non-primitive, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>Object Module, 27</span></p>

<p class=MsoIndex2><span lang=EN-GB>Operator Overloading, 64</span></p>

<p class=MsoIndex2><span lang=EN-GB>operator(), 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>pre-increment, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>primitive, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>r-value, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>static, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>struct, 27</span></p>

<p class=MsoIndex2><span lang=EN-GB>template class, 27, 61</span></p>

<p class=MsoIndex2><span lang=EN-GB>typedef, 61</span></p>

<p class=MsoIndex2><span lang=EN-GB>virtual, 65</span></p>

<p class=MsoIndex1><span lang=EN-GB>class, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>class versus struct, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>CommandLineTestRunner, 26, 27</span></p>

<p class=MsoIndex2><span lang=EN-GB>CommandLineTestRunner.h, 26</span></p>

<p class=MsoIndex2><span lang=EN-GB>RunAllTests, 27</span></p>

<p class=MsoIndex1><span lang=EN-GB>command-query separation, 58</span></p>

<p class=MsoIndex1><span lang=EN-GB>Common Errors</span></p>

<p class=MsoIndex2><span lang=EN-GB>Forgetting ; at the end of class, 36</span></p>

<p class=MsoIndex2><span lang=EN-GB>Forgetting ; at the end of TEST_GROUP, 36</span></p>

<p class=MsoIndex2><span lang=EN-GB>Getting the signature incorrect, 36</span></p>

<p class=MsoIndex1><span lang=EN-GB>Compilation Unit, 26</span></p>

<p class=MsoIndex1><span lang=EN-GB>const member function, 37</span></p>

<p class=MsoIndex1><span lang=EN-GB>Constructor, 58</span></p>

<p class=MsoIndex2><span lang=EN-GB>no-argument constructor, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>Copy Constructor, 64</span></p>

<p class=MsoIndex1><span lang=EN-GB>CppUTest, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>Auto Test Discovery, 26</span></p>

<p class=MsoIndex2><span lang=EN-GB>Building CppUTest, 18</span></p>

<p class=MsoIndex2><span lang=EN-GB>CHECK, 37</span></p>

<p class=MsoIndex2><span lang=EN-GB>CommandLineTestRunner, 26, 27</span></p>

<p class=MsoIndex2><span lang=EN-GB>Downloading CppUTest, 18</span></p>

<p class=MsoIndex2><span lang=EN-GB>LONGS_EQUAL, 26</span></p>

<p class=MsoIndex2><span lang=EN-GB>Mechanics of CppUTest, 20</span></p>

<p class=MsoIndex2><span lang=EN-GB>Order of Tests, 44</span></p>

<p class=MsoIndex2><span lang=EN-GB>RunAllTests, 27</span></p>

<p class=MsoIndex2><span lang=EN-GB>TEST, 27, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>Test Fixture, 45</span></p>

<p class=MsoIndex2><span lang=EN-GB>TEST_GROUP, 27, 38, 41</span></p>

<p class=MsoIndex2><span lang=EN-GB>TestHarness.h, 27, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>Creating a Project, 20</span></p>

<p class=MsoIndex1><span lang=EN-GB>declaration, 33, 34, 37, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>definition, 33, 34, 35, 37, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>Dependency Injection, 67</span></p>

<p class=MsoIndex1><span lang=EN-GB>Design Principles</span></p>

<p class=MsoIndex2><span lang=EN-GB>command-query separation, 58</span></p>

<p class=MsoIndex1><span lang=EN-GB>Destructor, 64</span></p>

<p class=MsoIndex1><span lang=EN-GB>Don't Repeat Yourself, 41</span></p>

<p class=MsoIndex1><span lang=EN-GB>Downloading CppUTest, 18</span></p>

<p class=MsoIndex1><span lang=EN-GB>DRY, 41</span></p>

<p class=MsoIndex1><span lang=EN-GB>Ecipse CDT</span></p>

<p class=MsoIndex2><span lang=EN-GB>Library Path, 21</span></p>

<p class=MsoIndex1><span lang=EN-GB>Eclipse CDT</span></p>

<p class=MsoIndex2><span lang=EN-GB>Auto Save and Refresh, 21</span></p>

<p class=MsoIndex2><span lang=EN-GB>C++0x, 21</span></p>

<p class=MsoIndex2><span lang=EN-GB>Creating a Project, 20</span></p>

<p class=MsoIndex2><span lang=EN-GB>Include Path, 20, 21</span></p>

<p class=MsoIndex2><span lang=EN-GB>Included Libraries, 21</span></p>

<p class=MsoIndex2><span lang=EN-GB>Installing Eclipse CDT, 16</span></p>

<p class=MsoIndex2><span lang=EN-GB>Installing the Wascana Plugin, 18</span></p>

<p class=MsoIndex2><span lang=EN-GB>Library Path, 20</span></p>

<p class=MsoIndex2><span lang=EN-GB>Run Last Thing Execute, 22</span></p>

<p class=MsoIndex2><span lang=EN-GB>Starting Eclipse CDT, 16</span></p>

<p class=MsoIndex1><span lang=EN-GB>Eclipse Shortcuts</span></p>

<p class=MsoIndex2><span lang=EN-GB>Ctrl-B, 26</span></p>

<p class=MsoIndex2><span lang=EN-GB>Ctrl-F11, 26</span></p>

<p class=MsoIndex1><span lang=EN-GB>function-object, 58</span></p>

<p class=MsoIndex1><span lang=EN-GB>functor, 59</span></p>

<p class=MsoIndex1><span lang=EN-GB>Include Directory, 26</span></p>

<p class=MsoIndex1><span lang=EN-GB>Include Path, 20</span></p>

<p class=MsoIndex1><span lang=EN-GB>Installing Eclipse CDT, 16</span></p>

<p class=MsoIndex1><span lang=EN-GB>Installing the Wascana Plugin, 18</span></p>

<p class=MsoIndex1><span lang=EN-GB>Library Directory, 26</span></p>

<p class=MsoIndex1><span lang=EN-GB>Library Path, 20</span></p>

<p class=MsoIndex1><span lang=EN-GB>LONGS_EQUAL, 26</span></p>

<p class=MsoIndex1><span lang=EN-GB>Mechanics of CppUTest, 20</span></p>

<p class=MsoIndex1><span lang=EN-GB>Member function, 38</span></p>

<p class=MsoIndex2><span lang=EN-GB>definition, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>member-wise initialization list, 59</span></p>

<p class=MsoIndex1><span lang=EN-GB>namespace, 59</span></p>

<p class=MsoIndex1><span lang=EN-GB>nested type, 59</span></p>

<p class=MsoIndex1><span lang=EN-GB>nested typedef, 59</span></p>

<p class=MsoIndex1><span lang=EN-GB>no-argument constructor, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>non-primitive, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>Object Module, 27</span></p>

<p class=MsoIndex1><span lang=EN-GB>Operator Overloading, 64</span></p>

<p class=MsoIndex1><span lang=EN-GB>operator(), 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>Polymorphism, 68, 70, 72</span></p>

<p class=MsoIndex2><span lang=EN-GB>Moving Parts, 68</span></p>

<p class=MsoIndex1><span lang=EN-GB>prefer initialization over assignment, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>pre-increment, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>primitive, 60</span></p>

<p class=MsoIndex2><span lang=EN-GB>initialization, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>private:, 34, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>protected:, 34</span></p>

<p class=MsoIndex1><span lang=EN-GB>public:, 34, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>Refactoring, 31</span></p>

<p class=MsoIndex1><span lang=EN-GB>Refactroing, 54</span></p>

<p class=MsoIndex1><span lang=EN-GB>RunAllTests, 27</span></p>

<p class=MsoIndex1><span lang=EN-GB>r-value, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>Scope ::, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>static, 60</span></p>

<p class=MsoIndex1><span lang=EN-GB>struct versus class, 38</span></p>

<p class=MsoIndex1><span lang=EN-GB>template class, 61</span></p>

<p class=MsoIndex1><span lang=EN-GB>TEST, 27, 45</span></p>

<p class=MsoIndex1><span lang=EN-GB>Test Control, 65</span></p>

<p class=MsoIndex1><span lang=EN-GB>Test Fixture, 45</span></p>

<p class=MsoIndex1><span lang=EN-GB>Test Granularity, 44</span></p>

<p class=MsoIndex1><i><span lang=EN-GB>TEST_GROUP</span></i><span lang=EN-GB>,
27, 41, 42, 45</span></p>

<p class=MsoIndex1><span lang=EN-GB>TestHarness.h, 27</span></p>

<p class=MsoIndex1><span lang=EN-GB>typedef, 59, 61</span></p>

<p class=MsoIndex1><span lang=EN-GB>UML, 30</span></p>

<p class=MsoIndex2><span lang=EN-GB>Class Diagram, 42, 66</span></p>

<p class=MsoIndex2><span lang=EN-GB>Communication Diagram, 67</span></p>

<p class=MsoIndex1><span lang=EN-GB>vector, 28</span></p>

<p class=MsoIndex1><span lang=EN-GB>virtual, 65</span></p>

<p class=MsoIndex1><span lang=EN-GB>Wascana Plugin</span></p>

<p class=MsoIndex2><span lang=EN-GB>Installing the Wascana Plugin, 18</span></p>

</div>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:auto'>
</span>

<div class=WordSection5>

<p class=BodyText>&nbsp;</p>

</div>

<div><br clear=all>

<hr align=left size=1 width="33%">

<div id=ftn1>

<p class=MsoFootnoteText><a href="#_ftnref1" name="_ftn1" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[1]</span></span></span></span></a><span
lang=EN-GB> </span>C Development Toolkit.</p>

</div>

<div id=ftn2>

<p class=MsoFootnoteText><a href="#_ftnref2" name="_ftn2" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[2]</span></span></span></span></a><span
lang=EN-GB> </span>Integrated Development Environment.</p>

</div>

<div id=ftn3>

<p class=MsoFootnoteText><a href="#_ftnref3" name="_ftn3" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[3]</span></span></span></span></a><span
lang=EN-GB> </span>Virtual Machine.</p>

</div>

<div id=ftn4>

<p class=MsoFootnoteText><a href="#_ftnref4" name="_ftn4" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[4]</span></span></span></span></a><span
lang=EN-GB> </span>Unified Modeling Language.</p>

</div>

<div id=ftn5>

<p class=MsoFootnoteText><a href="#_ftnref5" name="_ftn5" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[5]</span></span></span></span></a><span
lang=EN-GB> </span>Site Pragmatic Programmer, Dave Thomas.</p>

</div>

<div id=ftn6>

<p class=MsoFootnoteText><a href="#_ftnref6" name="_ftn6" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[6]</span></span></span></span></a><span
lang=EN-GB> </span>The general answer to this question is: “Write another
test.” – Really.</p>

</div>

<div id=ftn7>

<p class=MsoFootnoteText><a href="#_ftnref7" name="_ftn7" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[7]</span></span></span></span></a><span
lang=EN-GB> </span>These temporary variables are called “explaining variables”
by Martin Fowler in Refactoring.</p>

</div>

<div id=ftn8>

<p class=MsoFootnoteText><a href="#_ftnref8" name="_ftn8" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[8]</span></span></span></span></a><span
lang=EN-GB> </span>This is somewhat simplified, but it’s a good enough model
for the discussion.</p>

</div>

<div id=ftn9>

<p class=MsoFootnoteText><a href="#_ftnref9" name="_ftn9" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[9]</span></span></span></span></a><span
lang=EN-GB> </span>That’s one of the ways this book avoids being an
encyclopedia. Another is simply not covering everything. So you will not win
any trivial pursuit contests, but you will be able to write decent OO programs
with what you will learn.</p>

</div>

<div id=ftn10>

<p class=MsoFootnoteText><a href="#_ftnref10" name="_ftn10" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[10]</span></span></span></span></a><span
lang=EN-GB> <a href="http://xunitpatterns.com/">http://xunitpatterns.com/</a>,
Meszaros, Gerard.</span></p>

</div>

<div id=ftn11>

<p class=MsoFootnoteText><a href="#_ftnref11" name="_ftn11" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[11]</span></span></span></span></a><span
lang=EN-GB> </span>C++ does not actually support interfaces, but there is an
idiomatic way to create something similar. In any case, an interface is
something that describes pure behavior without providing any implementation.
That is, it provides method declarations but no method definitions.</p>

</div>

<div id=ftn12>

<p class=MsoFootnoteText><a href="#_ftnref12" name="_ftn12" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[12]</span></span></span></span></a><span
lang=EN-GB> </span>This is a surface-level rule. In fact, if sub-classes do no
dynamic memory allocation then the destructor does not need to be virtual.
There’s even more. However, the overhead of making the destructor virtual when
you have another virtual method is much lower than adding the first virtual
method.</p>

</div>

<div id=ftn13>

<p class=MsoFootnoteText><a href="#_ftnref13" name="_ftn13" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[13]</span></span></span></span></a><span
lang=EN-GB> </span>That is, given a pointer, there is no language-defined way
to tell if it points to something created with new or not. You can only delete
things created with new.</p>

</div>

<div id=ftn14>

<p class=MsoFootnoteText><a href="#_ftnref14" name="_ftn14" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[14]</span></span></span></span></a><span
lang=EN-GB> </span>This has to do with virtual method dispatch. More on this
later.</p>

</div>

<div id=ftn15>

<p class=MsoFootnoteText><a href="#_ftnref15" name="_ftn15" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[15]</span></span></span></span></a><span
lang=EN-GB> </span>This is somewhat simplified, return types can be co-variant,
but this is the only mention of that idea in this book. It’s too advanced for
this book.</p>

</div>

<div id=ftn16>

<p class=MsoFootnoteText><a href="#_ftnref16" name="_ftn16" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[16]</span></span></span></span></a><span
lang=EN-GB> </span>Note that this is close to valid C++. There are 2 problems.
First, this is a reserved word, so you cannot name a variable this. Second, the
name of the method includes two _. While technically valid, the compiler and
preprocessor reserve names with two or more _ (typically at the beginning of a
name). So in practice I would not put two consecutive underscores in a name.</p>

</div>

<div id=ftn17>

<p class=MsoFootnoteText><a href="#_ftnref17" name="_ftn17" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[17]</span></span></span></span></a><span
lang=EN-GB> </span>In fact, this is literally equivalent as this form will
compile and work just fine.</p>

</div>

<div id=ftn18>

<p class=MsoFootnoteText><a href="#_ftnref18" name="_ftn18" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[18]</span></span></span></span></a><span
lang=EN-GB> </span>You can use const_cast&lt;Die*&gt;(this) to remove the
const-ness. That’s the last you’ll hear of it in this book as it is out of
scope.</p>

</div>

<div id=ftn19>

<p class=MsoFootnoteText><a href="#_ftnref19" name="_ftn19" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[19]</span></span></span></span></a><span
lang=EN-GB> The actual class has more than one template argument; this is
logically showing what’s necessary to get a working operator-&gt; method added
to a class like the shared_ptr class.</span></p>

</div>

<div id=ftn20>

<p class=MsoFootnoteText><a href="#_ftnref20" name="_ftn20" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[20]</span></span></span></span></a><span
lang=EN-GB> </span>This is logical; an implementation won’t allocate the shared
count until necessary, typically.</p>

</div>

<div id=ftn21>

<p class=MsoFootnoteText><a href="#_ftnref21" name="_ftn21" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[21]</span></span></span></span></a><span
lang=EN-GB> </span>Review the code in <span lang=EN-GB>Updated Source</span> on
page <span>53</span>. Specifically the discussion of the line including <span
class=Example><span lang=EN-GB>uniform(engine)</span></span><span lang=EN-GB>.</span></p>

</div>

<div id=ftn22>

<p class=MsoFootnoteText><a href="#_ftnref22" name="_ftn22" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[22]</span></span></span></span></a><span
lang=EN-GB> </span>This code requires gcc 4.5 or later or VS 2010. So it might
not work with your configuration.</p>

</div>

<div id=ftn23>

<p class=MsoFootnoteText><a href="#_ftnref23" name="_ftn23" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[23]</span></span></span></span></a><span
lang=EN-GB> </span>Most of this book is written using gcc 4.4, but for this
example I used 4.5. I stick to 4.4 throughout the book because it represents a
good middle ground in what you can expect in modern compilers.</p>

</div>

<div id=ftn24>

<p class=MsoFootnoteText><a href="#_ftnref24" name="_ftn24" title=""><span
class=MsoFootnoteReference><span lang=EN-GB><span class=MsoFootnoteReference><span
lang=EN-GB style='font-size:9.5pt;font-family:Arial;color:black'>[24]</span></span></span></span></a><span
lang=EN-GB> </span>As with the previous lambda version, this example requires
gcc 4.5 or later or Visual Studio 2010. It might work with other compilers as
well, your mileage may vary.</p>

</div>

</div>

</body>

</html>
